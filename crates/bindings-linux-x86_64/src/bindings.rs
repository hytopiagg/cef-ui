/* automatically generated by rust-bindgen 0.69.4 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 38;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const OS_LINUX: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const LIBC_GLIBC: u32 = 1;
pub const OS_POSIX: u32 = 1;
pub const COMPILER_GCC: u32 = 1;
pub const ARCH_CPU_X86_FAMILY: u32 = 1;
pub const ARCH_CPU_X86_64: u32 = 1;
pub const ARCH_CPU_64_BITS: u32 = 1;
pub const ARCH_CPU_LITTLE_ENDIAN: u32 = 1;
pub const CEF_STRING_TYPE_UTF16: u32 = 1;
pub const _UCHAR_H: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const CEF_X11: u32 = 1;
pub const kNullCursorHandle: u32 = 0;
pub const kNullWindowHandle: u32 = 0;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const kInvalidPlatformThreadId: u32 = 0;
pub const kInvalidPlatformThreadHandle: u32 = 0;
pub const CEF_VERSION: &[u8; 42] = b"121.3.15+g4d3b0b4+chromium-121.0.6167.184\0";
pub const CEF_VERSION_MAJOR: u32 = 121;
pub const CEF_VERSION_MINOR: u32 = 3;
pub const CEF_VERSION_PATCH: u32 = 15;
pub const CEF_COMMIT_NUMBER: u32 = 2912;
pub const CEF_COMMIT_HASH: &[u8; 41] = b"4d3b0b471a5e15a0de692cdfe8a65f0cefcb4228\0";
pub const COPYRIGHT_YEAR: u32 = 2024;
pub const CHROME_VERSION_MAJOR: u32 = 121;
pub const CHROME_VERSION_MINOR: u32 = 0;
pub const CHROME_VERSION_BUILD: u32 = 6167;
pub const CHROME_VERSION_PATCH: u32 = 184;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize]
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
    -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_LINK_MAX;
pub const _PC_MAX_CANON: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_CANON;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_INPUT;
pub const _PC_NAME_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_NAME_MAX;
pub const _PC_PATH_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_PATH_MAX;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_PIPE_BUF;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = _bindgen_ty_1::_PC_CHOWN_RESTRICTED;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = _bindgen_ty_1::_PC_NO_TRUNC;
pub const _PC_VDISABLE: _bindgen_ty_1 = _bindgen_ty_1::_PC_VDISABLE;
pub const _PC_SYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYNC_IO;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_ASYNC_IO;
pub const _PC_PRIO_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_PRIO_IO;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_SOCK_MAXBUF;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = _bindgen_ty_1::_PC_FILESIZEBITS;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_INCR_XFER_SIZE;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_MAX_XFER_SIZE;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_MIN_XFER_SIZE;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_XFER_ALIGN;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = _bindgen_ty_1::_PC_ALLOC_SIZE_MIN;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYMLINK_MAX;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = _bindgen_ty_1::_PC_2_SYMLINKS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20
}
pub const _SC_ARG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ARG_MAX;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHILD_MAX;
pub const _SC_CLK_TCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_CLK_TCK;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NGROUPS_MAX;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_OPEN_MAX;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAM_MAX;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TZNAME_MAX;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = _bindgen_ty_2::_SC_JOB_CONTROL;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SAVED_IDS;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = _bindgen_ty_2::_SC_REALTIME_SIGNALS;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = _bindgen_ty_2::_SC_PRIORITY_SCHEDULING;
pub const _SC_TIMERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMERS;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_ASYNCHRONOUS_IO;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_PRIORITIZED_IO;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYNCHRONIZED_IO;
pub const _SC_FSYNC: _bindgen_ty_2 = _bindgen_ty_2::_SC_FSYNC;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = _bindgen_ty_2::_SC_MAPPED_FILES;
pub const _SC_MEMLOCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK_RANGE;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMORY_PROTECTION;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = _bindgen_ty_2::_SC_MESSAGE_PASSING;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEMAPHORES;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHARED_MEMORY_OBJECTS;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_LISTIO_MAX;
pub const _SC_AIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_MAX;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_PRIO_DELTA_MAX;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_DELAYTIMER_MAX;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_OPEN_MAX;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_PRIO_MAX;
pub const _SC_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_VERSION;
pub const _SC_PAGESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PAGESIZE;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RTSIG_MAX;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_NSEMS_MAX;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_VALUE_MAX;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGQUEUE_MAX;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMER_MAX;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_BASE_MAX;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_DIM_MAX;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_SCALE_MAX;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_STRING_MAX;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_COLL_WEIGHTS_MAX;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_EQUIV_CLASS_MAX;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_EXPR_NEST_MAX;
pub const _SC_LINE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_LINE_MAX;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RE_DUP_MAX;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHARCLASS_NAME_MAX;
pub const _SC_2_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_VERSION;
pub const _SC_2_C_BIND: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_BIND;
pub const _SC_2_C_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_DEV;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_DEV;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_RUN;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_SW_DEV;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_LOCALEDEF;
pub const _SC_PII: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII;
pub const _SC_PII_XTI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_XTI;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_SOCKET;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET;
pub const _SC_PII_OSI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI;
pub const _SC_POLL: _bindgen_ty_2 = _bindgen_ty_2::_SC_POLL;
pub const _SC_SELECT: _bindgen_ty_2 = _bindgen_ty_2::_SC_SELECT;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET_STREAM;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET_DGRAM;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_COTS;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_CLTS;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_M;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_T_IOV_MAX;
pub const _SC_THREADS: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREADS;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_SAFE_FUNCTIONS;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_GETGR_R_SIZE_MAX;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_GETPW_R_SIZE_MAX;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_LOGIN_NAME_MAX;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TTY_NAME_MAX;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_DESTRUCTOR_ITERATIONS;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_KEYS_MAX;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_STACK_MIN;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_THREADS_MAX;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_ATTR_STACKADDR;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_ATTR_STACKSIZE;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIORITY_SCHEDULING;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_PRIO_INHERIT;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_PRIO_PROTECT;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_PROCESS_SHARED;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = _bindgen_ty_2::_SC_NPROCESSORS_CONF;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = _bindgen_ty_2::_SC_NPROCESSORS_ONLN;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_PHYS_PAGES;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_AVPHYS_PAGES;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ATEXIT_MAX;
pub const _SC_PASS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_PASS_MAX;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_VERSION;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XCU_VERSION;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_UNIX;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_CRYPT;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_ENH_I18N;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_SHM;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_CHAR_TERM;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_VERSION;
pub const _SC_2_UPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_UPE;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG2;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG3;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG4;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_BIT;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MAX;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MIN;
pub const _SC_INT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MAX;
pub const _SC_INT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MIN;
pub const _SC_LONG_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_LONG_BIT;
pub const _SC_WORD_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_WORD_BIT;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MB_LEN_MAX;
pub const _SC_NZERO: _bindgen_ty_2 = _bindgen_ty_2::_SC_NZERO;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SSIZE_MAX;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MAX;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MIN;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MAX;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MIN;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UCHAR_MAX;
pub const _SC_UINT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UINT_MAX;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ULONG_MAX;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_USHRT_MAX;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_ARGMAX;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_LANGMAX;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_MSGMAX;
pub const _SC_NL_NMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_NMAX;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_SETMAX;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_TEXTMAX;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_ILP32_OFF32;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_ILP32_OFFBIG;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_LP64_OFF64;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_LPBIG_OFFBIG;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_LEGACY;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_REALTIME;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_REALTIME_THREADS;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_ADVISORY_INFO;
pub const _SC_BARRIERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_BARRIERS;
pub const _SC_BASE: _bindgen_ty_2 = _bindgen_ty_2::_SC_BASE;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = _bindgen_ty_2::_SC_C_LANG_SUPPORT;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_C_LANG_SUPPORT_R;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = _bindgen_ty_2::_SC_CLOCK_SELECTION;
pub const _SC_CPUTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_CPUTIME;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_CPUTIME;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_IO;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_SPECIFIC;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_SPECIFIC_R;
pub const _SC_FD_MGMT: _bindgen_ty_2 = _bindgen_ty_2::_SC_FD_MGMT;
pub const _SC_FIFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_FIFO;
pub const _SC_PIPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PIPE;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_ATTRIBUTES;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_LOCKING;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_SYSTEM;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_MONOTONIC_CLOCK;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = _bindgen_ty_2::_SC_MULTI_PROCESS;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SINGLE_PROCESS;
pub const _SC_NETWORKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_NETWORKING;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = _bindgen_ty_2::_SC_READER_WRITER_LOCKS;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPIN_LOCKS;
pub const _SC_REGEXP: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEXP;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEX_VERSION;
pub const _SC_SHELL: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHELL;
pub const _SC_SIGNALS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGNALS;
pub const _SC_SPAWN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPAWN;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPORADIC_SERVER;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_SPORADIC_SERVER;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYSTEM_DATABASE;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYSTEM_DATABASE_R;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMEOUTS;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TYPED_MEMORY_OBJECTS;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS_R;
pub const _SC_2_PBS: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_ACCOUNTING;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_LOCATE;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_MESSAGE;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_TRACK;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYMLOOP_MAX;
pub const _SC_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAMS;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_CHECKPOINT;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_ILP32_OFF32;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_ILP32_OFFBIG;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_LP64_OFF64;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_LPBIG_OFFBIG;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_HOST_NAME_MAX;
pub const _SC_TRACE: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_EVENT_FILTER;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_INHERIT;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_LOG;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_ICACHE_SIZE;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_ICACHE_ASSOC;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_ICACHE_LINESIZE;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_DCACHE_SIZE;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_DCACHE_ASSOC;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_DCACHE_LINESIZE;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL2_CACHE_SIZE;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL2_CACHE_ASSOC;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL2_CACHE_LINESIZE;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL3_CACHE_SIZE;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL3_CACHE_ASSOC;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL3_CACHE_LINESIZE;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL4_CACHE_SIZE;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL4_CACHE_ASSOC;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL4_CACHE_LINESIZE;
pub const _SC_IPV6: _bindgen_ty_2 = _bindgen_ty_2::_SC_IPV6;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = _bindgen_ty_2::_SC_RAW_SOCKETS;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_ILP32_OFF32;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_ILP32_OFFBIG;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_LP64_OFF64;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_LPBIG_OFFBIG;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SS_REPL_MAX;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_EVENT_NAME_MAX;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_NAME_MAX;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_SYS_MAX;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_USER_EVENT_MAX;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_STREAMS;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_INHERIT;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_PROTECT;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = _bindgen_ty_2::_SC_MINSIGSTKSZ;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGSTKSZ;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
    _SC_MINSIGSTKSZ = 249,
    _SC_SIGSTKSZ = 250
}
pub const _CS_PATH: _bindgen_ty_3 = _bindgen_ty_3::_CS_PATH;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = _bindgen_ty_3::_CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = _bindgen_ty_3::_CS_GNU_LIBC_VERSION;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = _bindgen_ty_3::_CS_GNU_LIBPTHREAD_VERSION;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = _bindgen_ty_3::_CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = _bindgen_ty_3::_CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_CFLAGS;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LDFLAGS;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LIBS;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LINTFLAGS;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_CFLAGS;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LDFLAGS;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LIBS;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_CFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LDFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LIBS;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_CFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LDFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LIBS;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LP64_OFF64_CFLAGS;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LDFLAGS;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LIBS;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LINTFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_CFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LIBS;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LIBS;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LIBS;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_V6_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V6_ENV;
pub const _CS_V7_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V7_ENV;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_3 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149
}
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0:      u64,
    pub __clang_max_align_nonce2: u128
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch:  ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize]
}
pub type mbstate_t = __mbstate_t;
pub type char16_t = __uint_least16_t;
pub type char32_t = __uint_least32_t;
extern "C" {
    pub fn mbrtoc16(
        __pc16: *mut char16_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t
    ) -> usize;
}
extern "C" {
    pub fn c16rtomb(
        __s: *mut ::std::os::raw::c_char,
        __c16: char16_t,
        __ps: *mut mbstate_t
    ) -> usize;
}
extern "C" {
    pub fn mbrtoc32(
        __pc32: *mut char32_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t
    ) -> usize;
}
extern "C" {
    pub fn c32rtomb(
        __s: *mut ::std::os::raw::c_char,
        __c32: char32_t,
        __ps: *mut mbstate_t
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_wide_t {
    pub str_:   *mut wchar_t,
    pub length: usize,
    pub dtor:   ::std::option::Option<unsafe extern "C" fn(str_: *mut wchar_t)>
}
pub type cef_string_wide_t = _cef_string_wide_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf8_t {
    pub str_:   *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor:   ::std::option::Option<unsafe extern "C" fn(str_: *mut ::std::os::raw::c_char)>
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf16_t {
    pub str_:   *mut char16_t,
    pub length: usize,
    pub dtor:   ::std::option::Option<unsafe extern "C" fn(str_: *mut char16_t)>
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
extern "C" {
    pub fn cef_string_wide_set(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_wide_t,
        copy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_set(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf8_t,
        copy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_clear(str_: *mut cef_string_wide_t);
}
extern "C" {
    pub fn cef_string_utf8_clear(str_: *mut cef_string_utf8_t);
}
extern "C" {
    pub fn cef_string_utf16_clear(str_: *mut cef_string_utf16_t);
}
extern "C" {
    pub fn cef_string_wide_cmp(
        str1: *const cef_string_wide_t,
        str2: *const cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_cmp(
        str1: *const cef_string_utf8_t,
        str2: *const cef_string_utf8_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t,
        str2: *const cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf8(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_utf8_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_wide(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf16(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_wide(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf8_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_wide(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
pub type cef_string_userfree_wide_t = *mut cef_string_wide_t;
pub type cef_string_userfree_utf8_t = *mut cef_string_utf8_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    pub fn cef_string_userfree_wide_alloc() -> cef_string_userfree_wide_t;
}
extern "C" {
    pub fn cef_string_userfree_utf8_alloc() -> cef_string_userfree_utf8_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    pub fn cef_string_userfree_wide_free(str_: cef_string_userfree_wide_t);
}
extern "C" {
    pub fn cef_string_userfree_utf8_free(str_: cef_string_userfree_utf8_t);
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str_: cef_string_userfree_utf16_t);
}
extern "C" {
    pub fn cef_string_utf16_to_lower(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
pub type cef_char_t = char16_t;
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_list_t {
    _unused: [u8; 0]
}
pub type cef_string_list_t = *mut _cef_string_list_t;
extern "C" {
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    pub fn cef_string_list_value(
        list: cef_string_list_t,
        index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
extern "C" {
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_map_t {
    _unused: [u8; 0]
}
pub type cef_string_map_t = *mut _cef_string_map_t;
extern "C" {
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    pub fn cef_string_map_find(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_key(
        map: cef_string_map_t,
        index: usize,
        key: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_value(
        map: cef_string_map_t,
        index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_append(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *const cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    pub fn cef_string_map_free(map: cef_string_map_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_multimap_t {
    _unused: [u8; 0]
}
pub type cef_string_multimap_t = *mut _cef_string_multimap_t;
extern "C" {
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
extern "C" {
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
extern "C" {
    pub fn cef_string_multimap_find_count(
        map: cef_string_multimap_t,
        key: *const cef_string_t
    ) -> usize;
}
extern "C" {
    pub fn cef_string_multimap_enumerate(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value_index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_key(
        map: cef_string_multimap_t,
        index: usize,
        key: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_value(
        map: cef_string_multimap_t,
        index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_append(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value: *const cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
extern "C" {
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec:    ::std::os::raw::c_int,
    pub tm_min:    ::std::os::raw::c_int,
    pub tm_hour:   ::std::os::raw::c_int,
    pub tm_mday:   ::std::os::raw::c_int,
    pub tm_mon:    ::std::os::raw::c_int,
    pub tm_year:   ::std::os::raw::c_int,
    pub tm_wday:   ::std::os::raw::c_int,
    pub tm_yday:   ::std::os::raw::c_int,
    pub tm_isdst:  ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone:   *const ::std::os::raw::c_char
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec:  __time_t,
    pub tv_nsec: __syscall_slong_t
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value:    timespec
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales:       [*mut __locale_data; 13usize],
    pub __ctype_b:       *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names:         [*const ::std::os::raw::c_char; 13usize]
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_basetime_t {
    pub val: i64
}
pub type cef_basetime_t = _cef_basetime_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_time_t {
    pub year:         ::std::os::raw::c_int,
    pub month:        ::std::os::raw::c_int,
    pub day_of_week:  ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour:         ::std::os::raw::c_int,
    pub minute:       ::std::os::raw::c_int,
    pub second:       ::std::os::raw::c_int,
    pub millisecond:  ::std::os::raw::c_int
}
pub type cef_time_t = _cef_time_t;
extern "C" {
    pub fn cef_time_to_timet(
        cef_time: *const cef_time_t,
        time: *mut time_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_timet(time: time_t, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_to_doublet(
        cef_time: *const cef_time_t,
        time: *mut f64
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_basetime_now() -> cef_basetime_t;
}
extern "C" {
    pub fn cef_time_delta(
        cef_time1: *const cef_time_t,
        cef_time2: *const cef_time_t,
        delta: *mut ::std::os::raw::c_longlong
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_to_basetime(
        from: *const cef_time_t,
        to: *mut cef_basetime_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_basetime(
        from: cef_basetime_t,
        to: *mut cef_time_t
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_content_setting_types_t {
    CEF_CONTENT_SETTING_TYPE_COOKIES = 0,
    CEF_CONTENT_SETTING_TYPE_IMAGES = 1,
    CEF_CONTENT_SETTING_TYPE_JAVASCRIPT = 2,
    CEF_CONTENT_SETTING_TYPE_POPUPS = 3,
    CEF_CONTENT_SETTING_TYPE_GEOLOCATION = 4,
    CEF_CONTENT_SETTING_TYPE_NOTIFICATIONS = 5,
    CEF_CONTENT_SETTING_TYPE_AUTO_SELECT_CERTIFICATE = 6,
    CEF_CONTENT_SETTING_TYPE_MIXEDSCRIPT = 7,
    CEF_CONTENT_SETTING_TYPE_MEDIASTREAM_MIC = 8,
    CEF_CONTENT_SETTING_TYPE_MEDIASTREAM_CAMERA = 9,
    CEF_CONTENT_SETTING_TYPE_PROTOCOL_HANDLERS = 10,
    CEF_CONTENT_SETTING_TYPE_DEPRECATED_PPAPI_BROKER = 11,
    CEF_CONTENT_SETTING_TYPE_AUTOMATIC_DOWNLOADS = 12,
    CEF_CONTENT_SETTING_TYPE_MIDI_SYSEX = 13,
    CEF_CONTENT_SETTING_TYPE_SSL_CERT_DECISIONS = 14,
    CEF_CONTENT_SETTING_TYPE_PROTECTED_MEDIA_IDENTIFIER = 15,
    CEF_CONTENT_SETTING_TYPE_APP_BANNER = 16,
    CEF_CONTENT_SETTING_TYPE_SITE_ENGAGEMENT = 17,
    CEF_CONTENT_SETTING_TYPE_DURABLE_STORAGE = 18,
    CEF_CONTENT_SETTING_TYPE_USB_CHOOSER_DATA = 19,
    CEF_CONTENT_SETTING_TYPE_BLUETOOTH_GUARD = 20,
    CEF_CONTENT_SETTING_TYPE_BACKGROUND_SYNC = 21,
    CEF_CONTENT_SETTING_TYPE_AUTOPLAY = 22,
    CEF_CONTENT_SETTING_TYPE_IMPORTANT_SITE_INFO = 23,
    CEF_CONTENT_SETTING_TYPE_PERMISSION_AUTOBLOCKER_DATA = 24,
    CEF_CONTENT_SETTING_TYPE_ADS = 25,
    CEF_CONTENT_SETTING_TYPE_ADS_DATA = 26,
    CEF_CONTENT_SETTING_TYPE_MIDI = 27,
    CEF_CONTENT_SETTING_TYPE_PASSWORD_PROTECTION = 28,
    CEF_CONTENT_SETTING_TYPE_MEDIA_ENGAGEMENT = 29,
    CEF_CONTENT_SETTING_TYPE_SOUND = 30,
    CEF_CONTENT_SETTING_TYPE_CLIENT_HINTS = 31,
    CEF_CONTENT_SETTING_TYPE_SENSORS = 32,
    CEF_CONTENT_SETTING_TYPE_ACCESSIBILITY_EVENTS = 33,
    CEF_CONTENT_SETTING_TYPE_PAYMENT_HANDLER = 34,
    CEF_CONTENT_SETTING_TYPE_USB_GUARD = 35,
    CEF_CONTENT_SETTING_TYPE_BACKGROUND_FETCH = 36,
    CEF_CONTENT_SETTING_TYPE_INTENT_PICKER_DISPLAY = 37,
    CEF_CONTENT_SETTING_TYPE_IDLE_DETECTION = 38,
    CEF_CONTENT_SETTING_TYPE_SERIAL_GUARD = 39,
    CEF_CONTENT_SETTING_TYPE_SERIAL_CHOOSER_DATA = 40,
    CEF_CONTENT_SETTING_TYPE_PERIODIC_BACKGROUND_SYNC = 41,
    CEF_CONTENT_SETTING_TYPE_BLUETOOTH_SCANNING = 42,
    CEF_CONTENT_SETTING_TYPE_HID_GUARD = 43,
    CEF_CONTENT_SETTING_TYPE_HID_CHOOSER_DATA = 44,
    CEF_CONTENT_SETTING_TYPE_WAKE_LOCK_SCREEN = 45,
    CEF_CONTENT_SETTING_TYPE_WAKE_LOCK_SYSTEM = 46,
    CEF_CONTENT_SETTING_TYPE_LEGACY_COOKIE_ACCESS = 47,
    CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_WRITE_GUARD = 48,
    CEF_CONTENT_SETTING_TYPE_NFC = 49,
    CEF_CONTENT_SETTING_TYPE_BLUETOOTH_CHOOSER_DATA = 50,
    CEF_CONTENT_SETTING_TYPE_CLIPBOARD_READ_WRITE = 51,
    CEF_CONTENT_SETTING_TYPE_CLIPBOARD_SANITIZED_WRITE = 52,
    CEF_CONTENT_SETTING_TYPE_SAFE_BROWSING_URL_CHECK_DATA = 53,
    CEF_CONTENT_SETTING_TYPE_VR = 54,
    CEF_CONTENT_SETTING_TYPE_AR = 55,
    CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_READ_GUARD = 56,
    CEF_CONTENT_SETTING_TYPE_STORAGE_ACCESS = 57,
    CEF_CONTENT_SETTING_TYPE_CAMERA_PAN_TILT_ZOOM = 58,
    CEF_CONTENT_SETTING_TYPE_WINDOW_MANAGEMENT = 59,
    CEF_CONTENT_SETTING_TYPE_INSECURE_PRIVATE_NETWORK = 60,
    CEF_CONTENT_SETTING_TYPE_LOCAL_FONTS = 61,
    CEF_CONTENT_SETTING_TYPE_PERMISSION_AUTOREVOCATION_DATA = 62,
    CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_LAST_PICKED_DIRECTORY = 63,
    CEF_CONTENT_SETTING_TYPE_DISPLAY_CAPTURE = 64,
    CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_CHOOSER_DATA = 65,
    CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_SHARING = 66,
    CEF_CONTENT_SETTING_TYPE_JAVASCRIPT_JIT = 67,
    CEF_CONTENT_SETTING_TYPE_HTTP_ALLOWED = 68,
    CEF_CONTENT_SETTING_TYPE_FORMFILL_METADATA = 69,
    CEF_CONTENT_SETTING_TYPE_DEPRECATED_FEDERATED_IDENTITY_ACTIVE_SESSION = 70,
    CEF_CONTENT_SETTING_TYPE_AUTO_DARK_WEB_CONTENT = 71,
    CEF_CONTENT_SETTING_TYPE_REQUEST_DESKTOP_SITE = 72,
    CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_API = 73,
    CEF_CONTENT_SETTING_TYPE_NOTIFICATION_INTERACTIONS = 74,
    CEF_CONTENT_SETTING_TYPE_REDUCED_ACCEPT_LANGUAGE = 75,
    CEF_CONTENT_SETTING_TYPE_NOTIFICATION_PERMISSION_REVIEW = 76,
    CEF_CONTENT_SETTING_TYPE_PRIVATE_NETWORK_GUARD = 77,
    CEF_CONTENT_SETTING_TYPE_PRIVATE_NETWORK_CHOOSER_DATA = 78,
    CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_IDENTITY_PROVIDER_SIGNIN_STATUS = 79,
    CEF_CONTENT_SETTING_TYPE_REVOKED_UNUSED_SITE_PERMISSIONS = 80,
    CEF_CONTENT_SETTING_TYPE_TOP_LEVEL_STORAGE_ACCESS = 81,
    CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_AUTO_REAUTHN_PERMISSION = 82,
    CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_IDENTITY_PROVIDER_REGISTRATION = 83,
    CEF_CONTENT_SETTING_TYPE_ANTI_ABUSE = 84,
    CEF_CONTENT_SETTING_TYPE_THIRD_PARTY_STORAGE_PARTITIONING = 85,
    CEF_CONTENT_SETTING_TYPE_HTTPS_ENFORCED = 86,
    CEF_CONTENT_SETTING_TYPE_ALL_SCREEN_CAPTURE = 87,
    CEF_CONTENT_SETTING_TYPE_COOKIE_CONTROLS_METADATA = 88,
    CEF_CONTENT_SETTING_TYPE_TPCD_SUPPORT = 89,
    CEF_CONTENT_SETTING_TYPE_AUTO_PICTURE_IN_PICTURE = 90,
    CEF_CONTENT_SETTING_TYPE_TPCD_METADATA_GRANTS = 91,
    CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_EXTENDED_PERMISSION = 92,
    CEF_CONTENT_SETTING_TYPE_TPCD_HEURISTICS_GRANTS = 93,
    CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_RESTORE_PERMISSION = 94,
    CEF_CONTENT_SETTING_TYPE_NUM_TYPES = 95
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_content_setting_values_t {
    CEF_CONTENT_SETTING_VALUE_DEFAULT = 0,
    CEF_CONTENT_SETTING_VALUE_ALLOW = 1,
    CEF_CONTENT_SETTING_VALUE_BLOCK = 2,
    CEF_CONTENT_SETTING_VALUE_ASK = 3,
    CEF_CONTENT_SETTING_VALUE_SESSION_ONLY = 4,
    CEF_CONTENT_SETTING_VALUE_DETECT_IMPORTANT_CONTENT = 5,
    CEF_CONTENT_SETTING_VALUE_NUM_VALUES = 6
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int
}
pub type cef_point_t = _cef_point_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_rect_t {
    pub x:      ::std::os::raw::c_int,
    pub y:      ::std::os::raw::c_int,
    pub width:  ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int
}
pub type cef_rect_t = _cef_rect_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_size_t {
    pub width:  ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int
}
pub type cef_size_t = _cef_size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_insets_t {
    pub top:    ::std::os::raw::c_int,
    pub left:   ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right:  ::std::os::raw::c_int
}
pub type cef_insets_t = _cef_insets_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XEvent {
    _unused: [u8; 0]
}
pub type XEvent = _XEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0]
}
pub type XDisplay = _XDisplay;
extern "C" {
    pub fn cef_get_xdisplay() -> *mut XDisplay;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_main_args_t {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char
}
pub type cef_main_args_t = _cef_main_args_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_info_t {
    pub window_name:                  cef_string_t,
    pub bounds:                       cef_rect_t,
    pub parent_window:                ::std::os::raw::c_ulong,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub shared_texture_enabled:       ::std::os::raw::c_int,
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    pub window:                       ::std::os::raw::c_ulong
}
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = u32;
impl cef_log_severity_t {
    pub const LOGSEVERITY_DEBUG: cef_log_severity_t = cef_log_severity_t::LOGSEVERITY_VERBOSE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_log_severity_t {
    LOGSEVERITY_DEFAULT = 0,
    LOGSEVERITY_VERBOSE = 1,
    LOGSEVERITY_INFO = 2,
    LOGSEVERITY_WARNING = 3,
    LOGSEVERITY_ERROR = 4,
    LOGSEVERITY_FATAL = 5,
    LOGSEVERITY_DISABLE = 99
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_log_items_t {
    LOG_ITEMS_DEFAULT = 0,
    LOG_ITEMS_NONE = 1,
    LOG_ITEMS_FLAG_PROCESS_ID = 2,
    LOG_ITEMS_FLAG_THREAD_ID = 4,
    LOG_ITEMS_FLAG_TIME_STAMP = 8,
    LOG_ITEMS_FLAG_TICK_COUNT = 16
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_state_t {
    STATE_DEFAULT = 0,
    STATE_ENABLED = 1,
    STATE_DISABLED = 2
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_settings_t {
    pub size:                                usize,
    pub no_sandbox:                          ::std::os::raw::c_int,
    pub browser_subprocess_path:             cef_string_t,
    pub framework_dir_path:                  cef_string_t,
    pub main_bundle_path:                    cef_string_t,
    pub chrome_runtime:                      ::std::os::raw::c_int,
    pub multi_threaded_message_loop:         ::std::os::raw::c_int,
    pub external_message_pump:               ::std::os::raw::c_int,
    pub windowless_rendering_enabled:        ::std::os::raw::c_int,
    pub command_line_args_disabled:          ::std::os::raw::c_int,
    pub cache_path:                          cef_string_t,
    pub root_cache_path:                     cef_string_t,
    pub persist_session_cookies:             ::std::os::raw::c_int,
    pub persist_user_preferences:            ::std::os::raw::c_int,
    pub user_agent:                          cef_string_t,
    pub user_agent_product:                  cef_string_t,
    pub locale:                              cef_string_t,
    pub log_file:                            cef_string_t,
    pub log_severity:                        cef_log_severity_t,
    pub log_items:                           cef_log_items_t,
    pub javascript_flags:                    cef_string_t,
    pub resources_dir_path:                  cef_string_t,
    pub locales_dir_path:                    cef_string_t,
    pub pack_loading_disabled:               ::std::os::raw::c_int,
    pub remote_debugging_port:               ::std::os::raw::c_int,
    pub uncaught_exception_stack_size:       ::std::os::raw::c_int,
    pub background_color:                    cef_color_t,
    pub accept_language_list:                cef_string_t,
    pub cookieable_schemes_list:             cef_string_t,
    pub cookieable_schemes_exclude_defaults: ::std::os::raw::c_int,
    pub chrome_policy_id:                    cef_string_t,
    pub chrome_app_icon_id:                  ::std::os::raw::c_int
}
pub type cef_settings_t = _cef_settings_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_settings_t {
    pub size:                                usize,
    pub cache_path:                          cef_string_t,
    pub persist_session_cookies:             ::std::os::raw::c_int,
    pub persist_user_preferences:            ::std::os::raw::c_int,
    pub accept_language_list:                cef_string_t,
    pub cookieable_schemes_list:             cef_string_t,
    pub cookieable_schemes_exclude_defaults: ::std::os::raw::c_int
}
pub type cef_request_context_settings_t = _cef_request_context_settings_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_settings_t {
    pub size:                           usize,
    pub windowless_frame_rate:          ::std::os::raw::c_int,
    pub standard_font_family:           cef_string_t,
    pub fixed_font_family:              cef_string_t,
    pub serif_font_family:              cef_string_t,
    pub sans_serif_font_family:         cef_string_t,
    pub cursive_font_family:            cef_string_t,
    pub fantasy_font_family:            cef_string_t,
    pub default_font_size:              ::std::os::raw::c_int,
    pub default_fixed_font_size:        ::std::os::raw::c_int,
    pub minimum_font_size:              ::std::os::raw::c_int,
    pub minimum_logical_font_size:      ::std::os::raw::c_int,
    pub default_encoding:               cef_string_t,
    pub remote_fonts:                   cef_state_t,
    pub javascript:                     cef_state_t,
    pub javascript_close_windows:       cef_state_t,
    pub javascript_access_clipboard:    cef_state_t,
    pub javascript_dom_paste:           cef_state_t,
    pub image_loading:                  cef_state_t,
    pub image_shrink_standalone_to_fit: cef_state_t,
    pub text_area_resize:               cef_state_t,
    pub tab_to_links:                   cef_state_t,
    pub local_storage:                  cef_state_t,
    pub databases:                      cef_state_t,
    pub webgl:                          cef_state_t,
    pub background_color:               cef_color_t,
    pub chrome_status_bubble:           cef_state_t,
    pub chrome_zoom_bubble:             cef_state_t
}
pub type cef_browser_settings_t = _cef_browser_settings_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_return_value_t {
    RV_CANCEL = 0,
    RV_CONTINUE = 1,
    RV_CONTINUE_ASYNC = 2
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlparts_t {
    pub spec:     cef_string_t,
    pub scheme:   cef_string_t,
    pub username: cef_string_t,
    pub password: cef_string_t,
    pub host:     cef_string_t,
    pub port:     cef_string_t,
    pub origin:   cef_string_t,
    pub path:     cef_string_t,
    pub query:    cef_string_t,
    pub fragment: cef_string_t
}
pub type cef_urlparts_t = _cef_urlparts_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cookie_priority_t {
    CEF_COOKIE_PRIORITY_LOW = -1,
    CEF_COOKIE_PRIORITY_MEDIUM = 0,
    CEF_COOKIE_PRIORITY_HIGH = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cookie_same_site_t {
    CEF_COOKIE_SAME_SITE_UNSPECIFIED = 0,
    CEF_COOKIE_SAME_SITE_NO_RESTRICTION = 1,
    CEF_COOKIE_SAME_SITE_LAX_MODE = 2,
    CEF_COOKIE_SAME_SITE_STRICT_MODE = 3
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_t {
    pub name:        cef_string_t,
    pub value:       cef_string_t,
    pub domain:      cef_string_t,
    pub path:        cef_string_t,
    pub secure:      ::std::os::raw::c_int,
    pub httponly:    ::std::os::raw::c_int,
    pub creation:    cef_basetime_t,
    pub last_access: cef_basetime_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires:     cef_basetime_t,
    pub same_site:   cef_cookie_same_site_t,
    pub priority:    cef_cookie_priority_t
}
pub type cef_cookie_t = _cef_cookie_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_termination_status_t {
    TS_ABNORMAL_TERMINATION = 0,
    TS_PROCESS_WAS_KILLED = 1,
    TS_PROCESS_CRASHED = 2,
    TS_PROCESS_OOM = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_path_key_t {
    PK_DIR_CURRENT = 0,
    PK_DIR_EXE = 1,
    PK_DIR_MODULE = 2,
    PK_DIR_TEMP = 3,
    PK_FILE_EXE = 4,
    PK_FILE_MODULE = 5,
    PK_LOCAL_APP_DATA = 6,
    PK_USER_DATA = 7,
    PK_DIR_RESOURCES = 8
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_storage_type_t {
    ST_LOCALSTORAGE = 0,
    ST_SESSIONSTORAGE = 1
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_errorcode_t {
    ERR_NONE = 0,
    ERR_IO_PENDING = -1,
    ERR_FAILED = -2,
    ERR_ABORTED = -3,
    ERR_INVALID_ARGUMENT = -4,
    ERR_INVALID_HANDLE = -5,
    ERR_FILE_NOT_FOUND = -6,
    ERR_TIMED_OUT = -7,
    ERR_FILE_TOO_BIG = -8,
    ERR_UNEXPECTED = -9,
    ERR_ACCESS_DENIED = -10,
    ERR_NOT_IMPLEMENTED = -11,
    ERR_INSUFFICIENT_RESOURCES = -12,
    ERR_OUT_OF_MEMORY = -13,
    ERR_UPLOAD_FILE_CHANGED = -14,
    ERR_SOCKET_NOT_CONNECTED = -15,
    ERR_FILE_EXISTS = -16,
    ERR_FILE_PATH_TOO_LONG = -17,
    ERR_FILE_NO_SPACE = -18,
    ERR_FILE_VIRUS_INFECTED = -19,
    ERR_BLOCKED_BY_CLIENT = -20,
    ERR_NETWORK_CHANGED = -21,
    ERR_BLOCKED_BY_ADMINISTRATOR = -22,
    ERR_SOCKET_IS_CONNECTED = -23,
    ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED = -25,
    ERR_CONTEXT_SHUT_DOWN = -26,
    ERR_BLOCKED_BY_RESPONSE = -27,
    ERR_CLEARTEXT_NOT_PERMITTED = -29,
    ERR_BLOCKED_BY_CSP = -30,
    ERR_H2_OR_QUIC_REQUIRED = -31,
    ERR_BLOCKED_BY_ORB = -32,
    ERR_CONNECTION_CLOSED = -100,
    ERR_CONNECTION_RESET = -101,
    ERR_CONNECTION_REFUSED = -102,
    ERR_CONNECTION_ABORTED = -103,
    ERR_CONNECTION_FAILED = -104,
    ERR_NAME_NOT_RESOLVED = -105,
    ERR_INTERNET_DISCONNECTED = -106,
    ERR_SSL_PROTOCOL_ERROR = -107,
    ERR_ADDRESS_INVALID = -108,
    ERR_ADDRESS_UNREACHABLE = -109,
    ERR_SSL_CLIENT_AUTH_CERT_NEEDED = -110,
    ERR_TUNNEL_CONNECTION_FAILED = -111,
    ERR_NO_SSL_VERSIONS_ENABLED = -112,
    ERR_SSL_VERSION_OR_CIPHER_MISMATCH = -113,
    ERR_SSL_RENEGOTIATION_REQUESTED = -114,
    ERR_PROXY_AUTH_UNSUPPORTED = -115,
    ERR_BAD_SSL_CLIENT_AUTH_CERT = -117,
    ERR_CONNECTION_TIMED_OUT = -118,
    ERR_HOST_RESOLVER_QUEUE_TOO_LARGE = -119,
    ERR_SOCKS_CONNECTION_FAILED = -120,
    ERR_SOCKS_CONNECTION_HOST_UNREACHABLE = -121,
    ERR_ALPN_NEGOTIATION_FAILED = -122,
    ERR_SSL_NO_RENEGOTIATION = -123,
    ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES = -124,
    ERR_SSL_DECOMPRESSION_FAILURE_ALERT = -125,
    ERR_SSL_BAD_RECORD_MAC_ALERT = -126,
    ERR_PROXY_AUTH_REQUESTED = -127,
    ERR_PROXY_CONNECTION_FAILED = -130,
    ERR_MANDATORY_PROXY_CONFIGURATION_FAILED = -131,
    ERR_PRECONNECT_MAX_SOCKET_LIMIT = -133,
    ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED = -134,
    ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY = -135,
    ERR_PROXY_CERTIFICATE_INVALID = -136,
    ERR_NAME_RESOLUTION_FAILED = -137,
    ERR_NETWORK_ACCESS_DENIED = -138,
    ERR_TEMPORARILY_THROTTLED = -139,
    ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT = -140,
    ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED = -141,
    ERR_MSG_TOO_BIG = -142,
    ERR_WS_PROTOCOL_ERROR = -145,
    ERR_ADDRESS_IN_USE = -147,
    ERR_SSL_HANDSHAKE_NOT_COMPLETED = -148,
    ERR_SSL_BAD_PEER_PUBLIC_KEY = -149,
    ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = -150,
    ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED = -151,
    ERR_SSL_DECRYPT_ERROR_ALERT = -153,
    ERR_WS_THROTTLE_QUEUE_TOO_LARGE = -154,
    ERR_SSL_SERVER_CERT_CHANGED = -156,
    ERR_SSL_UNRECOGNIZED_NAME_ALERT = -159,
    ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR = -160,
    ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR = -161,
    ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE = -162,
    ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE = -163,
    ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT = -164,
    ERR_ICANN_NAME_COLLISION = -166,
    ERR_SSL_SERVER_CERT_BAD_FORMAT = -167,
    ERR_CT_STH_PARSING_FAILED = -168,
    ERR_CT_STH_INCOMPLETE = -169,
    ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH = -170,
    ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED = -171,
    ERR_SSL_OBSOLETE_CIPHER = -172,
    ERR_WS_UPGRADE = -173,
    ERR_READ_IF_READY_NOT_IMPLEMENTED = -174,
    ERR_NO_BUFFER_SPACE = -176,
    ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS = -177,
    ERR_EARLY_DATA_REJECTED = -178,
    ERR_WRONG_VERSION_ON_EARLY_DATA = -179,
    ERR_TLS13_DOWNGRADE_DETECTED = -180,
    ERR_SSL_KEY_USAGE_INCOMPATIBLE = -181,
    ERR_INVALID_ECH_CONFIG_LIST = -182,
    ERR_ECH_NOT_NEGOTIATED = -183,
    ERR_ECH_FALLBACK_CERTIFICATE_INVALID = -184,
    ERR_CERT_COMMON_NAME_INVALID = -200,
    ERR_CERT_DATE_INVALID = -201,
    ERR_CERT_AUTHORITY_INVALID = -202,
    ERR_CERT_CONTAINS_ERRORS = -203,
    ERR_CERT_NO_REVOCATION_MECHANISM = -204,
    ERR_CERT_UNABLE_TO_CHECK_REVOCATION = -205,
    ERR_CERT_REVOKED = -206,
    ERR_CERT_INVALID = -207,
    ERR_CERT_WEAK_SIGNATURE_ALGORITHM = -208,
    ERR_CERT_NON_UNIQUE_NAME = -210,
    ERR_CERT_WEAK_KEY = -211,
    ERR_CERT_NAME_CONSTRAINT_VIOLATION = -212,
    ERR_CERT_VALIDITY_TOO_LONG = -213,
    ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = -214,
    ERR_CERT_SYMANTEC_LEGACY = -215,
    ERR_CERT_KNOWN_INTERCEPTION_BLOCKED = -217,
    ERR_CERT_END = -219,
    ERR_INVALID_URL = -300,
    ERR_DISALLOWED_URL_SCHEME = -301,
    ERR_UNKNOWN_URL_SCHEME = -302,
    ERR_INVALID_REDIRECT = -303,
    ERR_TOO_MANY_REDIRECTS = -310,
    ERR_UNSAFE_REDIRECT = -311,
    ERR_UNSAFE_PORT = -312,
    ERR_INVALID_RESPONSE = -320,
    ERR_INVALID_CHUNKED_ENCODING = -321,
    ERR_METHOD_NOT_SUPPORTED = -322,
    ERR_UNEXPECTED_PROXY_AUTH = -323,
    ERR_EMPTY_RESPONSE = -324,
    ERR_RESPONSE_HEADERS_TOO_BIG = -325,
    ERR_PAC_SCRIPT_FAILED = -327,
    ERR_REQUEST_RANGE_NOT_SATISFIABLE = -328,
    ERR_MALFORMED_IDENTITY = -329,
    ERR_CONTENT_DECODING_FAILED = -330,
    ERR_NETWORK_IO_SUSPENDED = -331,
    ERR_SYN_REPLY_NOT_RECEIVED = -332,
    ERR_ENCODING_CONVERSION_FAILED = -333,
    ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT = -334,
    ERR_NO_SUPPORTED_PROXIES = -336,
    ERR_HTTP2_PROTOCOL_ERROR = -337,
    ERR_INVALID_AUTH_CREDENTIALS = -338,
    ERR_UNSUPPORTED_AUTH_SCHEME = -339,
    ERR_ENCODING_DETECTION_FAILED = -340,
    ERR_MISSING_AUTH_CREDENTIALS = -341,
    ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS = -342,
    ERR_MISCONFIGURED_AUTH_ENVIRONMENT = -343,
    ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS = -344,
    ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN = -345,
    ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH = -346,
    ERR_INCOMPLETE_HTTP2_HEADERS = -347,
    ERR_PAC_NOT_IN_DHCP = -348,
    ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION = -349,
    ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION = -350,
    ERR_HTTP2_SERVER_REFUSED_STREAM = -351,
    ERR_HTTP2_PING_FAILED = -352,
    ERR_CONTENT_LENGTH_MISMATCH = -354,
    ERR_INCOMPLETE_CHUNKED_ENCODING = -355,
    ERR_QUIC_PROTOCOL_ERROR = -356,
    ERR_RESPONSE_HEADERS_TRUNCATED = -357,
    ERR_QUIC_HANDSHAKE_FAILED = -358,
    ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY = -360,
    ERR_HTTP2_FLOW_CONTROL_ERROR = -361,
    ERR_HTTP2_FRAME_SIZE_ERROR = -362,
    ERR_HTTP2_COMPRESSION_ERROR = -363,
    ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION = -364,
    ERR_HTTP_1_1_REQUIRED = -365,
    ERR_PROXY_HTTP_1_1_REQUIRED = -366,
    ERR_PAC_SCRIPT_TERMINATED = -367,
    ERR_INVALID_HTTP_RESPONSE = -370,
    ERR_CONTENT_DECODING_INIT_FAILED = -371,
    ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED = -372,
    ERR_TOO_MANY_RETRIES = -375,
    ERR_HTTP2_STREAM_CLOSED = -376,
    ERR_HTTP_RESPONSE_CODE_FAILURE = -379,
    ERR_QUIC_CERT_ROOT_NOT_KNOWN = -380,
    ERR_QUIC_GOAWAY_REQUEST_CAN_BE_RETRIED = -381,
    ERR_TOO_MANY_ACCEPT_CH_RESTARTS = -382,
    ERR_INCONSISTENT_IP_ADDRESS_SPACE = -383,
    ERR_CACHED_IP_ADDRESS_SPACE_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_POLICY = -384,
    ERR_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_CHECKS = -385,
    ERR_CACHE_MISS = -400,
    ERR_CACHE_READ_FAILURE = -401,
    ERR_CACHE_WRITE_FAILURE = -402,
    ERR_CACHE_OPERATION_NOT_SUPPORTED = -403,
    ERR_CACHE_OPEN_FAILURE = -404,
    ERR_CACHE_CREATE_FAILURE = -405,
    ERR_CACHE_RACE = -406,
    ERR_CACHE_CHECKSUM_READ_FAILURE = -407,
    ERR_CACHE_CHECKSUM_MISMATCH = -408,
    ERR_CACHE_LOCK_TIMEOUT = -409,
    ERR_CACHE_AUTH_FAILURE_AFTER_READ = -410,
    ERR_CACHE_ENTRY_NOT_SUITABLE = -411,
    ERR_CACHE_DOOM_FAILURE = -412,
    ERR_CACHE_OPEN_OR_CREATE_FAILURE = -413,
    ERR_INSECURE_RESPONSE = -501,
    ERR_NO_PRIVATE_KEY_FOR_CERT = -502,
    ERR_ADD_USER_CERT_FAILED = -503,
    ERR_INVALID_SIGNED_EXCHANGE = -504,
    ERR_INVALID_WEB_BUNDLE = -505,
    ERR_TRUST_TOKEN_OPERATION_FAILED = -506,
    ERR_TRUST_TOKEN_OPERATION_SUCCESS_WITHOUT_SENDING_REQUEST = -507,
    ERR_FTP_FAILED = -601,
    ERR_FTP_SERVICE_UNAVAILABLE = -602,
    ERR_FTP_TRANSFER_ABORTED = -603,
    ERR_FTP_FILE_BUSY = -604,
    ERR_FTP_SYNTAX_ERROR = -605,
    ERR_FTP_COMMAND_NOT_SUPPORTED = -606,
    ERR_FTP_BAD_COMMAND_SEQUENCE = -607,
    ERR_PKCS12_IMPORT_BAD_PASSWORD = -701,
    ERR_PKCS12_IMPORT_FAILED = -702,
    ERR_IMPORT_CA_CERT_NOT_CA = -703,
    ERR_IMPORT_CERT_ALREADY_EXISTS = -704,
    ERR_IMPORT_CA_CERT_FAILED = -705,
    ERR_IMPORT_SERVER_CERT_FAILED = -706,
    ERR_PKCS12_IMPORT_INVALID_MAC = -707,
    ERR_PKCS12_IMPORT_INVALID_FILE = -708,
    ERR_PKCS12_IMPORT_UNSUPPORTED = -709,
    ERR_KEY_GENERATION_FAILED = -710,
    ERR_PRIVATE_KEY_EXPORT_FAILED = -712,
    ERR_SELF_SIGNED_CERT_GENERATION_FAILED = -713,
    ERR_CERT_DATABASE_CHANGED = -714,
    ERR_CERT_VERIFIER_CHANGED = -716,
    ERR_DNS_MALFORMED_RESPONSE = -800,
    ERR_DNS_SERVER_REQUIRES_TCP = -801,
    ERR_DNS_SERVER_FAILED = -802,
    ERR_DNS_TIMED_OUT = -803,
    ERR_DNS_CACHE_MISS = -804,
    ERR_DNS_SEARCH_EMPTY = -805,
    ERR_DNS_SORT_ERROR = -806,
    ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED = -808,
    ERR_DNS_NAME_HTTPS_ONLY = -809,
    ERR_DNS_REQUEST_CANCELLED = -810,
    ERR_DNS_NO_MATCHING_SUPPORTED_ALPN = -811,
    ERR_DICTIONARY_LOAD_FAILED = -812
}
pub const cef_cert_status_t_CERT_STATUS_NONE: cef_cert_status_t = 0;
pub const cef_cert_status_t_CERT_STATUS_COMMON_NAME_INVALID: cef_cert_status_t = 1;
pub const cef_cert_status_t_CERT_STATUS_DATE_INVALID: cef_cert_status_t = 2;
pub const cef_cert_status_t_CERT_STATUS_AUTHORITY_INVALID: cef_cert_status_t = 4;
pub const cef_cert_status_t_CERT_STATUS_NO_REVOCATION_MECHANISM: cef_cert_status_t = 16;
pub const cef_cert_status_t_CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: cef_cert_status_t = 32;
pub const cef_cert_status_t_CERT_STATUS_REVOKED: cef_cert_status_t = 64;
pub const cef_cert_status_t_CERT_STATUS_INVALID: cef_cert_status_t = 128;
pub const cef_cert_status_t_CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: cef_cert_status_t = 256;
pub const cef_cert_status_t_CERT_STATUS_NON_UNIQUE_NAME: cef_cert_status_t = 1024;
pub const cef_cert_status_t_CERT_STATUS_WEAK_KEY: cef_cert_status_t = 2048;
pub const cef_cert_status_t_CERT_STATUS_PINNED_KEY_MISSING: cef_cert_status_t = 8192;
pub const cef_cert_status_t_CERT_STATUS_NAME_CONSTRAINT_VIOLATION: cef_cert_status_t = 16384;
pub const cef_cert_status_t_CERT_STATUS_VALIDITY_TOO_LONG: cef_cert_status_t = 32768;
pub const cef_cert_status_t_CERT_STATUS_IS_EV: cef_cert_status_t = 65536;
pub const cef_cert_status_t_CERT_STATUS_REV_CHECKING_ENABLED: cef_cert_status_t = 131072;
pub const cef_cert_status_t_CERT_STATUS_SHA1_SIGNATURE_PRESENT: cef_cert_status_t = 524288;
pub const cef_cert_status_t_CERT_STATUS_CT_COMPLIANCE_FAILED: cef_cert_status_t = 1048576;
pub type cef_cert_status_t = ::std::os::raw::c_uint;
impl cef_window_open_disposition_t {
    pub const CEF_WOD_MAX_VALUE: cef_window_open_disposition_t =
        cef_window_open_disposition_t::CEF_WOD_NEW_PICTURE_IN_PICTURE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_window_open_disposition_t {
    CEF_WOD_UNKNOWN = 0,
    CEF_WOD_CURRENT_TAB = 1,
    CEF_WOD_SINGLETON_TAB = 2,
    CEF_WOD_NEW_FOREGROUND_TAB = 3,
    CEF_WOD_NEW_BACKGROUND_TAB = 4,
    CEF_WOD_NEW_POPUP = 5,
    CEF_WOD_NEW_WINDOW = 6,
    CEF_WOD_SAVE_TO_DISK = 7,
    CEF_WOD_OFF_THE_RECORD = 8,
    CEF_WOD_IGNORE_ACTION = 9,
    CEF_WOD_SWITCH_TO_TAB = 10,
    CEF_WOD_NEW_PICTURE_IN_PICTURE = 11
}
pub const cef_drag_operations_mask_t_DRAG_OPERATION_NONE: cef_drag_operations_mask_t = 0;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_COPY: cef_drag_operations_mask_t = 1;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_LINK: cef_drag_operations_mask_t = 2;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_GENERIC: cef_drag_operations_mask_t = 4;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_PRIVATE: cef_drag_operations_mask_t = 8;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_MOVE: cef_drag_operations_mask_t = 16;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_DELETE: cef_drag_operations_mask_t = 32;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_EVERY: cef_drag_operations_mask_t = 4294967295;
pub type cef_drag_operations_mask_t = ::std::os::raw::c_uint;
impl cef_text_input_mode_t {
    pub const CEF_TEXT_INPUT_MODE_MAX: cef_text_input_mode_t =
        cef_text_input_mode_t::CEF_TEXT_INPUT_MODE_SEARCH;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_text_input_mode_t {
    CEF_TEXT_INPUT_MODE_DEFAULT = 0,
    CEF_TEXT_INPUT_MODE_NONE = 1,
    CEF_TEXT_INPUT_MODE_TEXT = 2,
    CEF_TEXT_INPUT_MODE_TEL = 3,
    CEF_TEXT_INPUT_MODE_URL = 4,
    CEF_TEXT_INPUT_MODE_EMAIL = 5,
    CEF_TEXT_INPUT_MODE_NUMERIC = 6,
    CEF_TEXT_INPUT_MODE_DECIMAL = 7,
    CEF_TEXT_INPUT_MODE_SEARCH = 8
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_v8_accesscontrol_t {
    V8_ACCESS_CONTROL_DEFAULT = 0,
    V8_ACCESS_CONTROL_ALL_CAN_READ = 1,
    V8_ACCESS_CONTROL_ALL_CAN_WRITE = 2,
    V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING = 4
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_v8_propertyattribute_t {
    V8_PROPERTY_ATTRIBUTE_NONE = 0,
    V8_PROPERTY_ATTRIBUTE_READONLY = 1,
    V8_PROPERTY_ATTRIBUTE_DONTENUM = 2,
    V8_PROPERTY_ATTRIBUTE_DONTDELETE = 4
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_postdataelement_type_t {
    PDE_TYPE_EMPTY = 0,
    PDE_TYPE_BYTES = 1,
    PDE_TYPE_FILE = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_resource_type_t {
    RT_MAIN_FRAME = 0,
    RT_SUB_FRAME = 1,
    RT_STYLESHEET = 2,
    RT_SCRIPT = 3,
    RT_IMAGE = 4,
    RT_FONT_RESOURCE = 5,
    RT_SUB_RESOURCE = 6,
    RT_OBJECT = 7,
    RT_MEDIA = 8,
    RT_WORKER = 9,
    RT_SHARED_WORKER = 10,
    RT_PREFETCH = 11,
    RT_FAVICON = 12,
    RT_XHR = 13,
    RT_PING = 14,
    RT_SERVICE_WORKER = 15,
    RT_CSP_REPORT = 16,
    RT_PLUGIN_RESOURCE = 17,
    RT_NAVIGATION_PRELOAD_MAIN_FRAME = 19,
    RT_NAVIGATION_PRELOAD_SUB_FRAME = 20
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_transition_type_t {
    TT_LINK = 0,
    TT_EXPLICIT = 1,
    TT_AUTO_BOOKMARK = 2,
    TT_AUTO_SUBFRAME = 3,
    TT_MANUAL_SUBFRAME = 4,
    TT_GENERATED = 5,
    TT_AUTO_TOPLEVEL = 6,
    TT_FORM_SUBMIT = 7,
    TT_RELOAD = 8,
    TT_KEYWORD = 9,
    TT_KEYWORD_GENERATED = 10,
    TT_SOURCE_MASK = 255,
    TT_BLOCKED_FLAG = 8388608,
    TT_FORWARD_BACK_FLAG = 16777216,
    TT_DIRECT_LOAD_FLAG = 33554432,
    TT_HOME_PAGE_FLAG = 67108864,
    TT_FROM_API_FLAG = 134217728,
    TT_CHAIN_START_FLAG = 268435456,
    TT_CHAIN_END_FLAG = 536870912,
    TT_CLIENT_REDIRECT_FLAG = 1073741824,
    TT_SERVER_REDIRECT_FLAG = 2147483648,
    TT_IS_REDIRECT_MASK = 3221225472,
    TT_QUALIFIER_MASK = 4294967040
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_urlrequest_flags_t {
    UR_FLAG_NONE = 0,
    UR_FLAG_SKIP_CACHE = 1,
    UR_FLAG_ONLY_FROM_CACHE = 2,
    UR_FLAG_DISABLE_CACHE = 4,
    UR_FLAG_ALLOW_STORED_CREDENTIALS = 8,
    UR_FLAG_REPORT_UPLOAD_PROGRESS = 16,
    UR_FLAG_NO_DOWNLOAD_DATA = 32,
    UR_FLAG_NO_RETRY_ON_5XX = 64,
    UR_FLAG_STOP_ON_REDIRECT = 128
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_urlrequest_status_t {
    UR_UNKNOWN = 0,
    UR_SUCCESS = 1,
    UR_IO_PENDING = 2,
    UR_CANCELED = 3,
    UR_FAILED = 4
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_draggable_region_t {
    pub bounds:    cef_rect_t,
    pub draggable: ::std::os::raw::c_int
}
pub type cef_draggable_region_t = _cef_draggable_region_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_process_id_t {
    PID_BROWSER = 0,
    PID_RENDERER = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_thread_id_t {
    TID_UI = 0,
    TID_FILE_BACKGROUND = 1,
    TID_FILE_USER_VISIBLE = 2,
    TID_FILE_USER_BLOCKING = 3,
    TID_PROCESS_LAUNCHER = 4,
    TID_IO = 5,
    TID_RENDERER = 6
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_thread_priority_t {
    TP_BACKGROUND = 0,
    TP_NORMAL = 1,
    TP_DISPLAY = 2,
    TP_REALTIME_AUDIO = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_message_loop_type_t {
    ML_TYPE_DEFAULT = 0,
    ML_TYPE_UI = 1,
    ML_TYPE_IO = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_com_init_mode_t {
    COM_INIT_MODE_NONE = 0,
    COM_INIT_MODE_STA = 1,
    COM_INIT_MODE_MTA = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_value_type_t {
    VTYPE_INVALID = 0,
    VTYPE_NULL = 1,
    VTYPE_BOOL = 2,
    VTYPE_INT = 3,
    VTYPE_DOUBLE = 4,
    VTYPE_STRING = 5,
    VTYPE_BINARY = 6,
    VTYPE_DICTIONARY = 7,
    VTYPE_LIST = 8
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_jsdialog_type_t {
    JSDIALOGTYPE_ALERT = 0,
    JSDIALOGTYPE_CONFIRM = 1,
    JSDIALOGTYPE_PROMPT = 2
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_screen_info_t {
    pub device_scale_factor: f32,
    pub depth:               ::std::os::raw::c_int,
    pub depth_per_component: ::std::os::raw::c_int,
    pub is_monochrome:       ::std::os::raw::c_int,
    pub rect:                cef_rect_t,
    pub available_rect:      cef_rect_t
}
pub type cef_screen_info_t = _cef_screen_info_t;
impl cef_menu_id_t {
    pub const MENU_ID_SPELLCHECK_SUGGESTION_LAST: cef_menu_id_t =
        cef_menu_id_t::MENU_ID_SPELLCHECK_SUGGESTION_4;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_id_t {
    MENU_ID_BACK = 100,
    MENU_ID_FORWARD = 101,
    MENU_ID_RELOAD = 102,
    MENU_ID_RELOAD_NOCACHE = 103,
    MENU_ID_STOPLOAD = 104,
    MENU_ID_UNDO = 110,
    MENU_ID_REDO = 111,
    MENU_ID_CUT = 112,
    MENU_ID_COPY = 113,
    MENU_ID_PASTE = 114,
    MENU_ID_DELETE = 115,
    MENU_ID_SELECT_ALL = 116,
    MENU_ID_FIND = 130,
    MENU_ID_PRINT = 131,
    MENU_ID_VIEW_SOURCE = 132,
    MENU_ID_SPELLCHECK_SUGGESTION_0 = 200,
    MENU_ID_SPELLCHECK_SUGGESTION_1 = 201,
    MENU_ID_SPELLCHECK_SUGGESTION_2 = 202,
    MENU_ID_SPELLCHECK_SUGGESTION_3 = 203,
    MENU_ID_SPELLCHECK_SUGGESTION_4 = 204,
    MENU_ID_NO_SPELLING_SUGGESTIONS = 205,
    MENU_ID_ADD_TO_DICTIONARY = 206,
    MENU_ID_CUSTOM_FIRST = 220,
    MENU_ID_CUSTOM_LAST = 250,
    MENU_ID_USER_FIRST = 26500,
    MENU_ID_USER_LAST = 28500
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_mouse_button_type_t {
    MBT_LEFT = 0,
    MBT_MIDDLE = 1,
    MBT_RIGHT = 2
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_mouse_event_t {
    pub x:         ::std::os::raw::c_int,
    pub y:         ::std::os::raw::c_int,
    pub modifiers: u32
}
pub type cef_mouse_event_t = _cef_mouse_event_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_touch_event_type_t {
    CEF_TET_RELEASED = 0,
    CEF_TET_PRESSED = 1,
    CEF_TET_MOVED = 2,
    CEF_TET_CANCELLED = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_pointer_type_t {
    CEF_POINTER_TYPE_TOUCH = 0,
    CEF_POINTER_TYPE_MOUSE = 1,
    CEF_POINTER_TYPE_PEN = 2,
    CEF_POINTER_TYPE_ERASER = 3,
    CEF_POINTER_TYPE_UNKNOWN = 4
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_touch_event_t {
    pub id:             ::std::os::raw::c_int,
    pub x:              f32,
    pub y:              f32,
    pub radius_x:       f32,
    pub radius_y:       f32,
    pub rotation_angle: f32,
    pub pressure:       f32,
    pub type_:          cef_touch_event_type_t,
    pub modifiers:      u32,
    pub pointer_type:   cef_pointer_type_t
}
pub type cef_touch_event_t = _cef_touch_event_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_paint_element_type_t {
    PET_VIEW = 0,
    PET_POPUP = 1
}
pub const cef_event_flags_t_EVENTFLAG_NONE: cef_event_flags_t = 0;
pub const cef_event_flags_t_EVENTFLAG_CAPS_LOCK_ON: cef_event_flags_t = 1;
pub const cef_event_flags_t_EVENTFLAG_SHIFT_DOWN: cef_event_flags_t = 2;
pub const cef_event_flags_t_EVENTFLAG_CONTROL_DOWN: cef_event_flags_t = 4;
pub const cef_event_flags_t_EVENTFLAG_ALT_DOWN: cef_event_flags_t = 8;
pub const cef_event_flags_t_EVENTFLAG_LEFT_MOUSE_BUTTON: cef_event_flags_t = 16;
pub const cef_event_flags_t_EVENTFLAG_MIDDLE_MOUSE_BUTTON: cef_event_flags_t = 32;
pub const cef_event_flags_t_EVENTFLAG_RIGHT_MOUSE_BUTTON: cef_event_flags_t = 64;
pub const cef_event_flags_t_EVENTFLAG_COMMAND_DOWN: cef_event_flags_t = 128;
pub const cef_event_flags_t_EVENTFLAG_NUM_LOCK_ON: cef_event_flags_t = 256;
pub const cef_event_flags_t_EVENTFLAG_IS_KEY_PAD: cef_event_flags_t = 512;
pub const cef_event_flags_t_EVENTFLAG_IS_LEFT: cef_event_flags_t = 1024;
pub const cef_event_flags_t_EVENTFLAG_IS_RIGHT: cef_event_flags_t = 2048;
pub const cef_event_flags_t_EVENTFLAG_ALTGR_DOWN: cef_event_flags_t = 4096;
pub const cef_event_flags_t_EVENTFLAG_IS_REPEAT: cef_event_flags_t = 8192;
pub type cef_event_flags_t = ::std::os::raw::c_uint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_item_type_t {
    MENUITEMTYPE_NONE = 0,
    MENUITEMTYPE_COMMAND = 1,
    MENUITEMTYPE_CHECK = 2,
    MENUITEMTYPE_RADIO = 3,
    MENUITEMTYPE_SEPARATOR = 4,
    MENUITEMTYPE_SUBMENU = 5
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_type_flags_t {
    CM_TYPEFLAG_NONE = 0,
    CM_TYPEFLAG_PAGE = 1,
    CM_TYPEFLAG_FRAME = 2,
    CM_TYPEFLAG_LINK = 4,
    CM_TYPEFLAG_MEDIA = 8,
    CM_TYPEFLAG_SELECTION = 16,
    CM_TYPEFLAG_EDITABLE = 32
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_media_type_t {
    CM_MEDIATYPE_NONE = 0,
    CM_MEDIATYPE_IMAGE = 1,
    CM_MEDIATYPE_VIDEO = 2,
    CM_MEDIATYPE_AUDIO = 3,
    CM_MEDIATYPE_CANVAS = 4,
    CM_MEDIATYPE_FILE = 5,
    CM_MEDIATYPE_PLUGIN = 6
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_media_state_flags_t {
    CM_MEDIAFLAG_NONE = 0,
    CM_MEDIAFLAG_IN_ERROR = 1,
    CM_MEDIAFLAG_PAUSED = 2,
    CM_MEDIAFLAG_MUTED = 4,
    CM_MEDIAFLAG_LOOP = 8,
    CM_MEDIAFLAG_CAN_SAVE = 16,
    CM_MEDIAFLAG_HAS_AUDIO = 32,
    CM_MEDIAFLAG_CAN_TOGGLE_CONTROLS = 64,
    CM_MEDIAFLAG_CONTROLS = 128,
    CM_MEDIAFLAG_CAN_PRINT = 256,
    CM_MEDIAFLAG_CAN_ROTATE = 512,
    CM_MEDIAFLAG_CAN_PICTURE_IN_PICTURE = 1024,
    CM_MEDIAFLAG_PICTURE_IN_PICTURE = 2048,
    CM_MEDIAFLAG_CAN_LOOP = 4096
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_edit_state_flags_t {
    CM_EDITFLAG_NONE = 0,
    CM_EDITFLAG_CAN_UNDO = 1,
    CM_EDITFLAG_CAN_REDO = 2,
    CM_EDITFLAG_CAN_CUT = 4,
    CM_EDITFLAG_CAN_COPY = 8,
    CM_EDITFLAG_CAN_PASTE = 16,
    CM_EDITFLAG_CAN_DELETE = 32,
    CM_EDITFLAG_CAN_SELECT_ALL = 64,
    CM_EDITFLAG_CAN_TRANSLATE = 128,
    CM_EDITFLAG_CAN_EDIT_RICHLY = 256
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_quick_menu_edit_state_flags_t {
    QM_EDITFLAG_NONE = 0,
    QM_EDITFLAG_CAN_ELLIPSIS = 1,
    QM_EDITFLAG_CAN_CUT = 2,
    QM_EDITFLAG_CAN_COPY = 4,
    QM_EDITFLAG_CAN_PASTE = 8
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_key_event_type_t {
    KEYEVENT_RAWKEYDOWN = 0,
    KEYEVENT_KEYDOWN = 1,
    KEYEVENT_KEYUP = 2,
    KEYEVENT_CHAR = 3
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_key_event_t {
    pub type_:                   cef_key_event_type_t,
    pub modifiers:               u32,
    pub windows_key_code:        ::std::os::raw::c_int,
    pub native_key_code:         ::std::os::raw::c_int,
    pub is_system_key:           ::std::os::raw::c_int,
    pub character:               char16_t,
    pub unmodified_character:    char16_t,
    pub focus_on_editable_field: ::std::os::raw::c_int
}
pub type cef_key_event_t = _cef_key_event_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_focus_source_t {
    FOCUS_SOURCE_NAVIGATION = 0,
    FOCUS_SOURCE_SYSTEM = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_navigation_type_t {
    NAVIGATION_LINK_CLICKED = 0,
    NAVIGATION_FORM_SUBMITTED = 1,
    NAVIGATION_BACK_FORWARD = 2,
    NAVIGATION_RELOAD = 3,
    NAVIGATION_FORM_RESUBMITTED = 4,
    NAVIGATION_OTHER = 5
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_xml_encoding_type_t {
    XML_ENCODING_NONE = 0,
    XML_ENCODING_UTF8 = 1,
    XML_ENCODING_UTF16LE = 2,
    XML_ENCODING_UTF16BE = 3,
    XML_ENCODING_ASCII = 4
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_xml_node_type_t {
    XML_NODE_UNSUPPORTED = 0,
    XML_NODE_PROCESSING_INSTRUCTION = 1,
    XML_NODE_DOCUMENT_TYPE = 2,
    XML_NODE_ELEMENT_START = 3,
    XML_NODE_ELEMENT_END = 4,
    XML_NODE_ATTRIBUTE = 5,
    XML_NODE_TEXT = 6,
    XML_NODE_CDATA = 7,
    XML_NODE_ENTITY_REFERENCE = 8,
    XML_NODE_WHITESPACE = 9,
    XML_NODE_COMMENT = 10
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_popup_features_t {
    pub x:         ::std::os::raw::c_int,
    pub xSet:      ::std::os::raw::c_int,
    pub y:         ::std::os::raw::c_int,
    pub ySet:      ::std::os::raw::c_int,
    pub width:     ::std::os::raw::c_int,
    pub widthSet:  ::std::os::raw::c_int,
    pub height:    ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub isPopup:   ::std::os::raw::c_int
}
pub type cef_popup_features_t = _cef_popup_features_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_document_type_t {
    DOM_DOCUMENT_TYPE_UNKNOWN = 0,
    DOM_DOCUMENT_TYPE_HTML = 1,
    DOM_DOCUMENT_TYPE_XHTML = 2,
    DOM_DOCUMENT_TYPE_PLUGIN = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_event_category_t {
    DOM_EVENT_CATEGORY_UNKNOWN = 0,
    DOM_EVENT_CATEGORY_UI = 1,
    DOM_EVENT_CATEGORY_MOUSE = 2,
    DOM_EVENT_CATEGORY_MUTATION = 4,
    DOM_EVENT_CATEGORY_KEYBOARD = 8,
    DOM_EVENT_CATEGORY_TEXT = 16,
    DOM_EVENT_CATEGORY_COMPOSITION = 32,
    DOM_EVENT_CATEGORY_DRAG = 64,
    DOM_EVENT_CATEGORY_CLIPBOARD = 128,
    DOM_EVENT_CATEGORY_MESSAGE = 256,
    DOM_EVENT_CATEGORY_WHEEL = 512,
    DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED = 1024,
    DOM_EVENT_CATEGORY_OVERFLOW = 2048,
    DOM_EVENT_CATEGORY_PAGE_TRANSITION = 4096,
    DOM_EVENT_CATEGORY_POPSTATE = 8192,
    DOM_EVENT_CATEGORY_PROGRESS = 16384,
    DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS = 32768
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_event_phase_t {
    DOM_EVENT_PHASE_UNKNOWN = 0,
    DOM_EVENT_PHASE_CAPTURING = 1,
    DOM_EVENT_PHASE_AT_TARGET = 2,
    DOM_EVENT_PHASE_BUBBLING = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_node_type_t {
    DOM_NODE_TYPE_UNSUPPORTED = 0,
    DOM_NODE_TYPE_ELEMENT = 1,
    DOM_NODE_TYPE_ATTRIBUTE = 2,
    DOM_NODE_TYPE_TEXT = 3,
    DOM_NODE_TYPE_CDATA_SECTION = 4,
    DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS = 5,
    DOM_NODE_TYPE_COMMENT = 6,
    DOM_NODE_TYPE_DOCUMENT = 7,
    DOM_NODE_TYPE_DOCUMENT_TYPE = 8,
    DOM_NODE_TYPE_DOCUMENT_FRAGMENT = 9
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_form_control_type_t {
    DOM_FORM_CONTROL_TYPE_UNSUPPORTED = 0,
    DOM_FORM_CONTROL_TYPE_BUTTON_BUTTON = 1,
    DOM_FORM_CONTROL_TYPE_BUTTON_SUBMIT = 2,
    DOM_FORM_CONTROL_TYPE_BUTTON_RESET = 3,
    DOM_FORM_CONTROL_TYPE_BUTTON_SELECT_LIST = 4,
    DOM_FORM_CONTROL_TYPE_FIELDSET = 5,
    DOM_FORM_CONTROL_TYPE_INPUT_BUTTON = 6,
    DOM_FORM_CONTROL_TYPE_INPUT_CHECKBOX = 7,
    DOM_FORM_CONTROL_TYPE_INPUT_COLOR = 8,
    DOM_FORM_CONTROL_TYPE_INPUT_DATE = 9,
    DOM_FORM_CONTROL_TYPE_INPUT_DATETIME_LOCAL = 10,
    DOM_FORM_CONTROL_TYPE_INPUT_EMAIL = 11,
    DOM_FORM_CONTROL_TYPE_INPUT_FILE = 12,
    DOM_FORM_CONTROL_TYPE_INPUT_HIDDEN = 13,
    DOM_FORM_CONTROL_TYPE_INPUT_IMAGE = 14,
    DOM_FORM_CONTROL_TYPE_INPUT_MONTH = 15,
    DOM_FORM_CONTROL_TYPE_INPUT_NUMBER = 16,
    DOM_FORM_CONTROL_TYPE_INPUT_PASSWORD = 17,
    DOM_FORM_CONTROL_TYPE_INPUT_RADIO = 18,
    DOM_FORM_CONTROL_TYPE_INPUT_RANGE = 19,
    DOM_FORM_CONTROL_TYPE_INPUT_RESET = 20,
    DOM_FORM_CONTROL_TYPE_INPUT_SEARCH = 21,
    DOM_FORM_CONTROL_TYPE_INPUT_SUBMIT = 22,
    DOM_FORM_CONTROL_TYPE_INPUT_TELEPHONE = 23,
    DOM_FORM_CONTROL_TYPE_INPUT_TEXT = 24,
    DOM_FORM_CONTROL_TYPE_INPUT_TIME = 25,
    DOM_FORM_CONTROL_TYPE_INPUT_URL = 26,
    DOM_FORM_CONTROL_TYPE_INPUT_WEEK = 27,
    DOM_FORM_CONTROL_TYPE_OUTPUT = 28,
    DOM_FORM_CONTROL_TYPE_SELECT_ONE = 29,
    DOM_FORM_CONTROL_TYPE_SELECT_MULTIPLE = 30,
    DOM_FORM_CONTROL_TYPE_SELECT_LIST = 31,
    DOM_FORM_CONTROL_TYPE_TEXT_AREA = 32
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_file_dialog_mode_t {
    FILE_DIALOG_OPEN = 0,
    FILE_DIALOG_OPEN_MULTIPLE = 1,
    FILE_DIALOG_OPEN_FOLDER = 2,
    FILE_DIALOG_SAVE = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_color_model_t {
    COLOR_MODEL_UNKNOWN = 0,
    COLOR_MODEL_GRAY = 1,
    COLOR_MODEL_COLOR = 2,
    COLOR_MODEL_CMYK = 3,
    COLOR_MODEL_CMY = 4,
    COLOR_MODEL_KCMY = 5,
    COLOR_MODEL_CMY_K = 6,
    COLOR_MODEL_BLACK = 7,
    COLOR_MODEL_GRAYSCALE = 8,
    COLOR_MODEL_RGB = 9,
    COLOR_MODEL_RGB16 = 10,
    COLOR_MODEL_RGBA = 11,
    COLOR_MODEL_COLORMODE_COLOR = 12,
    COLOR_MODEL_COLORMODE_MONOCHROME = 13,
    COLOR_MODEL_HP_COLOR_COLOR = 14,
    COLOR_MODEL_HP_COLOR_BLACK = 15,
    COLOR_MODEL_PRINTOUTMODE_NORMAL = 16,
    COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY = 17,
    COLOR_MODEL_PROCESSCOLORMODEL_CMYK = 18,
    COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE = 19,
    COLOR_MODEL_PROCESSCOLORMODEL_RGB = 20
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_duplex_mode_t {
    DUPLEX_MODE_UNKNOWN = -1,
    DUPLEX_MODE_SIMPLEX = 0,
    DUPLEX_MODE_LONG_EDGE = 1,
    DUPLEX_MODE_SHORT_EDGE = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cursor_type_t {
    CT_POINTER = 0,
    CT_CROSS = 1,
    CT_HAND = 2,
    CT_IBEAM = 3,
    CT_WAIT = 4,
    CT_HELP = 5,
    CT_EASTRESIZE = 6,
    CT_NORTHRESIZE = 7,
    CT_NORTHEASTRESIZE = 8,
    CT_NORTHWESTRESIZE = 9,
    CT_SOUTHRESIZE = 10,
    CT_SOUTHEASTRESIZE = 11,
    CT_SOUTHWESTRESIZE = 12,
    CT_WESTRESIZE = 13,
    CT_NORTHSOUTHRESIZE = 14,
    CT_EASTWESTRESIZE = 15,
    CT_NORTHEASTSOUTHWESTRESIZE = 16,
    CT_NORTHWESTSOUTHEASTRESIZE = 17,
    CT_COLUMNRESIZE = 18,
    CT_ROWRESIZE = 19,
    CT_MIDDLEPANNING = 20,
    CT_EASTPANNING = 21,
    CT_NORTHPANNING = 22,
    CT_NORTHEASTPANNING = 23,
    CT_NORTHWESTPANNING = 24,
    CT_SOUTHPANNING = 25,
    CT_SOUTHEASTPANNING = 26,
    CT_SOUTHWESTPANNING = 27,
    CT_WESTPANNING = 28,
    CT_MOVE = 29,
    CT_VERTICALTEXT = 30,
    CT_CELL = 31,
    CT_CONTEXTMENU = 32,
    CT_ALIAS = 33,
    CT_PROGRESS = 34,
    CT_NODROP = 35,
    CT_COPY = 36,
    CT_NONE = 37,
    CT_NOTALLOWED = 38,
    CT_ZOOMIN = 39,
    CT_ZOOMOUT = 40,
    CT_GRAB = 41,
    CT_GRABBING = 42,
    CT_MIDDLE_PANNING_VERTICAL = 43,
    CT_MIDDLE_PANNING_HORIZONTAL = 44,
    CT_CUSTOM = 45,
    CT_DND_NONE = 46,
    CT_DND_MOVE = 47,
    CT_DND_COPY = 48,
    CT_DND_LINK = 49
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cursor_info_t {
    pub hotspot:            cef_point_t,
    pub image_scale_factor: f32,
    pub buffer:             *mut ::std::os::raw::c_void,
    pub size:               cef_size_t
}
pub type cef_cursor_info_t = _cef_cursor_info_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_uri_unescape_rule_t {
    UU_NONE = 0,
    UU_NORMAL = 1,
    UU_SPACES = 2,
    UU_PATH_SEPARATORS = 4,
    UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS = 8,
    UU_REPLACE_PLUS_WITH_SPACE = 16
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_json_parser_options_t {
    JSON_PARSER_RFC = 0,
    JSON_PARSER_ALLOW_TRAILING_COMMAS = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_json_writer_options_t {
    JSON_WRITER_DEFAULT = 0,
    JSON_WRITER_OMIT_BINARY_VALUES = 1,
    JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION = 2,
    JSON_WRITER_PRETTY_PRINT = 4
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_pdf_print_margin_type_t {
    PDF_PRINT_MARGIN_DEFAULT = 0,
    PDF_PRINT_MARGIN_NONE = 1,
    PDF_PRINT_MARGIN_CUSTOM = 2
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_settings_t {
    pub landscape:                 ::std::os::raw::c_int,
    pub print_background:          ::std::os::raw::c_int,
    pub scale:                     f64,
    pub paper_width:               f64,
    pub paper_height:              f64,
    pub prefer_css_page_size:      ::std::os::raw::c_int,
    pub margin_type:               cef_pdf_print_margin_type_t,
    pub margin_top:                f64,
    pub margin_right:              f64,
    pub margin_bottom:             f64,
    pub margin_left:               f64,
    pub page_ranges:               cef_string_t,
    pub display_header_footer:     ::std::os::raw::c_int,
    pub header_template:           cef_string_t,
    pub footer_template:           cef_string_t,
    pub generate_tagged_pdf:       ::std::os::raw::c_int,
    pub generate_document_outline: ::std::os::raw::c_int
}
pub type cef_pdf_print_settings_t = _cef_pdf_print_settings_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_scale_factor_t {
    SCALE_FACTOR_NONE = 0,
    SCALE_FACTOR_100P = 1,
    SCALE_FACTOR_125P = 2,
    SCALE_FACTOR_133P = 3,
    SCALE_FACTOR_140P = 4,
    SCALE_FACTOR_150P = 5,
    SCALE_FACTOR_180P = 6,
    SCALE_FACTOR_200P = 7,
    SCALE_FACTOR_250P = 8,
    SCALE_FACTOR_300P = 9
}
impl cef_referrer_policy_t {
    pub const REFERRER_POLICY_DEFAULT: cef_referrer_policy_t =
        cef_referrer_policy_t::REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE;
}
impl cef_referrer_policy_t {
    pub const REFERRER_POLICY_LAST_VALUE: cef_referrer_policy_t =
        cef_referrer_policy_t::REFERRER_POLICY_NO_REFERRER;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_referrer_policy_t {
    REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE = 0,
    REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN = 1,
    REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN = 2,
    REFERRER_POLICY_NEVER_CLEAR_REFERRER = 3,
    REFERRER_POLICY_ORIGIN = 4,
    REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN = 5,
    REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE = 6,
    REFERRER_POLICY_NO_REFERRER = 7
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_response_filter_status_t {
    RESPONSE_FILTER_NEED_MORE_DATA = 0,
    RESPONSE_FILTER_DONE = 1,
    RESPONSE_FILTER_ERROR = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_color_type_t {
    CEF_COLOR_TYPE_RGBA_8888 = 0,
    CEF_COLOR_TYPE_BGRA_8888 = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_alpha_type_t {
    CEF_ALPHA_TYPE_OPAQUE = 0,
    CEF_ALPHA_TYPE_PREMULTIPLIED = 1,
    CEF_ALPHA_TYPE_POSTMULTIPLIED = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_text_style_t {
    CEF_TEXT_STYLE_BOLD = 0,
    CEF_TEXT_STYLE_ITALIC = 1,
    CEF_TEXT_STYLE_STRIKE = 2,
    CEF_TEXT_STYLE_DIAGONAL_STRIKE = 3,
    CEF_TEXT_STYLE_UNDERLINE = 4
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_main_axis_alignment_t {
    CEF_MAIN_AXIS_ALIGNMENT_START = 0,
    CEF_MAIN_AXIS_ALIGNMENT_CENTER = 1,
    CEF_MAIN_AXIS_ALIGNMENT_END = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cross_axis_alignment_t {
    CEF_CROSS_AXIS_ALIGNMENT_STRETCH = 0,
    CEF_CROSS_AXIS_ALIGNMENT_START = 1,
    CEF_CROSS_AXIS_ALIGNMENT_CENTER = 2,
    CEF_CROSS_AXIS_ALIGNMENT_END = 3
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_settings_t {
    pub horizontal:                       ::std::os::raw::c_int,
    pub inside_border_horizontal_spacing: ::std::os::raw::c_int,
    pub inside_border_vertical_spacing:   ::std::os::raw::c_int,
    pub inside_border_insets:             cef_insets_t,
    pub between_child_spacing:            ::std::os::raw::c_int,
    pub main_axis_alignment:              cef_main_axis_alignment_t,
    pub cross_axis_alignment:             cef_cross_axis_alignment_t,
    pub minimum_cross_axis_size:          ::std::os::raw::c_int,
    pub default_flex:                     ::std::os::raw::c_int
}
pub type cef_box_layout_settings_t = _cef_box_layout_settings_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_button_state_t {
    CEF_BUTTON_STATE_NORMAL = 0,
    CEF_BUTTON_STATE_HOVERED = 1,
    CEF_BUTTON_STATE_PRESSED = 2,
    CEF_BUTTON_STATE_DISABLED = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_horizontal_alignment_t {
    CEF_HORIZONTAL_ALIGNMENT_LEFT = 0,
    CEF_HORIZONTAL_ALIGNMENT_CENTER = 1,
    CEF_HORIZONTAL_ALIGNMENT_RIGHT = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_anchor_position_t {
    CEF_MENU_ANCHOR_TOPLEFT = 0,
    CEF_MENU_ANCHOR_TOPRIGHT = 1,
    CEF_MENU_ANCHOR_BOTTOMCENTER = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_color_type_t {
    CEF_MENU_COLOR_TEXT = 0,
    CEF_MENU_COLOR_TEXT_HOVERED = 1,
    CEF_MENU_COLOR_TEXT_ACCELERATOR = 2,
    CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED = 3,
    CEF_MENU_COLOR_BACKGROUND = 4,
    CEF_MENU_COLOR_BACKGROUND_HOVERED = 5,
    CEF_MENU_COLOR_COUNT = 6
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_ssl_version_t {
    SSL_CONNECTION_VERSION_UNKNOWN = 0,
    SSL_CONNECTION_VERSION_SSL2 = 1,
    SSL_CONNECTION_VERSION_SSL3 = 2,
    SSL_CONNECTION_VERSION_TLS1 = 3,
    SSL_CONNECTION_VERSION_TLS1_1 = 4,
    SSL_CONNECTION_VERSION_TLS1_2 = 5,
    SSL_CONNECTION_VERSION_TLS1_3 = 6,
    SSL_CONNECTION_VERSION_QUIC = 7
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_ssl_content_status_t {
    SSL_CONTENT_NORMAL_CONTENT = 0,
    SSL_CONTENT_DISPLAYED_INSECURE_CONTENT = 1,
    SSL_CONTENT_RAN_INSECURE_CONTENT = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_scheme_options_t {
    CEF_SCHEME_OPTION_NONE = 0,
    CEF_SCHEME_OPTION_STANDARD = 1,
    CEF_SCHEME_OPTION_LOCAL = 2,
    CEF_SCHEME_OPTION_DISPLAY_ISOLATED = 4,
    CEF_SCHEME_OPTION_SECURE = 8,
    CEF_SCHEME_OPTION_CORS_ENABLED = 16,
    CEF_SCHEME_OPTION_CSP_BYPASSING = 32,
    CEF_SCHEME_OPTION_FETCH_ENABLED = 64
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_range_t {
    pub from: u32,
    pub to:   u32
}
pub type cef_range_t = _cef_range_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_composition_underline_style_t {
    CEF_CUS_SOLID = 0,
    CEF_CUS_DOT = 1,
    CEF_CUS_DASH = 2,
    CEF_CUS_NONE = 3
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_composition_underline_t {
    pub range:            cef_range_t,
    pub color:            cef_color_t,
    pub background_color: cef_color_t,
    pub thick:            ::std::os::raw::c_int,
    pub style:            cef_composition_underline_style_t
}
pub type cef_composition_underline_t = _cef_composition_underline_t;
impl cef_channel_layout_t {
    pub const CEF_CHANNEL_LAYOUT_MAX: cef_channel_layout_t =
        cef_channel_layout_t::CEF_CHANNEL_LAYOUT_5_1_4_DOWNMIX;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_channel_layout_t {
    CEF_CHANNEL_LAYOUT_NONE = 0,
    CEF_CHANNEL_LAYOUT_UNSUPPORTED = 1,
    CEF_CHANNEL_LAYOUT_MONO = 2,
    CEF_CHANNEL_LAYOUT_STEREO = 3,
    CEF_CHANNEL_LAYOUT_2_1 = 4,
    CEF_CHANNEL_LAYOUT_SURROUND = 5,
    CEF_CHANNEL_LAYOUT_4_0 = 6,
    CEF_CHANNEL_LAYOUT_2_2 = 7,
    CEF_CHANNEL_LAYOUT_QUAD = 8,
    CEF_CHANNEL_LAYOUT_5_0 = 9,
    CEF_CHANNEL_LAYOUT_5_1 = 10,
    CEF_CHANNEL_LAYOUT_5_0_BACK = 11,
    CEF_CHANNEL_LAYOUT_5_1_BACK = 12,
    CEF_CHANNEL_LAYOUT_7_0 = 13,
    CEF_CHANNEL_LAYOUT_7_1 = 14,
    CEF_CHANNEL_LAYOUT_7_1_WIDE = 15,
    CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX = 16,
    CEF_CHANNEL_LAYOUT_2POINT1 = 17,
    CEF_CHANNEL_LAYOUT_3_1 = 18,
    CEF_CHANNEL_LAYOUT_4_1 = 19,
    CEF_CHANNEL_LAYOUT_6_0 = 20,
    CEF_CHANNEL_LAYOUT_6_0_FRONT = 21,
    CEF_CHANNEL_LAYOUT_HEXAGONAL = 22,
    CEF_CHANNEL_LAYOUT_6_1 = 23,
    CEF_CHANNEL_LAYOUT_6_1_BACK = 24,
    CEF_CHANNEL_LAYOUT_6_1_FRONT = 25,
    CEF_CHANNEL_LAYOUT_7_0_FRONT = 26,
    CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK = 27,
    CEF_CHANNEL_LAYOUT_OCTAGONAL = 28,
    CEF_CHANNEL_LAYOUT_DISCRETE = 29,
    CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC = 30,
    CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE = 31,
    CEF_CHANNEL_LAYOUT_BITSTREAM = 32,
    CEF_CHANNEL_LAYOUT_5_1_4_DOWNMIX = 33
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_parameters_t {
    pub channel_layout:    cef_channel_layout_t,
    pub sample_rate:       ::std::os::raw::c_int,
    pub frames_per_buffer: ::std::os::raw::c_int
}
pub type cef_audio_parameters_t = _cef_audio_parameters_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_route_create_result_t {
    CEF_MRCR_UNKNOWN_ERROR = 0,
    CEF_MRCR_OK = 1,
    CEF_MRCR_TIMED_OUT = 2,
    CEF_MRCR_ROUTE_NOT_FOUND = 3,
    CEF_MRCR_SINK_NOT_FOUND = 4,
    CEF_MRCR_INVALID_ORIGIN = 5,
    CEF_MRCR_NO_SUPPORTED_PROVIDER = 7,
    CEF_MRCR_CANCELLED = 8,
    CEF_MRCR_ROUTE_ALREADY_EXISTS = 9,
    CEF_MRCR_ROUTE_ALREADY_TERMINATED = 11
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_route_connection_state_t {
    CEF_MRCS_UNKNOWN = 0,
    CEF_MRCS_CONNECTING = 1,
    CEF_MRCS_CONNECTED = 2,
    CEF_MRCS_CLOSED = 3,
    CEF_MRCS_TERMINATED = 4
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_sink_icon_type_t {
    CEF_MSIT_CAST = 0,
    CEF_MSIT_CAST_AUDIO_GROUP = 1,
    CEF_MSIT_CAST_AUDIO = 2,
    CEF_MSIT_MEETING = 3,
    CEF_MSIT_HANGOUT = 4,
    CEF_MSIT_EDUCATION = 5,
    CEF_MSIT_WIRED_DISPLAY = 6,
    CEF_MSIT_GENERIC = 7,
    CEF_MSIT_TOTAL_COUNT = 8
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_t {
    pub ip_address: cef_string_t,
    pub port:       ::std::os::raw::c_int,
    pub model_name: cef_string_t
}
pub type cef_media_sink_device_info_t = _cef_media_sink_device_info_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_text_field_commands_t {
    CEF_TFC_CUT = 1,
    CEF_TFC_COPY = 2,
    CEF_TFC_PASTE = 3,
    CEF_TFC_UNDO = 4,
    CEF_TFC_DELETE = 5,
    CEF_TFC_SELECT_ALL = 6
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_chrome_toolbar_type_t {
    CEF_CTT_NONE = 1,
    CEF_CTT_NORMAL = 2,
    CEF_CTT_LOCATION = 3
}
impl cef_chrome_page_action_icon_type_t {
    pub const CEF_CPAIT_MAX_VALUE: cef_chrome_page_action_icon_type_t =
        cef_chrome_page_action_icon_type_t::CEF_CPAIT_PRICE_READ_ANYTHING;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_chrome_page_action_icon_type_t {
    CEF_CPAIT_BOOKMARK_STAR = 0,
    CEF_CPAIT_CLICK_TO_CALL = 1,
    CEF_CPAIT_COOKIE_CONTROLS = 2,
    CEF_CPAIT_FILE_SYSTEM_ACCESS = 3,
    CEF_CPAIT_FIND = 4,
    CEF_CPAIT_HIGH_EFFICIENCY = 5,
    CEF_CPAIT_INTENT_PICKER = 6,
    CEF_CPAIT_LOCAL_CARD_MIGRATION = 7,
    CEF_CPAIT_MANAGE_PASSWORDS = 8,
    CEF_CPAIT_PAYMENTS_OFFER_NOTIFICATION = 9,
    CEF_CPAIT_PRICE_TRACKING = 10,
    CEF_CPAIT_PWA_INSTALL = 11,
    CEF_CPAIT_QR_CODE_GENERATOR = 12,
    CEF_CPAIT_READER_MODE = 13,
    CEF_CPAIT_SAVE_AUTOFILL_ADDRESS = 14,
    CEF_CPAIT_SAVE_CARD = 15,
    CEF_CPAIT_SEND_TAB_TO_SELF = 16,
    CEF_CPAIT_SHARING_HUB = 17,
    CEF_CPAIT_SIDE_SEARCH = 18,
    CEF_CPAIT_SMS_REMOTE_FETCHER = 19,
    CEF_CPAIT_TRANSLATE = 20,
    CEF_CPAIT_VIRTUAL_CARD_ENROLL = 21,
    CEF_CPAIT_VIRTUAL_CARD_MANUAL_FALLBACK = 22,
    CEF_CPAIT_ZOOM = 23,
    CEF_CPAIT_SAVE_IBAN = 24,
    CEF_CPAIT_MANDATORY_REAUTH = 25,
    CEF_CPAIT_PRICE_INSIGHTS = 26,
    CEF_CPAIT_PRICE_READ_ANYTHING = 27
}
impl cef_chrome_toolbar_button_type_t {
    pub const CEF_CTBT_MAX_VALUE: cef_chrome_toolbar_button_type_t =
        cef_chrome_toolbar_button_type_t::CEF_CTBT_SIDE_PANEL;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_chrome_toolbar_button_type_t {
    CEF_CTBT_CAST = 0,
    CEF_CTBT_DOWNLOAD = 1,
    CEF_CTBT_SEND_TAB_TO_SELF = 2,
    CEF_CTBT_SIDE_PANEL = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_docking_mode_t {
    CEF_DOCKING_MODE_TOP_LEFT = 1,
    CEF_DOCKING_MODE_TOP_RIGHT = 2,
    CEF_DOCKING_MODE_BOTTOM_LEFT = 3,
    CEF_DOCKING_MODE_BOTTOM_RIGHT = 4,
    CEF_DOCKING_MODE_CUSTOM = 5
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_show_state_t {
    CEF_SHOW_STATE_NORMAL = 1,
    CEF_SHOW_STATE_MINIMIZED = 2,
    CEF_SHOW_STATE_MAXIMIZED = 3,
    CEF_SHOW_STATE_FULLSCREEN = 4,
    CEF_SHOW_STATE_HIDDEN = 5
}
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_NONE: cef_touch_handle_state_flags_t = 0;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ENABLED: cef_touch_handle_state_flags_t = 1;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ORIENTATION: cef_touch_handle_state_flags_t =
    2;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ORIGIN: cef_touch_handle_state_flags_t = 4;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ALPHA: cef_touch_handle_state_flags_t = 8;
pub type cef_touch_handle_state_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_touch_handle_state_t {
    pub touch_handle_id:   ::std::os::raw::c_int,
    pub flags:             u32,
    pub enabled:           ::std::os::raw::c_int,
    pub orientation:       cef_horizontal_alignment_t,
    pub mirror_vertical:   ::std::os::raw::c_int,
    pub mirror_horizontal: ::std::os::raw::c_int,
    pub origin:            cef_point_t,
    pub alpha:             f32
}
pub type cef_touch_handle_state_t = _cef_touch_handle_state_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_access_permission_types_t {
    CEF_MEDIA_PERMISSION_NONE = 0,
    CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE = 1,
    CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE = 2,
    CEF_MEDIA_PERMISSION_DESKTOP_AUDIO_CAPTURE = 4,
    CEF_MEDIA_PERMISSION_DESKTOP_VIDEO_CAPTURE = 8
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_permission_request_types_t {
    CEF_PERMISSION_TYPE_NONE = 0,
    CEF_PERMISSION_TYPE_ACCESSIBILITY_EVENTS = 1,
    CEF_PERMISSION_TYPE_AR_SESSION = 2,
    CEF_PERMISSION_TYPE_CAMERA_PAN_TILT_ZOOM = 4,
    CEF_PERMISSION_TYPE_CAMERA_STREAM = 8,
    CEF_PERMISSION_TYPE_CLIPBOARD = 16,
    CEF_PERMISSION_TYPE_TOP_LEVEL_STORAGE_ACCESS = 32,
    CEF_PERMISSION_TYPE_DISK_QUOTA = 64,
    CEF_PERMISSION_TYPE_LOCAL_FONTS = 128,
    CEF_PERMISSION_TYPE_GEOLOCATION = 256,
    CEF_PERMISSION_TYPE_IDLE_DETECTION = 512,
    CEF_PERMISSION_TYPE_MIC_STREAM = 1024,
    CEF_PERMISSION_TYPE_MIDI = 2048,
    CEF_PERMISSION_TYPE_MIDI_SYSEX = 4096,
    CEF_PERMISSION_TYPE_MULTIPLE_DOWNLOADS = 8192,
    CEF_PERMISSION_TYPE_NOTIFICATIONS = 16384,
    CEF_PERMISSION_TYPE_PROTECTED_MEDIA_IDENTIFIER = 32768,
    CEF_PERMISSION_TYPE_REGISTER_PROTOCOL_HANDLER = 65536,
    CEF_PERMISSION_TYPE_STORAGE_ACCESS = 131072,
    CEF_PERMISSION_TYPE_VR_SESSION = 262144,
    CEF_PERMISSION_TYPE_WINDOW_MANAGEMENT = 524288,
    CEF_PERMISSION_TYPE_FILE_SYSTEM_ACCESS = 1048576
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_permission_request_result_t {
    CEF_PERMISSION_RESULT_ACCEPT = 0,
    CEF_PERMISSION_RESULT_DENY = 1,
    CEF_PERMISSION_RESULT_DISMISS = 2,
    CEF_PERMISSION_RESULT_IGNORE = 3
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_test_cert_type_t {
    CEF_TEST_CERT_OK_IP = 0,
    CEF_TEST_CERT_OK_DOMAIN = 1,
    CEF_TEST_CERT_EXPIRED = 2
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_preferences_type_t {
    CEF_PREFERENCES_TYPE_GLOBAL = 0,
    CEF_PREFERENCES_TYPE_REQUEST_CONTEXT = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_download_interrupt_reason_t {
    CEF_DOWNLOAD_INTERRUPT_REASON_NONE = 0,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_FAILED = 1,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_ACCESS_DENIED = 2,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_NO_SPACE = 3,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_NAME_TOO_LONG = 5,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_LARGE = 6,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_VIRUS_INFECTED = 7,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_TRANSIENT_ERROR = 10,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_BLOCKED = 11,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_SECURITY_CHECK_FAILED = 12,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_SHORT = 13,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_HASH_MISMATCH = 14,
    CEF_DOWNLOAD_INTERRUPT_REASON_FILE_SAME_AS_SOURCE = 15,
    CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_FAILED = 20,
    CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_TIMEOUT = 21,
    CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_DISCONNECTED = 22,
    CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_SERVER_DOWN = 23,
    CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_INVALID_REQUEST = 24,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_FAILED = 30,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_NO_RANGE = 31,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_BAD_CONTENT = 33,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_UNAUTHORIZED = 34,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_CERT_PROBLEM = 35,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_FORBIDDEN = 36,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_UNREACHABLE = 37,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_CONTENT_LENGTH_MISMATCH = 38,
    CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_CROSS_ORIGIN_REDIRECT = 39,
    CEF_DOWNLOAD_INTERRUPT_REASON_USER_CANCELED = 40,
    CEF_DOWNLOAD_INTERRUPT_REASON_USER_SHUTDOWN = 41,
    CEF_DOWNLOAD_INTERRUPT_REASON_CRASH = 50
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_gesture_command_t {
    CEF_GESTURE_COMMAND_BACK = 0,
    CEF_GESTURE_COMMAND_FORWARD = 1
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_zoom_command_t {
    CEF_ZOOM_COMMAND_OUT = 0,
    CEF_ZOOM_COMMAND_RESET = 1,
    CEF_ZOOM_COMMAND_IN = 2
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_base_ref_counted_t {
    pub size:                 usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int
    >,
    pub has_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int
    >,
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int
    >
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_base_scoped_t {
    pub size: usize,
    pub del:  ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_scoped_t)>
}
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont:   ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>
}
pub type cef_callback_t = _cef_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_completion_callback_t {
    pub base:        cef_base_ref_counted_t,
    pub on_complete:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>
}
pub type cef_completion_callback_t = _cef_completion_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_registration_t {
    pub base: cef_base_ref_counted_t
}
pub type cef_registration_t = _cef_registration_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_router_t {
    pub base:                  cef_base_ref_counted_t,
    pub add_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            observer: *mut _cef_media_observer_t
        ) -> *mut _cef_registration_t
    >,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            urn: *const cef_string_t
        ) -> *mut _cef_media_source_t
    >,
    pub notify_current_sinks:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
    pub create_route: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            source: *mut _cef_media_source_t,
            sink: *mut _cef_media_sink_t,
            callback: *mut _cef_media_route_create_callback_t
        )
    >,
    pub notify_current_routes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>
}
pub type cef_media_router_t = _cef_media_router_t;
extern "C" {
    pub fn cef_media_router_get_global(
        callback: *mut _cef_completion_callback_t
    ) -> *mut cef_media_router_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_observer_t {
    pub base:                      cef_base_ref_counted_t,
    pub on_sinks: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            sinksCount: usize,
            sinks: *const *mut _cef_media_sink_t
        )
    >,
    pub on_routes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            routesCount: usize,
            routes: *const *mut _cef_media_route_t
        )
    >,
    pub on_route_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            state: cef_media_route_connection_state_t
        )
    >,
    pub on_route_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        )
    >
}
pub type cef_media_observer_t = _cef_media_observer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_route_t {
    pub base:               cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> cef_string_userfree_t
    >,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_source_t
    >,
    pub get_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_sink_t
    >,
    pub send_route_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        )
    >,
    pub terminate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t)>
}
pub type cef_media_route_t = _cef_media_route_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_route_create_callback_t {
    pub base:                           cef_base_ref_counted_t,
    pub on_media_route_create_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_create_callback_t,
            result: cef_media_route_create_result_t,
            error: *const cef_string_t,
            route: *mut _cef_media_route_t
        )
    >
}
pub type cef_media_route_create_callback_t = _cef_media_route_create_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_t {
    pub base:               cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t
    >,
    pub get_icon_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_media_sink_icon_type_t
    >,
    pub get_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_t,
            callback: *mut _cef_media_sink_device_info_callback_t
        )
    >,
    pub is_cast_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int
    >,
    pub is_dial_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int
    >,
    pub is_compatible_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_t,
            source: *mut _cef_media_source_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_media_sink_t = _cef_media_sink_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_callback_t {
    pub base:                      cef_base_ref_counted_t,
    pub on_media_sink_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_device_info_callback_t,
            device_info: *const _cef_media_sink_device_info_t
        )
    >
}
pub type cef_media_sink_device_info_callback_t = _cef_media_sink_device_info_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_source_t {
    pub base:           cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> cef_string_userfree_t
    >,
    pub is_cast_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int
    >,
    pub is_dial_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int
    >
}
pub type cef_media_source_t = _cef_media_source_t;
extern "C" {
    pub fn cef_add_cross_origin_whitelist_entry(
        source_origin: *const cef_string_t,
        target_protocol: *const cef_string_t,
        target_domain: *const cef_string_t,
        allow_target_subdomains: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_remove_cross_origin_whitelist_entry(
        source_origin: *const cef_string_t,
        target_protocol: *const cef_string_t,
        target_domain: *const cef_string_t,
        allow_target_subdomains: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_clear_cross_origin_whitelist() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_value_t {
    pub base:           cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t>,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_value_t = _cef_value_t;
extern "C" {
    pub fn cef_value_create() -> *mut cef_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_binary_value_t {
    pub base:         cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t
    >,
    pub get_raw_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *const ::std::os::raw::c_void
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize
        ) -> usize
    >
}
pub type cef_binary_value_t = _cef_binary_value_t;
extern "C" {
    pub fn cef_binary_value_create(
        data: *const ::std::os::raw::c_void,
        data_size: usize
    ) -> *mut cef_binary_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dictionary_value_t {
    pub base:           cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int
        ) -> *mut _cef_dictionary_value_t
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> cef_value_type_t
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_value_t
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_binary_value_t
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_dictionary_value_t
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_list_value_t
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64
        ) -> ::std::os::raw::c_int
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_dictionary_value_t = _cef_dictionary_value_t;
extern "C" {
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_list_value_t {
    pub base:           cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize
        ) -> *mut _cef_binary_value_t
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize
        ) -> *mut _cef_dictionary_value_t
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64
        ) -> ::std::os::raw::c_int
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_list_value_t = _cef_list_value_t;
extern "C" {
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_x509cert_principal_t {
    pub base:                        cef_base_ref_counted_t,
    pub get_display_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    pub get_common_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    pub get_locality_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    pub get_country_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    pub get_organization_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t)
    >,
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t)
    >
}
pub type cef_x509cert_principal_t = _cef_x509cert_principal_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_x509certificate_t {
    pub base:                        cef_base_ref_counted_t,
    pub get_subject: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t
    >,
    pub get_issuer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t
    >,
    pub get_serial_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t
    >,
    pub get_valid_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_basetime_t
    >,
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_basetime_t
    >,
    pub get_derencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t
    >,
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t
    >,
    pub get_issuer_chain_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> usize>,
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t
        )
    >,
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t
        )
    >
}
pub type cef_x509certificate_t = _cef_x509certificate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_sslstatus_t {
    pub base:                 cef_base_ref_counted_t,
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int
    >,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t
    >,
    pub get_sslversion: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t
    >,
    pub get_content_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t
    >
}
pub type cef_sslstatus_t = _cef_sslstatus_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_navigation_entry_t {
    pub base:                 cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    pub get_display_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_transition_type_t
    >,
    pub has_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int
    >,
    pub get_completion_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_basetime_t
    >,
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int
    >,
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t
    >
}
pub type cef_navigation_entry_t = _cef_navigation_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_shared_memory_region_t {
    pub base:     cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> ::std::os::raw::c_int
    >,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> usize
    >,
    pub memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_memory_region_t
        ) -> *mut ::std::os::raw::c_void
    >
}
pub type cef_shared_memory_region_t = _cef_shared_memory_region_t;
extern "C" {
    pub fn cef_resolve_url(
        base_url: *const cef_string_t,
        relative_url: *const cef_string_t,
        resolved_url: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_parse_url(
        url: *const cef_string_t,
        parts: *mut _cef_urlparts_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_create_url(
        parts: *const _cef_urlparts_t,
        url: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_format_url_for_security_display(
        origin_url: *const cef_string_t
    ) -> cef_string_userfree_t;
}
extern "C" {
    pub fn cef_get_mime_type(extension: *const cef_string_t) -> cef_string_userfree_t;
}
extern "C" {
    pub fn cef_get_extensions_for_mime_type(
        mime_type: *const cef_string_t,
        extensions: cef_string_list_t
    );
}
extern "C" {
    pub fn cef_base64encode(
        data: *const ::std::os::raw::c_void,
        data_size: usize
    ) -> cef_string_userfree_t;
}
extern "C" {
    pub fn cef_base64decode(data: *const cef_string_t) -> *mut _cef_binary_value_t;
}
extern "C" {
    pub fn cef_uriencode(
        text: *const cef_string_t,
        use_plus: ::std::os::raw::c_int
    ) -> cef_string_userfree_t;
}
extern "C" {
    pub fn cef_uridecode(
        text: *const cef_string_t,
        convert_to_utf8: ::std::os::raw::c_int,
        unescape_rule: cef_uri_unescape_rule_t
    ) -> cef_string_userfree_t;
}
extern "C" {
    pub fn cef_parse_json(
        json_string: *const cef_string_t,
        options: cef_json_parser_options_t
    ) -> *mut _cef_value_t;
}
extern "C" {
    pub fn cef_parse_json_buffer(
        json: *const ::std::os::raw::c_void,
        json_size: usize,
        options: cef_json_parser_options_t
    ) -> *mut _cef_value_t;
}
extern "C" {
    pub fn cef_parse_jsonand_return_error(
        json_string: *const cef_string_t,
        options: cef_json_parser_options_t,
        error_msg_out: *mut cef_string_t
    ) -> *mut _cef_value_t;
}
extern "C" {
    pub fn cef_write_json(
        node: *mut _cef_value_t,
        options: cef_json_writer_options_t
    ) -> cef_string_userfree_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_read_handler_t {
    pub base:      cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_read_handler_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_read_handler_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> i64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int
    >
}
pub type cef_read_handler_t = _cef_read_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_stream_reader_t {
    pub base:      cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> i64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int
    >
}
pub type cef_stream_reader_t = _cef_stream_reader_t;
extern "C" {
    pub fn cef_stream_reader_create_for_file(
        fileName: *const cef_string_t
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    pub fn cef_stream_reader_create_for_data(
        data: *mut ::std::os::raw::c_void,
        size: usize
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    pub fn cef_stream_reader_create_for_handler(
        handler: *mut cef_read_handler_t
    ) -> *mut cef_stream_reader_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_write_handler_t {
    pub base:      cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_write_handler_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_write_handler_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> i64>,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int
    >
}
pub type cef_write_handler_t = _cef_write_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_stream_writer_t {
    pub base:      cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> i64>,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int
    >
}
pub type cef_stream_writer_t = _cef_stream_writer_t;
extern "C" {
    pub fn cef_stream_writer_create_for_file(
        fileName: *const cef_string_t
    ) -> *mut cef_stream_writer_t;
}
extern "C" {
    pub fn cef_stream_writer_create_for_handler(
        handler: *mut cef_write_handler_t
    ) -> *mut cef_stream_writer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dev_tools_message_observer_t {
    pub base:                        cef_base_ref_counted_t,
    pub on_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        ) -> ::std::os::raw::c_int
    >,
    pub on_dev_tools_method_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message_id: ::std::os::raw::c_int,
            success: ::std::os::raw::c_int,
            result: *const ::std::os::raw::c_void,
            result_size: usize
        )
    >,
    pub on_dev_tools_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            method: *const cef_string_t,
            params: *const ::std::os::raw::c_void,
            params_size: usize
        )
    >,
    pub on_dev_tools_agent_attached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t
        )
    >,
    pub on_dev_tools_agent_detached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t
        )
    >
}
pub type cef_dev_tools_message_observer_t = _cef_dev_tools_message_observer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_image_t {
    pub base:                    cef_base_ref_counted_t,
    pub is_empty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t
        ) -> ::std::os::raw::c_int
    >,
    pub add_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize
        ) -> ::std::os::raw::c_int
    >,
    pub add_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize
        ) -> ::std::os::raw::c_int
    >,
    pub add_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize
        ) -> ::std::os::raw::c_int
    >,
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub has_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int
    >,
    pub remove_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int
    >,
    pub get_representation_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >,
    pub get_as_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >,
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >
}
pub type cef_image_t = _cef_image_t;
extern "C" {
    pub fn cef_image_create() -> *mut cef_image_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_drag_data_t {
    pub base:                  cef_base_ref_counted_t,
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    pub is_link: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    pub is_fragment: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    pub is_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    pub get_file_contents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t
        ) -> usize
    >,
    pub get_file_names: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_file_paths: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            paths: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t)
    >,
    pub set_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t)
    >,
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t)
    >,
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t)
    >,
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t)
    >,
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t)
    >,
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub add_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t
        )
    >,
    pub clear_filenames: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t
    >,
    pub get_image_hotspot:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_point_t>,
    pub has_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >
}
pub type cef_drag_data_t = _cef_drag_data_t;
extern "C" {
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domvisitor_t {
    pub base:  cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domvisitor_t, document: *mut _cef_domdocument_t)
    >
}
pub type cef_domvisitor_t = _cef_domvisitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domdocument_t {
    pub base:                       cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    pub get_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    pub get_head: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t
        ) -> *mut _cef_domnode_t
    >,
    pub get_focused_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int
    >,
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int
    >,
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int
    >,
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    pub get_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    pub get_complete_url: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t
        ) -> cef_string_userfree_t
    >
}
pub type cef_domdocument_t = _cef_domdocument_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domnode_t {
    pub base:                          cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t
    >,
    pub is_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    pub is_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_form_control_type_t
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t
    >,
    pub get_parent: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    pub has_children: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    pub get_first_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    pub get_last_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t)
    >,
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>
}
pub type cef_domnode_t = _cef_domnode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_process_message_t {
    pub base:                     cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_process_message_t
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t
    >,
    pub get_argument_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t
    >,
    pub get_shared_memory_region: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_process_message_t
        ) -> *mut _cef_shared_memory_region_t
    >
}
pub type cef_process_message_t = _cef_process_message_t;
extern "C" {
    pub fn cef_process_message_create(name: *const cef_string_t) -> *mut cef_process_message_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_t {
    pub base:                        cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)
    >,
    pub get_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    pub set_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t)
    >,
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t
        )
    >,
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t
    >,
    pub get_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t
    >,
    pub set_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t)
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int
        )
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t
        )
    >,
    pub get_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int
    >,
    pub set_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int)
    >,
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)
    >,
    pub get_resource_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> u64>
}
pub type cef_request_t = _cef_request_t;
extern "C" {
    pub fn cef_request_create() -> *mut cef_request_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_post_data_t {
    pub base:                  cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int
    >,
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int
    >,
    pub get_element_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t
        )
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t
        ) -> ::std::os::raw::c_int
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t
        ) -> ::std::os::raw::c_int
    >,
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>
}
pub type cef_post_data_t = _cef_post_data_t;
extern "C" {
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_post_data_element_t {
    pub base:            cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int
    >,
    pub set_to_empty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t)
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void
        )
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_postdataelement_type_t
    >,
    pub get_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t
    >,
    pub get_bytes_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void
        ) -> usize
    >
}
pub type cef_post_data_element_t = _cef_post_data_element_t;
extern "C" {
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_visitor_t {
    pub base:  cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t)
    >
}
pub type cef_string_visitor_t = _cef_string_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_frame_t {
    pub base:                 cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int
    >,
    pub undo:                 ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub redo:                 ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub cut:                  ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub copy:                 ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub paste:                ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub del:                  ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub select_all:           ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub view_source:          ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t)
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t)
    >,
    pub load_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t)
    >,
    pub load_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, url: *const cef_string_t)
    >,
    pub execute_java_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int
        )
    >,
    pub is_main: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int
    >,
    pub is_focused: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> i64>,
    pub get_parent:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t
    >,
    pub get_v8context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t
    >,
    pub visit_dom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t)
    >,
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t
        ) -> *mut _cef_urlrequest_t
    >,
    pub send_process_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t,
            message: *mut _cef_process_message_t
        )
    >
}
pub type cef_frame_t = _cef_frame_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_manager_t {
    pub base:              cef_base_ref_counted_t,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t
        ) -> ::std::os::raw::c_int
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_cookie_manager_t = _cef_cookie_manager_t;
extern "C" {
    pub fn cef_cookie_manager_get_global_manager(
        callback: *mut _cef_completion_callback_t
    ) -> *mut cef_cookie_manager_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_visitor_t {
    pub base:  cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_cookie_visitor_t = _cef_cookie_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_set_cookie_callback_t {
    pub base:        cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int
        )
    >
}
pub type cef_set_cookie_callback_t = _cef_set_cookie_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_delete_cookies_callback_t {
    pub base:        cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int
        )
    >
}
pub type cef_delete_cookies_callback_t = _cef_delete_cookies_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_extension_t {
    pub base:               cef_base_ref_counted_t,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t
    >,
    pub get_manifest: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t
    >,
    pub get_loader_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t
    >,
    pub is_loaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int
    >,
    pub unload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t)>
}
pub type cef_extension_t = _cef_extension_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_get_extension_resource_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t
        )
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t)
    >
}
pub type cef_get_extension_resource_callback_t = _cef_get_extension_resource_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_extension_handler_t {
    pub base:                         cef_base_ref_counted_t,
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, result: cef_errorcode_t)
    >,
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t
        )
    >,
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t
        )
    >,
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_before_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_active_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int
        ) -> *mut _cef_browser_t
    >,
    pub can_access_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_extension_handler_t = _cef_extension_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_preference_registrar_t {
    pub base:           cef_base_scoped_t,
    pub add_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_registrar_t,
            name: *const cef_string_t,
            default_value: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_preference_registrar_t = _cef_preference_registrar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_preference_manager_t {
    pub base:                cef_base_ref_counted_t,
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t
        ) -> *mut _cef_value_t
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            include_defaults: ::std::os::raw::c_int
        ) -> *mut _cef_dictionary_value_t
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_preference_manager_t = _cef_preference_manager_t;
extern "C" {
    pub fn cef_preference_manager_get_global() -> *mut cef_preference_manager_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resolve_callback_t {
    pub base:                 cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t,
            resolved_ips: cef_string_list_t
        )
    >
}
pub type cef_resolve_callback_t = _cef_resolve_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_t {
    pub base:                            cef_preference_manager_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t
        ) -> *mut _cef_request_context_handler_t
    >,
    pub get_cache_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t
    >,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        ) -> *mut _cef_cookie_manager_t
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t
        ) -> ::std::os::raw::c_int
    >,
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int
    >,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        )
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        )
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        )
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t
        )
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t
        )
    >,
    pub did_load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub has_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t
        ) -> *mut _cef_extension_t
    >,
    pub get_media_router: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        ) -> *mut _cef_media_router_t
    >,
    pub get_website_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t
        ) -> *mut _cef_value_t
    >,
    pub set_website_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
            value: *mut _cef_value_t
        )
    >,
    pub get_content_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t
        ) -> cef_content_setting_values_t
    >,
    pub set_content_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
            value: cef_content_setting_values_t
        )
    >
}
pub type cef_request_context_t = _cef_request_context_t;
extern "C" {
    pub fn cef_request_context_get_global_context() -> *mut cef_request_context_t;
}
extern "C" {
    pub fn cef_request_context_create_context(
        settings: *const _cef_request_context_settings_t,
        handler: *mut _cef_request_context_handler_t
    ) -> *mut cef_request_context_t;
}
extern "C" {
    pub fn cef_create_context_shared(
        other: *mut cef_request_context_t,
        handler: *mut _cef_request_context_handler_t
    ) -> *mut cef_request_context_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_t {
    pub base:                  cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub get_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t
    >,
    pub can_go_back: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub can_go_forward: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub is_loading: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_popup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub has_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    pub get_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t
    >,
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t
    >,
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, identifier: i64) -> *mut _cef_frame_t
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t
        ) -> *mut _cef_frame_t
    >,
    pub get_frame_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> usize>,
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut i64
        )
    >,
    pub get_frame_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, names: cef_string_list_t)
    >
}
pub type cef_browser_t = _cef_browser_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_file_dialog_callback_t {
    pub base:                     cef_base_ref_counted_t,
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            file_paths: cef_string_list_t
        )
    >
}
pub type cef_run_file_dialog_callback_t = _cef_run_file_dialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_navigation_entry_visitor_t {
    pub base:  cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_navigation_entry_visitor_t = _cef_navigation_entry_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_callback_t {
    pub base:                  cef_base_ref_counted_t,
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int
        )
    >
}
pub type cef_pdf_print_callback_t = _cef_pdf_print_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_image_callback_t {
    pub base:                       cef_base_ref_counted_t,
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t
        )
    >
}
pub type cef_download_image_callback_t = _cef_download_image_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_host_t {
    pub base:                           cef_base_ref_counted_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t
    >,
    pub close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, force_close: ::std::os::raw::c_int)
    >,
    pub try_close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub set_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int)
    >,
    pub get_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_ulong
    >,
    pub get_opener_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_ulong
    >,
    pub has_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t
    >,
    pub get_request_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t
    >,
    pub can_zoom: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            command: cef_zoom_command_t
        ) -> ::std::os::raw::c_int
    >,
    pub zoom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, command: cef_zoom_command_t)
    >,
    pub get_default_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64)
    >,
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            callback: *mut _cef_run_file_dialog_callback_t
        )
    >,
    pub start_download: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t)
    >,
    pub download_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: u32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t
        )
    >,
    pub print: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t
        )
    >,
    pub find: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int
        )
    >,
    pub stop_finding: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int
        )
    >,
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t
        )
    >,
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub send_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        ) -> ::std::os::raw::c_int
    >,
    pub execute_dev_tools_method: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message_id: ::std::os::raw::c_int,
            method: *const cef_string_t,
            params: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    pub add_dev_tools_message_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            observer: *mut _cef_dev_tools_message_observer_t
        ) -> *mut _cef_registration_t
    >,
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int
        )
    >,
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t)
    >,
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t)
    >,
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub was_hidden: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int)
    >,
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, type_: cef_paint_element_type_t)
    >,
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub send_key_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_key_event_t)
    >,
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            type_: cef_mouse_button_type_t,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int
        )
    >,
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int
        )
    >,
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int
        )
    >,
    pub send_touch_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_touch_event_t)
    >,
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, frame_rate: ::std::os::raw::c_int)
    >,
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t
        )
    >,
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int
        )
    >,
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int
        )
    >,
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t
        )
    >,
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t
        )
    >,
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_mouse_event_t)
    >,
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t
        )
    >,
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t
    >,
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, accessibility_state: cef_state_t)
    >,
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t
        )
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t
    >,
    pub is_background_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int)
    >,
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub is_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    pub exit_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            will_cause_resize: ::std::os::raw::c_int
        )
    >,
    pub can_execute_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub execute_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            command_id: ::std::os::raw::c_int,
            disposition: cef_window_open_disposition_t
        )
    >
}
pub type cef_browser_host_t = _cef_browser_host_t;
extern "C" {
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t
    ) -> *mut cef_browser_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_frame_handler_t {
    pub base:                  cef_base_ref_counted_t,
    pub on_frame_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >,
    pub on_frame_attached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            reattached: ::std::os::raw::c_int
        )
    >,
    pub on_frame_detached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >,
    pub on_main_frame_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            old_frame: *mut _cef_frame_t,
            new_frame: *mut _cef_frame_t
        )
    >
}
pub type cef_frame_handler_t = _cef_frame_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_drag_handler_t {
    pub base:                         cef_base_ref_counted_t,
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t
        )
    >
}
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_command_line_t {
    pub base:                     cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t
    >,
    pub init_from_argv: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char
        )
    >,
    pub init_from_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, command_line: *const cef_string_t)
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_command_line_t)>,
    pub get_argv: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t)
    >,
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t
    >,
    pub get_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t
    >,
    pub set_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t)
    >,
    pub has_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    pub has_switch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_switch_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub get_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t)
    >,
    pub append_switch: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t)
    >,
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t
        )
    >,
    pub has_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    pub get_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t)
    >,
    pub append_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t)
    >,
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t)
    >
}
pub type cef_command_line_t = _cef_command_line_t;
extern "C" {
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_xml_reader_t {
    pub base:                      cef_base_ref_counted_t,
    pub move_to_next_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub has_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub get_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_xml_node_type_t
    >,
    pub get_depth: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub get_local_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_prefix: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_qualified_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_namespace_uri: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_base_uri: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_xml_lang: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub is_empty_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub has_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub has_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub get_attribute_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> usize>,
    pub get_attribute_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            index: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    pub get_attribute_byqname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            qualifiedName: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub get_attribute_bylname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            localName: *const cef_string_t,
            namespaceURI: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub get_inner_xml: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_outer_xml: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub move_to_attribute_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            index: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub move_to_attribute_byqname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            qualifiedName: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub move_to_attribute_bylname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            localName: *const cef_string_t,
            namespaceURI: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub move_to_first_attribute: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub move_to_next_attribute: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    pub move_to_carrying_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >
}
pub type cef_xml_reader_t = _cef_xml_reader_t;
extern "C" {
    pub fn cef_xml_reader_create(
        stream: *mut _cef_stream_reader_t,
        encodingType: cef_xml_encoding_type_t,
        URI: *const cef_string_t
    ) -> *mut cef_xml_reader_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_model_delegate_t {
    pub base:                    cef_base_ref_counted_t,
    pub execute_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        )
    >,
    pub mouse_outside_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t
        )
    >,
    pub unhandled_open_submenu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int
        )
    >,
    pub unhandled_close_submenu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int
        )
    >,
    pub menu_will_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t
        )
    >,
    pub menu_closed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t
        )
    >,
    pub format_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            label: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_menu_model_delegate_t = _cef_menu_model_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_model_t {
    pub base:                  cef_base_ref_counted_t,
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int
    >,
    pub get_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> usize>,
    pub add_separator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int
    >,
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub add_check_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub add_radio_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> *mut _cef_menu_model_t
    >,
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub insert_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> *mut _cef_menu_model_t
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub remove_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub get_index_of: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    pub get_label_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> cef_string_userfree_t
    >,
    pub set_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> cef_menu_item_type_t
    >,
    pub get_type_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> cef_menu_item_type_t
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> *mut _cef_menu_model_t
    >,
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> *mut _cef_menu_model_t
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_visible_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            visible: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            enabled: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_checked_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            checked: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub has_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    pub get_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub set_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_menu_model_t = _cef_menu_model_t;
extern "C" {
    pub fn cef_menu_model_create(
        delegate: *mut _cef_menu_model_delegate_t
    ) -> *mut cef_menu_model_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_context_menu_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        )
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_context_menu_callback_t)>
}
pub type cef_run_context_menu_callback_t = _cef_run_context_menu_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_quick_menu_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_quick_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        )
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_quick_menu_callback_t)>
}
pub type cef_run_quick_menu_callback_t = _cef_run_quick_menu_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_context_menu_handler_t {
    pub base:                      cef_base_ref_counted_t,
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t
        )
    >,
    pub run_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >,
    pub run_quick_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            location: *const cef_point_t,
            size: *const cef_size_t,
            edit_state_flags: cef_quick_menu_edit_state_flags_t,
            callback: *mut _cef_run_quick_menu_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_quick_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_quick_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >
}
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_context_menu_params_t {
    pub base:                       cef_base_ref_counted_t,
    pub get_xcoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    pub get_ycoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    pub get_type_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_type_flags_t
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub has_image_contents: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    pub get_title_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_page_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_frame_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_media_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_media_type_t
    >,
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_media_state_flags_t
    >,
    pub get_selection_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_edit_state_flags_t
    >,
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >
}
pub type cef_context_menu_params_t = _cef_context_menu_params_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_response_t {
    pub base:               cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int
    >,
    pub get_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t>,
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t)
    >,
    pub get_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int
    >,
    pub set_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int)
    >,
    pub get_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    pub set_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t)
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    pub set_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t)
    >,
    pub get_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    pub set_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t)
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int
        )
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t)
    >
}
pub type cef_response_t = _cef_response_t;
extern "C" {
    pub fn cef_response_create() -> *mut cef_response_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_skip_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: i64)
    >
}
pub type cef_resource_skip_callback_t = _cef_resource_skip_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_read_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int
        )
    >
}
pub type cef_resource_read_callback_t = _cef_resource_read_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_handler_t {
    pub base:                 cef_base_ref_counted_t,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub process_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_response_headers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut i64,
            redirectUrl: *mut cef_string_t
        )
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: i64,
            bytes_skipped: *mut i64,
            callback: *mut _cef_resource_skip_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub read_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_resource_handler_t)>
}
pub type cef_resource_handler_t = _cef_resource_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_response_filter_t {
    pub base:        cef_base_ref_counted_t,
    pub init_filter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int
    >,
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize
        ) -> cef_response_filter_status_t
    >
}
pub type cef_response_filter_t = _cef_response_filter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_request_handler_t {
    pub base:                         cef_base_ref_counted_t,
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t
        ) -> *mut _cef_cookie_access_filter_t
    >,
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t
        ) -> cef_return_value_t
    >,
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t
        ) -> *mut _cef_resource_handler_t
    >,
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t
        )
    >,
    pub on_resource_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t
        ) -> *mut _cef_response_filter_t
    >,
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t,
            received_content_length: i64
        )
    >,
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int
        )
    >
}
pub type cef_resource_request_handler_t = _cef_resource_request_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_access_filter_t {
    pub base:            cef_base_ref_counted_t,
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t
        ) -> ::std::os::raw::c_int
    >,
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_cookie_access_filter_t = _cef_cookie_access_filter_t;
extern "C" {
    pub fn cef_create_directory(full_path: *const cef_string_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_get_temp_directory(temp_dir: *mut cef_string_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_create_new_temp_directory(
        prefix: *const cef_string_t,
        new_temp_path: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_create_temp_directory_in_directory(
        base_dir: *const cef_string_t,
        prefix: *const cef_string_t,
        new_dir: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_directory_exists(path: *const cef_string_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_delete_file(
        path: *const cef_string_t,
        recursive: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_zip_directory(
        src_dir: *const cef_string_t,
        dest_file: *const cef_string_t,
        include_hidden_files: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_load_crlsets_file(path: *const cef_string_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_settings_t {
    pub base:                       cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub set_orientation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, landscape: ::std::os::raw::c_int)
    >,
    pub is_landscape: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int
        )
    >,
    pub set_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t)
    >,
    pub get_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t
    >,
    pub set_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int)
    >,
    pub get_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t
        )
    >,
    pub get_page_ranges_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> usize>,
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t
        )
    >,
    pub set_selection_only: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int
        )
    >,
    pub is_selection_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub set_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, collate: ::std::os::raw::c_int)
    >,
    pub will_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub set_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, model: cef_color_model_t)
    >,
    pub get_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t
    >,
    pub set_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, copies: ::std::os::raw::c_int)
    >,
    pub get_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, mode: cef_duplex_mode_t)
    >,
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t
    >
}
pub type cef_print_settings_t = _cef_print_settings_t;
extern "C" {
    pub fn cef_print_settings_create() -> *mut cef_print_settings_t;
}
extern "C" {
    pub fn cef_is_rtl() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_handler_t {
    pub base:                           cef_base_ref_counted_t,
    pub on_request_context_initialized: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            request_context: *mut _cef_request_context_t
        )
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int
        ) -> *mut _cef_resource_request_handler_t
    >
}
pub type cef_request_context_handler_t = _cef_request_context_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_waitable_event_t {
    pub base:        cef_base_ref_counted_t,
    pub reset:       ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_waitable_event_t)>,
    pub signal:      ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_waitable_event_t)>,
    pub is_signaled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_waitable_event_t) -> ::std::os::raw::c_int
    >,
    pub wait:        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_waitable_event_t)>,
    pub timed_wait: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_waitable_event_t,
            max_ms: i64
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_waitable_event_t = _cef_waitable_event_t;
extern "C" {
    pub fn cef_waitable_event_create(
        automatic_reset: ::std::os::raw::c_int,
        initially_signaled: ::std::os::raw::c_int
    ) -> *mut cef_waitable_event_t;
}
extern "C" {
    pub fn cef_launch_process(command_line: *mut _cef_command_line_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_shared_process_message_builder_t {
    pub base:     cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_process_message_builder_t
        ) -> ::std::os::raw::c_int
    >,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_process_message_builder_t) -> usize
    >,
    pub memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_process_message_builder_t
        ) -> *mut ::std::os::raw::c_void
    >,
    pub build: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_process_message_builder_t
        ) -> *mut _cef_process_message_t
    >
}
pub type cef_shared_process_message_builder_t = _cef_shared_process_message_builder_t;
extern "C" {
    pub fn cef_shared_process_message_builder_create(
        name: *const cef_string_t,
        byte_size: usize
    ) -> *mut cef_shared_process_message_builder_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_load_handler_t {
    pub base:                    cef_base_ref_counted_t,
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int
        )
    >,
    pub on_load_start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t
        )
    >,
    pub on_load_end: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int
        )
    >,
    pub on_load_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t
        )
    >
}
pub type cef_load_handler_t = _cef_load_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_task_t {
    pub base:    cef_base_ref_counted_t,
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_task_t)>
}
pub type cef_task_t = _cef_task_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_task_runner_t {
    pub base:                      cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t
        ) -> ::std::os::raw::c_int
    >,
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int
    >,
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t
        ) -> ::std::os::raw::c_int
    >,
    pub post_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t
        ) -> ::std::os::raw::c_int
    >,
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: i64
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_task_runner_t = _cef_task_runner_t;
extern "C" {
    pub fn cef_task_runner_get_for_current_thread() -> *mut cef_task_runner_t;
}
extern "C" {
    pub fn cef_task_runner_get_for_thread(threadId: cef_thread_id_t) -> *mut cef_task_runner_t;
}
extern "C" {
    pub fn cef_currently_on(threadId: cef_thread_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_post_task(threadId: cef_thread_id_t, task: *mut cef_task_t)
    -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_post_delayed_task(
        threadId: cef_thread_id_t,
        task: *mut cef_task_t,
        delay_ms: i64
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8context_t {
    pub base:            cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t
    >,
    pub get_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t
    >,
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int
    >,
    pub exit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t
        ) -> ::std::os::raw::c_int
    >,
    pub eval: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_v8context_t = _cef_v8context_t;
extern "C" {
    pub fn cef_v8context_get_current_context() -> *mut cef_v8context_t;
}
extern "C" {
    pub fn cef_v8context_get_entered_context() -> *mut cef_v8context_t;
}
extern "C" {
    pub fn cef_v8context_in_context() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8handler_t {
    pub base:    cef_base_ref_counted_t,
    pub execute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_v8handler_t = _cef_v8handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8accessor_t {
    pub base: cef_base_ref_counted_t,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8interceptor_t {
    pub base:        cef_base_ref_counted_t,
    pub get_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8exception_t {
    pub base:                     cef_base_ref_counted_t,
    pub get_message: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t
    >,
    pub get_source_line: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t
    >,
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    pub get_start_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    pub get_end_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    pub get_start_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    pub get_end_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >
}
pub type cef_v8exception_t = _cef_v8exception_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8array_buffer_release_callback_t {
    pub base:           cef_base_ref_counted_t,
    pub release_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void
        )
    >
}
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8value_t {
    pub base:                               cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_undefined: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_uint: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_date: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_object: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_function: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_promise: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_bool_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub get_int_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> i32>,
    pub get_uint_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> u32>,
    pub get_double_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> f64>,
    pub get_date_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_basetime_t>,
    pub get_string_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t
    >,
    pub is_user_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub has_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub get_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t
    >,
    pub clear_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t
        ) -> *mut _cef_v8value_t
    >,
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int
        ) -> *mut _cef_v8value_t
    >,
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t,
            attribute: cef_v8_propertyattribute_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    pub set_user_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_user_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t
    >,
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_array_length: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t
        ) -> *mut _cef_v8array_buffer_release_callback_t
    >,
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    pub get_array_buffer_byte_length:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> usize>,
    pub get_array_buffer_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut ::std::os::raw::c_void
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t
    >,
    pub get_function_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t
    >,
    pub execute_function: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t
        ) -> *mut _cef_v8value_t
    >,
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t
        ) -> *mut _cef_v8value_t
    >,
    pub resolve_promise: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            arg: *mut _cef_v8value_t
        ) -> ::std::os::raw::c_int
    >,
    pub reject_promise: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            errorMsg: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_v8value_t = _cef_v8value_t;
extern "C" {
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_int(value: i32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_uint(value: u32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_date(date: cef_basetime_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t,
        interceptor: *mut cef_v8interceptor_t
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_function(
        name: *const cef_string_t,
        handler: *mut cef_v8handler_t
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_promise() -> *mut cef_v8value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8stack_trace_t {
    pub base:            cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int
    >,
    pub get_frame_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int
        ) -> *mut _cef_v8stack_frame_t
    >
}
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
extern "C" {
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int
    ) -> *mut cef_v8stack_trace_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8stack_frame_t {
    pub base:                          cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    pub get_script_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t
    >,
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    pub get_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    pub is_eval: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    pub is_constructor: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >
}
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;
extern "C" {
    pub fn cef_register_extension(
        extension_name: *const cef_string_t,
        javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_render_process_handler_t {
    pub base:                        cef_base_ref_counted_t,
    pub on_web_kit_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t)>,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t
        )
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t
        )
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t) -> *mut _cef_load_handler_t
    >,
    pub on_context_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t
        )
    >,
    pub on_context_released: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t
        )
    >,
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t
        )
    >,
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t
        )
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_sslinfo_t {
    pub base:                cef_base_ref_counted_t,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t
    >
}
pub type cef_sslinfo_t = _cef_sslinfo_t;
extern "C" {
    pub fn cef_is_cert_status_error(status: cef_cert_status_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_auth_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t
        )
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>
}
pub type cef_auth_callback_t = _cef_auth_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_t {
    pub base:                cef_base_ref_counted_t,
    pub get_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_request_t
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_urlrequest_client_t
    >,
    pub get_request_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_urlrequest_status_t
    >,
    pub get_request_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_errorcode_t
    >,
    pub get_response: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_response_t
    >,
    pub response_was_cached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> ::std::os::raw::c_int
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t)>
}
pub type cef_urlrequest_t = _cef_urlrequest_t;
extern "C" {
    pub fn cef_urlrequest_create(
        request: *mut _cef_request_t,
        client: *mut _cef_urlrequest_client_t,
        request_context: *mut _cef_request_context_t
    ) -> *mut cef_urlrequest_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_client_t {
    pub base:                 cef_base_ref_counted_t,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_client_t, request: *mut _cef_urlrequest_t)
    >,
    pub on_upload_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: i64,
            total: i64
        )
    >,
    pub on_download_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: i64,
            total: i64
        )
    >,
    pub on_download_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            data: *const ::std::os::raw::c_void,
            data_length: usize
        )
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_urlrequest_client_t = _cef_urlrequest_client_t;
extern "C" {
    pub fn cef_get_path(key: cef_path_key_t, path: *mut cef_string_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_item_t {
    pub base:                    cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    pub is_in_progress: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    pub is_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    pub is_canceled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    pub is_interrupted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    pub get_interrupt_reason: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_download_interrupt_reason_t
    >,
    pub get_current_speed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> i64>,
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    pub get_total_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> i64>,
    pub get_received_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> i64>,
    pub get_start_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_basetime_t
    >,
    pub get_end_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_basetime_t
    >,
    pub get_full_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> u32>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >
}
pub type cef_download_item_t = _cef_download_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_before_download_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int
        )
    >
}
pub type cef_before_download_callback_t = _cef_before_download_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_item_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub pause:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>
}
pub type cef_download_item_callback_t = _cef_download_item_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_handler_t {
    pub base:                cef_base_ref_counted_t,
    pub can_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            url: *const cef_string_t,
            request_method: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_before_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t
        )
    >,
    pub on_download_updated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t
        )
    >
}
pub type cef_download_handler_t = _cef_download_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_accessibility_handler_t {
    pub base:                             cef_base_ref_counted_t,
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t)
    >,
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t)
    >
}
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_render_handler_t {
    pub base:                             cef_base_ref_counted_t,
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t
        ) -> *mut _cef_accessibility_handler_t
    >,
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_view_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t
        )
    >,
    pub get_screen_point: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_screen_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut cef_screen_info_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_popup_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int
        )
    >,
    pub on_popup_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t
        )
    >,
    pub on_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int
        )
    >,
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void
        )
    >,
    pub get_touch_handle_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            orientation: cef_horizontal_alignment_t,
            size: *mut cef_size_t
        )
    >,
    pub on_touch_handle_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            state: *const cef_touch_handle_state_t
        )
    >,
    pub start_dragging: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t
        )
    >,
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64
        )
    >,
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t
        )
    >,
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t
        )
    >,
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t
        )
    >
}
pub type cef_render_handler_t = _cef_render_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_focus_handler_t {
    pub base:          cef_base_ref_counted_t,
    pub on_take_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int
        )
    >,
    pub on_set_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_got_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t)
    >
}
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scheme_registrar_t {
    pub base:              cef_base_scoped_t,
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scheme_handler_factory_t {
    pub base:   cef_base_ref_counted_t,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t
        ) -> *mut _cef_resource_handler_t
    >
}
pub type cef_scheme_handler_factory_t = _cef_scheme_handler_factory_t;
extern "C" {
    pub fn cef_register_scheme_handler_factory(
        scheme_name: *const cef_string_t,
        domain_name: *const cef_string_t,
        factory: *mut cef_scheme_handler_factory_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_clear_scheme_handler_factories() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_end_tracing_callback_t {
    pub base:                    cef_base_ref_counted_t,
    pub on_end_tracing_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_end_tracing_callback_t,
            tracing_file: *const cef_string_t
        )
    >
}
pub type cef_end_tracing_callback_t = _cef_end_tracing_callback_t;
extern "C" {
    pub fn cef_begin_tracing(
        categories: *const cef_string_t,
        callback: *mut _cef_completion_callback_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_end_tracing(
        tracing_file: *const cef_string_t,
        callback: *mut cef_end_tracing_callback_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_now_from_system_trace_time() -> i64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_life_span_handler_t {
    pub base:                      cef_base_ref_counted_t,
    pub on_before_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_before_dev_tools_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            use_default_window: *mut ::std::os::raw::c_int
        )
    >,
    pub on_after_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t)
    >,
    pub do_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_before_close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t)
    >
}
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
extern "C" {
    pub fn cef_crash_reporting_enabled() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_set_crash_key_value(key: *const cef_string_t, value: *const cef_string_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_dialog_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t
        )
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_dialog_callback_t)>
}
pub type cef_print_dialog_callback_t = _cef_print_dialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_job_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_job_callback_t)>
}
pub type cef_print_job_callback_t = _cef_print_job_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_handler_t {
    pub base:               cef_base_ref_counted_t,
    pub on_print_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t)
    >,
    pub on_print_settings: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int
        )
    >,
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_print_job: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_print_reset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t)
    >,
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            device_units_per_inch: ::std::os::raw::c_int
        ) -> cef_size_t
    >
}
pub type cef_print_handler_t = _cef_print_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_jsdialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t
        )
    >
}
pub type cef_jsdialog_callback_t = _cef_jsdialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_jsdialog_handler_t {
    pub base:                    cef_base_ref_counted_t,
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t)
    >,
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t)
    >
}
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_view_delegate_t {
    pub base:                   cef_base_ref_counted_t,
    pub get_preferred_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t
        ) -> cef_size_t
    >,
    pub get_minimum_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t
        ) -> cef_size_t
    >,
    pub get_maximum_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t
        ) -> cef_size_t
    >,
    pub get_height_for_width: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            width: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_parent_view_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
            parent: *mut _cef_view_t
        )
    >,
    pub on_child_view_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
            child: *mut _cef_view_t
        )
    >,
    pub on_window_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int
        )
    >,
    pub on_layout_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            new_bounds: *const cef_rect_t
        )
    >,
    pub on_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_delegate_t, view: *mut _cef_view_t)
    >,
    pub on_blur: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_delegate_t, view: *mut _cef_view_t)
    >
}
pub type cef_view_delegate_t = _cef_view_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_button_delegate_t {
    pub base:                    cef_view_delegate_t,
    pub on_button_pressed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_delegate_t, button: *mut _cef_button_t)
    >,
    pub on_button_state_changed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_delegate_t, button: *mut _cef_button_t)
    >
}
pub type cef_button_delegate_t = _cef_button_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_pressed_lock_t {
    pub base: cef_base_ref_counted_t
}
pub type cef_menu_button_pressed_lock_t = _cef_menu_button_pressed_lock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_delegate_t {
    pub base:                   cef_button_delegate_t,
    pub on_menu_button_pressed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_button_delegate_t,
            menu_button: *mut _cef_menu_button_t,
            screen_point: *const cef_point_t,
            button_pressed_lock: *mut _cef_menu_button_pressed_lock_t
        )
    >
}
pub type cef_menu_button_delegate_t = _cef_menu_button_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_view_t {
    pub base:                       cef_base_ref_counted_t,
    pub as_browser_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_browser_view_t
    >,
    pub as_button:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_button_t>,
    pub as_panel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_panel_t>,
    pub as_scroll_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_scroll_view_t
    >,
    pub as_textfield: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_textfield_t
    >,
    pub get_type_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_string_userfree_t
    >,
    pub to_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            include_children: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub is_attached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            that: *mut _cef_view_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_delegate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_view_delegate_t
    >,
    pub get_window:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_window_t>,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub set_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, id: ::std::os::raw::c_int)
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, group_id: ::std::os::raw::c_int)
    >,
    pub get_parent_view:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_view_t>,
    pub get_view_for_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            id: ::std::os::raw::c_int
        ) -> *mut _cef_view_t
    >,
    pub set_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, bounds: *const cef_rect_t)
    >,
    pub get_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_rect_t>,
    pub get_bounds_in_screen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_rect_t>,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, size: *const cef_size_t)
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, position: *const cef_point_t)
    >,
    pub get_position:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_point_t>,
    pub set_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, insets: *const cef_insets_t)
    >,
    pub get_insets:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_insets_t>,
    pub get_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub size_to_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    pub get_minimum_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub get_maximum_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub get_height_for_width: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            width: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub invalidate_layout: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, visible: ::std::os::raw::c_int)
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub is_drawn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, enabled: ::std::os::raw::c_int)
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub set_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, focusable: ::std::os::raw::c_int)
    >,
    pub is_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub is_accessibility_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    pub request_focus: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    pub set_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t, color: cef_color_t)>,
    pub get_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_color_t>,
    pub convert_point_to_screen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    pub convert_point_from_screen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    pub convert_point_to_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    pub convert_point_from_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    pub convert_point_to_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            view: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    pub convert_point_from_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            view: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_view_t = _cef_view_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_display_t {
    pub base:                      cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> i64>,
    pub get_device_scale_factor:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> f32>,
    pub convert_point_to_pixels: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t, point: *mut cef_point_t)
    >,
    pub convert_point_from_pixels: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t, point: *mut cef_point_t)
    >,
    pub get_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> cef_rect_t>,
    pub get_work_area:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> cef_rect_t>,
    pub get_rotation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t) -> ::std::os::raw::c_int
    >
}
pub type cef_display_t = _cef_display_t;
extern "C" {
    pub fn cef_display_get_primary() -> *mut cef_display_t;
}
extern "C" {
    pub fn cef_display_get_nearest_point(
        point: *const cef_point_t,
        input_pixel_coords: ::std::os::raw::c_int
    ) -> *mut cef_display_t;
}
extern "C" {
    pub fn cef_display_get_matching_bounds(
        bounds: *const cef_rect_t,
        input_pixel_coords: ::std::os::raw::c_int
    ) -> *mut cef_display_t;
}
extern "C" {
    pub fn cef_display_get_count() -> usize;
}
extern "C" {
    pub fn cef_display_get_alls(displaysCount: *mut usize, displays: *mut *mut cef_display_t);
}
extern "C" {
    pub fn cef_display_convert_screen_point_to_pixels(point: *const cef_point_t) -> cef_point_t;
}
extern "C" {
    pub fn cef_display_convert_screen_point_from_pixels(point: *const cef_point_t) -> cef_point_t;
}
extern "C" {
    pub fn cef_display_convert_screen_rect_to_pixels(rect: *const cef_rect_t) -> cef_rect_t;
}
extern "C" {
    pub fn cef_display_convert_screen_rect_from_pixels(rect: *const cef_rect_t) -> cef_rect_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_overlay_controller_t {
    pub base:                   cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_overlay_controller_t,
            that: *mut _cef_overlay_controller_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_contents_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> *mut _cef_view_t
    >,
    pub get_window: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> *mut _cef_window_t
    >,
    pub get_docking_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_docking_mode_t
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t)>,
    pub set_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, bounds: *const cef_rect_t)
    >,
    pub get_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_rect_t
    >,
    pub get_bounds_in_screen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_rect_t
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, size: *const cef_size_t)
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_size_t
    >,
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, position: *const cef_point_t)
    >,
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_point_t
    >,
    pub set_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, insets: *const cef_insets_t)
    >,
    pub get_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_insets_t
    >,
    pub size_to_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t)>,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, visible: ::std::os::raw::c_int)
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int
    >,
    pub is_drawn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int
    >
}
pub type cef_overlay_controller_t = _cef_overlay_controller_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_panel_delegate_t {
    pub base: cef_view_delegate_t
}
pub type cef_panel_delegate_t = _cef_panel_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_panel_t {
    pub base:                   cef_view_t,
    pub as_window:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_window_t>,
    pub set_to_fill_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_fill_layout_t
    >,
    pub set_to_box_layout: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            settings: *const cef_box_layout_settings_t
        ) -> *mut _cef_box_layout_t
    >,
    pub get_layout:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_layout_t>,
    pub layout: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t)>,
    pub add_child_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t, view: *mut _cef_view_t)
    >,
    pub add_child_view_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            view: *mut _cef_view_t,
            index: ::std::os::raw::c_int
        )
    >,
    pub reorder_child_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            view: *mut _cef_view_t,
            index: ::std::os::raw::c_int
        )
    >,
    pub remove_child_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t, view: *mut _cef_view_t)
    >,
    pub remove_all_child_views:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t)>,
    pub get_child_view_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> usize>,
    pub get_child_view_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            index: ::std::os::raw::c_int
        ) -> *mut _cef_view_t
    >
}
pub type cef_panel_t = _cef_panel_t;
extern "C" {
    pub fn cef_panel_create(delegate: *mut _cef_panel_delegate_t) -> *mut cef_panel_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_delegate_t {
    pub base:                            cef_panel_delegate_t,
    pub on_window_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t)
    >,
    pub on_window_closing: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t)
    >,
    pub on_window_destroyed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t)
    >,
    pub on_window_activation_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            active: ::std::os::raw::c_int
        )
    >,
    pub on_window_bounds_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            new_bounds: *const cef_rect_t
        )
    >,
    pub on_window_fullscreen_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            is_completed: ::std::os::raw::c_int
        )
    >,
    pub get_parent_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            is_menu: *mut ::std::os::raw::c_int,
            can_activate_menu: *mut ::std::os::raw::c_int
        ) -> *mut _cef_window_t
    >,
    pub is_window_modal_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_initial_bounds: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> cef_rect_t
    >,
    pub get_initial_show_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> cef_show_state_t
    >,
    pub is_frameless: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub with_standard_window_buttons: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_titlebar_height: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            titlebar_height: *mut f32
        ) -> ::std::os::raw::c_int
    >,
    pub can_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub can_maximize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub can_minimize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub can_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            event: *const cef_key_event_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_window_delegate_t = _cef_window_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_t {
    pub base:                             cef_panel_t,
    pub show: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub show_as_browser_modal_dialog: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, browser_view: *mut _cef_browser_view_t)
    >,
    pub hide: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub center_window: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, size: *const cef_size_t)
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub is_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    pub activate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub deactivate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub is_active: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    pub bring_to_top: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub set_always_on_top: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, on_top: ::std::os::raw::c_int)
    >,
    pub is_always_on_top: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    pub maximize: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub minimize: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub restore: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub set_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, fullscreen: ::std::os::raw::c_int)
    >,
    pub is_maximized: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    pub is_minimized: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    pub is_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    pub set_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, title: *const cef_string_t)
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> cef_string_userfree_t
    >,
    pub set_window_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, image: *mut _cef_image_t)
    >,
    pub get_window_icon:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_image_t>,
    pub set_window_app_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, image: *mut _cef_image_t)
    >,
    pub get_window_app_icon:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_image_t>,
    pub add_overlay_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            view: *mut _cef_view_t,
            docking_mode: cef_docking_mode_t,
            can_activate: ::std::os::raw::c_int
        ) -> *mut _cef_overlay_controller_t
    >,
    pub show_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
            anchor_position: cef_menu_anchor_position_t
        )
    >,
    pub cancel_menu: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub get_display: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_display_t
    >,
    pub get_client_area_bounds_in_screen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> cef_rect_t>,
    pub set_draggable_regions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t
        )
    >,
    pub get_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_ulong
    >,
    pub send_key_press: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            key_code: ::std::os::raw::c_int,
            event_flags: u32
        )
    >,
    pub send_mouse_move: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            screen_x: ::std::os::raw::c_int,
            screen_y: ::std::os::raw::c_int
        )
    >,
    pub send_mouse_events: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            button: cef_mouse_button_type_t,
            mouse_down: ::std::os::raw::c_int,
            mouse_up: ::std::os::raw::c_int
        )
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
            high_priority: ::std::os::raw::c_int
        )
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, command_id: ::std::os::raw::c_int)
    >,
    pub remove_all_accelerators:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>
}
pub type cef_window_t = _cef_window_t;
extern "C" {
    pub fn cef_window_create_top_level(delegate: *mut _cef_window_delegate_t) -> *mut cef_window_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_layout_t {
    pub base:           cef_base_ref_counted_t,
    pub as_box_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> *mut _cef_box_layout_t
    >,
    pub as_fill_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> *mut _cef_fill_layout_t
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> ::std::os::raw::c_int
    >
}
pub type cef_layout_t = _cef_layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_fill_layout_t {
    pub base: cef_layout_t
}
pub type cef_fill_layout_t = _cef_fill_layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_textfield_delegate_t {
    pub base:                 cef_view_delegate_t,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_delegate_t,
            textfield: *mut _cef_textfield_t,
            event: *const cef_key_event_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_after_user_action: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_delegate_t,
            textfield: *mut _cef_textfield_t
        )
    >
}
pub type cef_textfield_delegate_t = _cef_textfield_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_textfield_t {
    pub base:                           cef_view_t,
    pub set_password_input: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, password_input: ::std::os::raw::c_int)
    >,
    pub is_password_input: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int
    >,
    pub set_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, read_only: ::std::os::raw::c_int)
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t
    >,
    pub set_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    pub append_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    pub insert_or_replace_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int
    >,
    pub get_selected_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t
    >,
    pub select_all: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, reversed: ::std::os::raw::c_int)
    >,
    pub clear_selection: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t)>,
    pub get_selected_range:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_range_t>,
    pub select_range: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, range: *const cef_range_t)
    >,
    pub get_cursor_position:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> usize>,
    pub set_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    pub get_text_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    pub set_selection_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    pub get_selection_text_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    pub set_selection_background_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    pub get_selection_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, font_list: *const cef_string_t)
    >,
    pub apply_text_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            color: cef_color_t,
            range: *const cef_range_t
        )
    >,
    pub apply_text_style: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            style: cef_text_style_t,
            add: ::std::os::raw::c_int,
            range: *const cef_range_t
        )
    >,
    pub is_command_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            command_id: cef_text_field_commands_t
        ) -> ::std::os::raw::c_int
    >,
    pub execute_command: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, command_id: cef_text_field_commands_t)
    >,
    pub clear_edit_history:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t)>,
    pub set_placeholder_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    pub get_placeholder_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t
    >,
    pub set_placeholder_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    pub set_accessible_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, name: *const cef_string_t)
    >
}
pub type cef_textfield_t = _cef_textfield_t;
extern "C" {
    pub fn cef_textfield_create(delegate: *mut _cef_textfield_delegate_t) -> *mut cef_textfield_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_button_t {
    pub base:                 cef_view_t,
    pub as_label_button: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t) -> *mut _cef_label_button_t
    >,
    pub set_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, state: cef_button_state_t)
    >,
    pub get_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t) -> cef_button_state_t
    >,
    pub set_ink_drop_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, enabled: ::std::os::raw::c_int)
    >,
    pub set_tooltip_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, tooltip_text: *const cef_string_t)
    >,
    pub set_accessible_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, name: *const cef_string_t)
    >
}
pub type cef_button_t = _cef_button_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_label_button_t {
    pub base:                     cef_button_t,
    pub as_menu_button: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t) -> *mut _cef_menu_button_t
    >,
    pub set_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, text: *const cef_string_t)
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t) -> cef_string_userfree_t
    >,
    pub set_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            button_state: cef_button_state_t,
            image: *mut _cef_image_t
        )
    >,
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            button_state: cef_button_state_t
        ) -> *mut _cef_image_t
    >,
    pub set_text_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            for_state: cef_button_state_t,
            color: cef_color_t
        )
    >,
    pub set_enabled_text_colors: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, color: cef_color_t)
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, font_list: *const cef_string_t)
    >,
    pub set_horizontal_alignment: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            alignment: cef_horizontal_alignment_t
        )
    >,
    pub set_minimum_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, size: *const cef_size_t)
    >,
    pub set_maximum_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, size: *const cef_size_t)
    >
}
pub type cef_label_button_t = _cef_label_button_t;
extern "C" {
    pub fn cef_label_button_create(
        delegate: *mut _cef_button_delegate_t,
        text: *const cef_string_t
    ) -> *mut cef_label_button_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scroll_view_t {
    pub base:                            cef_view_t,
    pub set_content_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t, view: *mut _cef_view_t)
    >,
    pub get_content_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> *mut _cef_view_t
    >,
    pub get_visible_content_rect:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> cef_rect_t>,
    pub has_horizontal_scrollbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >,
    pub get_horizontal_scrollbar_height: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >,
    pub has_vertical_scrollbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >,
    pub get_vertical_scrollbar_width: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >
}
pub type cef_scroll_view_t = _cef_scroll_view_t;
extern "C" {
    pub fn cef_scroll_view_create(delegate: *mut _cef_view_delegate_t) -> *mut cef_scroll_view_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_t {
    pub base:         cef_label_button_t,
    pub show_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_button_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
            anchor_position: cef_menu_anchor_position_t
        )
    >,
    pub trigger_menu: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_menu_button_t)>
}
pub type cef_menu_button_t = _cef_menu_button_t;
extern "C" {
    pub fn cef_menu_button_create(
        delegate: *mut _cef_menu_button_delegate_t,
        text: *const cef_string_t
    ) -> *mut cef_menu_button_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_handler_t {
    pub base:                    cef_base_ref_counted_t,
    pub get_audio_parameters: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *mut cef_audio_parameters_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_audio_stream_started: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *const cef_audio_parameters_t,
            channels: ::std::os::raw::c_int
        )
    >,
    pub on_audio_stream_packet: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            data: *mut *const f32,
            frames: ::std::os::raw::c_int,
            pts: i64
        )
    >,
    pub on_audio_stream_stopped: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_audio_handler_t, browser: *mut _cef_browser_t)
    >,
    pub on_audio_stream_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            message: *const cef_string_t
        )
    >
}
pub type cef_audio_handler_t = _cef_audio_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_command_handler_t {
    pub base:                               cef_base_ref_counted_t,
    pub on_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int,
            disposition: cef_window_open_disposition_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_chrome_app_menu_item_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_chrome_app_menu_item_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub is_chrome_page_action_icon_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            icon_type: cef_chrome_page_action_icon_type_t
        ) -> ::std::os::raw::c_int
    >,
    pub is_chrome_toolbar_button_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            button_type: cef_chrome_toolbar_button_type_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_command_handler_t = _cef_command_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_file_dialog_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_file_dialog_callback_t,
            file_paths: cef_string_list_t
        )
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_file_dialog_callback_t)>
}
pub type cef_file_dialog_callback_t = _cef_file_dialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dialog_handler_t {
    pub base:           cef_base_ref_counted_t,
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            callback: *mut _cef_file_dialog_callback_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_display_handler_t {
    pub base:                       cef_base_ref_counted_t,
    pub on_address_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t
        )
    >,
    pub on_title_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t
        )
    >,
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t
        )
    >,
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int
        )
    >,
    pub on_tooltip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_status_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t
        )
    >,
    pub on_console_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64
        )
    >,
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            cursor: ::std::os::raw::c_ulong,
            type_: cef_cursor_type_t,
            custom_cursor_info: *const cef_cursor_info_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_media_access_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            has_video_access: ::std::os::raw::c_int,
            has_audio_access: ::std::os::raw::c_int
        )
    >
}
pub type cef_display_handler_t = _cef_display_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_find_handler_t {
    pub base:           cef_base_ref_counted_t,
    pub on_find_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int
        )
    >
}
pub type cef_find_handler_t = _cef_find_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_keyboard_handler_t {
    pub base:             cef_base_ref_counted_t,
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const cef_key_event_t,
            os_event: *mut XEvent,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const cef_key_event_t,
            os_event: *mut XEvent
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_access_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_access_callback_t, allowed_permissions: u32)
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_access_callback_t)>
}
pub type cef_media_access_callback_t = _cef_media_access_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_permission_prompt_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_prompt_callback_t,
            result: cef_permission_request_result_t
        )
    >
}
pub type cef_permission_prompt_callback_t = _cef_permission_prompt_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_permission_handler_t {
    pub base:                               cef_base_ref_counted_t,
    pub on_request_media_access_permission: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            requesting_origin: *const cef_string_t,
            requested_permissions: u32,
            callback: *mut _cef_media_access_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_show_permission_prompt: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_handler_t,
            browser: *mut _cef_browser_t,
            prompt_id: u64,
            requesting_origin: *const cef_string_t,
            requested_permissions: u32,
            callback: *mut _cef_permission_prompt_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_dismiss_permission_prompt: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_handler_t,
            browser: *mut _cef_browser_t,
            prompt_id: u64,
            result: cef_permission_request_result_t
        )
    >
}
pub type cef_permission_handler_t = _cef_permission_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_select_client_certificate_callback_t {
    pub base:   cef_base_ref_counted_t,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t
        )
    >
}
pub type cef_select_client_certificate_callback_t = _cef_select_client_certificate_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_handler_t {
    pub base:                                cef_base_ref_counted_t,
    pub on_before_browse: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int
        ) -> *mut _cef_resource_request_handler_t
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t)
    >,
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t
        )
    >,
    pub on_document_available_in_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t)
    >
}
pub type cef_request_handler_t = _cef_request_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_client_t {
    pub base:                        cef_base_ref_counted_t,
    pub get_audio_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_audio_handler_t
    >,
    pub get_command_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_command_handler_t
    >,
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t
    >,
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t
    >,
    pub get_display_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t
    >,
    pub get_download_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t
    >,
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t
    >,
    pub get_find_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t
    >,
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t
    >,
    pub get_frame_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_frame_handler_t
    >,
    pub get_permission_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_permission_handler_t
    >,
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t
    >,
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t
    >,
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t
    >,
    pub get_print_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_print_handler_t
    >,
    pub get_render_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t
    >,
    pub get_request_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_client_t = _cef_client_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_view_delegate_t {
    pub base: cef_view_delegate_t,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            browser: *mut _cef_browser_t
        )
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            browser: *mut _cef_browser_t
        )
    >,
    pub get_delegate_for_popup_browser_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            settings: *const _cef_browser_settings_t,
            client: *mut _cef_client_t,
            is_devtools: ::std::os::raw::c_int
        ) -> *mut _cef_browser_view_delegate_t
    >,
    pub on_popup_browser_view_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            popup_browser_view: *mut _cef_browser_view_t,
            is_devtools: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub get_chrome_toolbar_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t
        ) -> cef_chrome_toolbar_type_t
    >,
    pub use_frameless_window_for_picture_in_picture: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_gesture_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            gesture_command: cef_gesture_command_t
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_browser_view_delegate_t = _cef_browser_view_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_view_t {
    pub base:                    cef_view_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_t) -> *mut _cef_browser_t
    >,
    pub get_chrome_toolbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_t) -> *mut _cef_view_t
    >,
    pub set_prefer_accelerators: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_t,
            prefer_accelerators: ::std::os::raw::c_int
        )
    >
}
pub type cef_browser_view_t = _cef_browser_view_t;
extern "C" {
    pub fn cef_browser_view_create(
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
        delegate: *mut _cef_browser_view_delegate_t
    ) -> *mut cef_browser_view_t;
}
extern "C" {
    pub fn cef_browser_view_get_for_browser(
        browser: *mut _cef_browser_t
    ) -> *mut cef_browser_view_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_t {
    pub base:                cef_layout_t,
    pub set_flex_for_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_box_layout_t,
            view: *mut _cef_view_t,
            flex: ::std::os::raw::c_int
        )
    >,
    pub clear_flex_for_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_box_layout_t, view: *mut _cef_view_t)
    >
}
pub type cef_box_layout_t = _cef_box_layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_bundle_t {
    pub base:                        cef_base_ref_counted_t,
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_t,
            string_id: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_t,
            resource_id: ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >,
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t
        ) -> *mut _cef_binary_value_t
    >
}
pub type cef_resource_bundle_t = _cef_resource_bundle_t;
extern "C" {
    pub fn cef_resource_bundle_get_global() -> *mut cef_resource_bundle_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_bundle_handler_t {
    pub base:                        cef_base_ref_counted_t,
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize
        ) -> ::std::os::raw::c_int
    >,
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize
        ) -> ::std::os::raw::c_int
    >
}
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_process_handler_t {
    pub base:                            cef_base_ref_counted_t,
    pub on_register_custom_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            type_: cef_preferences_type_t,
            registrar: *mut _cef_preference_registrar_t
        )
    >,
    pub on_context_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t)>,
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t
        )
    >,
    pub on_already_running_app_relaunch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
            current_directory: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: i64)
    >,
    pub get_default_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t) -> *mut _cef_client_t
    >
}
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_app_t {
    pub base:                              cef_base_ref_counted_t,
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t
        )
    >,
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t)
    >,
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t
    >,
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t
    >,
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t
    >
}
pub type cef_app_t = _cef_app_t;
extern "C" {
    pub fn cef_execute_process(
        args: *const cef_main_args_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_initialize(
        args: *const cef_main_args_t,
        settings: *const _cef_settings_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_shutdown();
}
extern "C" {
    pub fn cef_do_message_loop_work();
}
extern "C" {
    pub fn cef_run_message_loop();
}
extern "C" {
    pub fn cef_quit_message_loop();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_server_t {
    pub base:                    cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> *mut _cef_task_runner_t
    >,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_server_t)>,
    pub is_running: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> ::std::os::raw::c_int
    >,
    pub get_address: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> cef_string_userfree_t
    >,
    pub has_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> ::std::os::raw::c_int
    >,
    pub is_valid_connection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub send_http200response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            content_type: *const cef_string_t,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >,
    pub send_http404response: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t, connection_id: ::std::os::raw::c_int)
    >,
    pub send_http500response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            error_message: *const cef_string_t
        )
    >,
    pub send_http_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            response_code: ::std::os::raw::c_int,
            content_type: *const cef_string_t,
            content_length: i64,
            extra_headers: cef_string_multimap_t
        )
    >,
    pub send_raw_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >,
    pub close_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t, connection_id: ::std::os::raw::c_int)
    >,
    pub send_web_socket_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >
}
pub type cef_server_t = _cef_server_t;
extern "C" {
    pub fn cef_server_create(
        address: *const cef_string_t,
        port: u16,
        backlog: ::std::os::raw::c_int,
        handler: *mut _cef_server_handler_t
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_server_handler_t {
    pub base:                    cef_base_ref_counted_t,
    pub on_server_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_handler_t, server: *mut _cef_server_t)
    >,
    pub on_server_destroyed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_handler_t, server: *mut _cef_server_t)
    >,
    pub on_client_connected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        )
    >,
    pub on_client_disconnected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        )
    >,
    pub on_http_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            client_address: *const cef_string_t,
            request: *mut _cef_request_t
        )
    >,
    pub on_web_socket_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            client_address: *const cef_string_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t
        )
    >,
    pub on_web_socket_connected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        )
    >,
    pub on_web_socket_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >
}
pub type cef_server_handler_t = _cef_server_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize]
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low:  ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock:    ::std::os::raw::c_int,
    pub __count:   ::std::os::raw::c_uint,
    pub __owner:   ::std::os::raw::c_int,
    pub __nusers:  ::std::os::raw::c_uint,
    pub __kind:    ::std::os::raw::c_int,
    pub __spins:   ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list:    __pthread_list_t
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers:       ::std::os::raw::c_uint,
    pub __writers:       ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3:          ::std::os::raw::c_uint,
    pub __pad4:          ::std::os::raw::c_uint,
    pub __cur_writer:    ::std::os::raw::c_int,
    pub __shared:        ::std::os::raw::c_int,
    pub __rwelision:     ::std::os::raw::c_schar,
    pub __pad1:          [::std::os::raw::c_uchar; 7usize],
    pub __pad2:          ::std::os::raw::c_ulong,
    pub __flags:         ::std::os::raw::c_uint
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq:         __atomic_wide_counter,
    pub __g1_start:     __atomic_wide_counter,
    pub __g_refs:       [::std::os::raw::c_uint; 2usize],
    pub __g_size:       [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs:        ::std::os::raw::c_uint,
    pub __g_signals:    [::std::os::raw::c_uint; 2usize]
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size:  [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size:  [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size:  [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data:  __pthread_mutex_s,
    pub __size:  [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data:  __pthread_cond_s,
    pub __size:  [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data:  __pthread_rwlock_arch_t,
    pub __size:  [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size:  [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size:  [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size:  [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf:         __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask:     __sigset_t
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_4 = _bindgen_ty_4::PTHREAD_CREATE_JOINABLE;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_4 = _bindgen_ty_4::PTHREAD_CREATE_DETACHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_4 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1
}
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_ADAPTIVE_NP;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_MUTEX_TIMED_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_5 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3
}
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_6 = _bindgen_ty_6::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_6 = _bindgen_ty_6::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_6 = _bindgen_ty_6::PTHREAD_MUTEX_ROBUST;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_6 = _bindgen_ty_6::PTHREAD_MUTEX_ROBUST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_6 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1
}
pub const PTHREAD_PRIO_NONE: _bindgen_ty_7 = _bindgen_ty_7::PTHREAD_PRIO_NONE;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_7 = _bindgen_ty_7::PTHREAD_PRIO_INHERIT;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_7 = _bindgen_ty_7::PTHREAD_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_7 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2
}
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_8 =
    _bindgen_ty_8::PTHREAD_RWLOCK_PREFER_READER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_8 =
    _bindgen_ty_8::PTHREAD_RWLOCK_PREFER_WRITER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_8 =
    _bindgen_ty_8::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_8 = _bindgen_ty_8::PTHREAD_RWLOCK_PREFER_READER_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_8 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2
}
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_9 = _bindgen_ty_9::PTHREAD_INHERIT_SCHED;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_9 = _bindgen_ty_9::PTHREAD_EXPLICIT_SCHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_9 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1
}
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_10 = _bindgen_ty_10::PTHREAD_SCOPE_SYSTEM;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_10 = _bindgen_ty_10::PTHREAD_SCOPE_PROCESS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_10 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1
}
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_11 = _bindgen_ty_11::PTHREAD_PROCESS_PRIVATE;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_11 = _bindgen_ty_11::PTHREAD_PROCESS_SHARED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_11 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg:        *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev:       *mut _pthread_cleanup_buffer
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_12 = _bindgen_ty_12::PTHREAD_CANCEL_ENABLE;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_12 = _bindgen_ty_12::PTHREAD_CANCEL_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_12 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1
}
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_13 = _bindgen_ty_13::PTHREAD_CANCEL_DEFERRED;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_13 = _bindgen_ty_13::PTHREAD_CANCEL_ASYNCHRONOUS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_13 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1
}
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void
        >,
        __arg: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad:            [*mut ::std::os::raw::c_void; 4usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg:     *mut ::std::os::raw::c_void,
    pub __do_it:          ::std::os::raw::c_int,
    pub __cancel_type:    ::std::os::raw::c_int
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
    -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)
        >
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>
    ) -> ::std::os::raw::c_int;
}
pub type cef_platform_thread_id_t = pid_t;
extern "C" {
    pub fn cef_get_current_platform_thread_id() -> cef_platform_thread_id_t;
}
pub type cef_platform_thread_handle_t = pthread_t;
extern "C" {
    pub fn cef_get_current_platform_thread_handle() -> cef_platform_thread_handle_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_thread_t {
    pub base:                   cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_thread_t) -> *mut _cef_task_runner_t
    >,
    pub get_platform_thread_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_thread_t) -> cef_platform_thread_id_t
    >,
    pub stop: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_thread_t)>,
    pub is_running: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_thread_t) -> ::std::os::raw::c_int
    >
}
pub type cef_thread_t = _cef_thread_t;
extern "C" {
    pub fn cef_thread_create(
        display_name: *const cef_string_t,
        priority: cef_thread_priority_t,
        message_loop_type: cef_message_loop_type_t,
        stoppable: ::std::os::raw::c_int,
        com_init_mode: cef_com_init_mode_t
    ) -> *mut cef_thread_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_zip_reader_t {
    pub base:                   cef_base_ref_counted_t,
    pub move_to_first_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    pub move_to_next_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    pub move_to_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_zip_reader_t,
            fileName: *const cef_string_t,
            caseSensitive: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> cef_string_userfree_t
    >,
    pub get_file_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> i64>,
    pub get_file_last_modified: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> cef_basetime_t
    >,
    pub open_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_zip_reader_t,
            password: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    pub close_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    pub read_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_zip_reader_t,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: usize
        ) -> ::std::os::raw::c_int
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> i64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >
}
pub type cef_zip_reader_t = _cef_zip_reader_t;
extern "C" {
    pub fn cef_zip_reader_create(stream: *mut _cef_stream_reader_t) -> *mut cef_zip_reader_t;
}
extern "C" {
    pub fn cef_version_info(entry: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_get_min_log_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_get_vlog_level(
        file_start: *const ::std::os::raw::c_char,
        N: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_log(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char
    );
}
extern "C" {
    pub fn cef_trace_event_instant(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64,
        arg2_name: *const ::std::os::raw::c_char,
        arg2_val: u64
    );
}
extern "C" {
    pub fn cef_trace_event_begin(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64,
        arg2_name: *const ::std::os::raw::c_char,
        arg2_val: u64
    );
}
extern "C" {
    pub fn cef_trace_event_end(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64,
        arg2_name: *const ::std::os::raw::c_char,
        arg2_val: u64
    );
}
extern "C" {
    pub fn cef_trace_counter(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value1_name: *const ::std::os::raw::c_char,
        value1_val: u64,
        value2_name: *const ::std::os::raw::c_char,
        value2_val: u64
    );
}
extern "C" {
    pub fn cef_trace_counter_id(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        id: u64,
        value1_name: *const ::std::os::raw::c_char,
        value1_val: u64,
        value2_name: *const ::std::os::raw::c_char,
        value2_val: u64
    );
}
extern "C" {
    pub fn cef_trace_event_async_begin(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        id: u64,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64,
        arg2_name: *const ::std::os::raw::c_char,
        arg2_val: u64
    );
}
extern "C" {
    pub fn cef_trace_event_async_step_into(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        id: u64,
        step: u64,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64
    );
}
extern "C" {
    pub fn cef_trace_event_async_step_past(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        id: u64,
        step: u64,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64
    );
}
extern "C" {
    pub fn cef_trace_event_async_end(
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        id: u64,
        arg1_name: *const ::std::os::raw::c_char,
        arg1_val: u64,
        arg2_name: *const ::std::os::raw::c_char,
        arg2_val: u64
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8
}
