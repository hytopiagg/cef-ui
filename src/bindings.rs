/* automatically generated by rust-bindgen 0.69.4 */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_VISION: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const OS_MAC: u32 = 1;
pub const OS_MACOSX: u32 = 1;
pub const OS_APPLE: u32 = 1;
pub const OS_POSIX: u32 = 1;
pub const COMPILER_GCC: u32 = 1;
pub const ARCH_CPU_ARM_FAMILY: u32 = 1;
pub const ARCH_CPU_ARM64: u32 = 1;
pub const ARCH_CPU_64_BITS: u32 = 1;
pub const ARCH_CPU_LITTLE_ENDIAN: u32 = 1;
pub const CEF_STRING_TYPE_UTF16: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const kInvalidPlatformThreadId: u32 = 0;
pub const kInvalidPlatformThreadHandle: u32 = 0;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL:  ::std::os::raw::c_longlong
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg:     *mut ::std::os::raw::c_void,
    pub __next:    *mut __darwin_pthread_handler_rec
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig:    ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig:           ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque:        [::std::os::raw::c_char; 8176usize]
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type rsize_t = __darwin_size_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
pub type max_align_t = f64;
pub type char16_t = uint_least16_t;
#[doc = "\n CEF string type definitions. Whomever allocates |str| is responsible for\n providing an appropriate |dtor| implementation that will free the string in\n the same memory space. When reusing an existing string structure make sure\n to call |dtor| for the old value before assigning new |str| and |dtor|\n values. Static strings will have a NULL |dtor| value. Using the below\n functions if you want this managed for you.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_wide_t {
    pub str_:   *mut wchar_t,
    pub length: usize,
    pub dtor:   ::std::option::Option<unsafe extern "C" fn(str_: *mut wchar_t)>
}
#[doc = "\n CEF string type definitions. Whomever allocates |str| is responsible for\n providing an appropriate |dtor| implementation that will free the string in\n the same memory space. When reusing an existing string structure make sure\n to call |dtor| for the old value before assigning new |str| and |dtor|\n values. Static strings will have a NULL |dtor| value. Using the below\n functions if you want this managed for you.\n"]
pub type cef_string_wide_t = _cef_string_wide_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf8_t {
    pub str_:   *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor:   ::std::option::Option<unsafe extern "C" fn(str_: *mut ::std::os::raw::c_char)>
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf16_t {
    pub str_:   *mut char16_t,
    pub length: usize,
    pub dtor:   ::std::option::Option<unsafe extern "C" fn(str_: *mut char16_t)>
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
extern "C" {
    #[doc = "\n These functions set string values. If |copy| is true (1) the value will be\n copied instead of referenced. It is up to the user to properly manage\n the lifespan of references.\n"]
    pub fn cef_string_wide_set(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_wide_t,
        copy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_set(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf8_t,
        copy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n These functions clear string values. The structure itself is not freed.\n"]
    pub fn cef_string_wide_clear(str_: *mut cef_string_wide_t);
}
extern "C" {
    pub fn cef_string_utf8_clear(str_: *mut cef_string_utf8_t);
}
extern "C" {
    pub fn cef_string_utf16_clear(str_: *mut cef_string_utf16_t);
}
extern "C" {
    #[doc = "\n These functions compare two string values with the same results as strcmp().\n"]
    pub fn cef_string_wide_cmp(
        str1: *const cef_string_wide_t,
        str2: *const cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_cmp(
        str1: *const cef_string_utf8_t,
        str2: *const cef_string_utf8_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t,
        str2: *const cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n These functions convert between UTF-8, -16, and -32 strings. They are\n potentially slow so unnecessary conversions should be avoided. The best\n possible result will always be written to |output| with the boolean return\n value indicating whether the conversion is 100% valid.\n"]
    pub fn cef_string_wide_to_utf8(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_utf8_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_wide(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf16(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_wide(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf8_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n These functions convert an ASCII string, typically a hardcoded constant, to\n a Wide/UTF16 string. Use instead of the UTF8 conversion routines if you know\n the string is ASCII.\n"]
    pub fn cef_string_ascii_to_wide(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_wide_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
#[doc = "\n It is sometimes necessary for the system to allocate string structures with\n the expectation that the user will free them. The userfree types act as a\n hint that the user is responsible for freeing the structure.\n"]
pub type cef_string_userfree_wide_t = *mut cef_string_wide_t;
pub type cef_string_userfree_utf8_t = *mut cef_string_utf8_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    #[doc = "\n These functions allocate a new string structure. They must be freed by\n calling the associated free function.\n"]
    pub fn cef_string_userfree_wide_alloc() -> cef_string_userfree_wide_t;
}
extern "C" {
    pub fn cef_string_userfree_utf8_alloc() -> cef_string_userfree_utf8_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    #[doc = "\n These functions free the string structure allocated by the associated\n alloc function. Any string contents will first be cleared.\n"]
    pub fn cef_string_userfree_wide_free(str_: cef_string_userfree_wide_t);
}
extern "C" {
    pub fn cef_string_userfree_utf8_free(str_: cef_string_userfree_utf8_t);
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str_: cef_string_userfree_utf16_t);
}
extern "C" {
    #[doc = "\n These functions convert utf16 string case using the current ICU locale. This\n may change the length of the string in some cases.\n"]
    pub fn cef_string_utf16_to_lower(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16_t,
        src_len: usize,
        output: *mut cef_string_utf16_t
    ) -> ::std::os::raw::c_int;
}
pub type cef_char_t = char16_t;
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_list_t {
    _unused: [u8; 0]
}
#[doc = "\n CEF string maps are a set of key/value string pairs.\n"]
pub type cef_string_list_t = *mut _cef_string_list_t;
extern "C" {
    #[doc = "\n Allocate a new string map.\n"]
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    #[doc = "\n Return the number of elements in the string list.\n"]
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    #[doc = "\n Retrieve the value at the specified zero-based string list index. Returns\n true (1) if the value was successfully retrieved.\n"]
    pub fn cef_string_list_value(
        list: cef_string_list_t,
        index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Append a new value at the end of the string list.\n"]
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
extern "C" {
    #[doc = "\n Clear the string list.\n"]
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    #[doc = "\n Free the string list.\n"]
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    #[doc = "\n Creates a copy of an existing string list.\n"]
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_map_t {
    _unused: [u8; 0]
}
#[doc = "\n CEF string maps are a set of key/value string pairs.\n"]
pub type cef_string_map_t = *mut _cef_string_map_t;
extern "C" {
    #[doc = "\n Allocate a new string map.\n"]
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    #[doc = "\n Return the number of elements in the string map.\n"]
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    #[doc = "\n Return the value assigned to the specified key.\n"]
    pub fn cef_string_map_find(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Return the key at the specified zero-based string map index.\n"]
    pub fn cef_string_map_key(
        map: cef_string_map_t,
        index: usize,
        key: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Return the value at the specified zero-based string map index.\n"]
    pub fn cef_string_map_value(
        map: cef_string_map_t,
        index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Append a new key/value pair at the end of the string map. If the key exists,\n overwrite the existing value with a new value w/o changing the pair order.\n"]
    pub fn cef_string_map_append(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *const cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Clear the string map.\n"]
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    #[doc = "\n Free the string map.\n"]
    pub fn cef_string_map_free(map: cef_string_map_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_multimap_t {
    _unused: [u8; 0]
}
#[doc = "\n CEF string multimaps are a set of key/value string pairs.\n More than one value can be assigned to a single key.\n"]
pub type cef_string_multimap_t = *mut _cef_string_multimap_t;
extern "C" {
    #[doc = "\n Allocate a new string multimap.\n"]
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
extern "C" {
    #[doc = "\n Return the number of elements in the string multimap.\n"]
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
extern "C" {
    #[doc = "\n Return the number of values with the specified key.\n"]
    pub fn cef_string_multimap_find_count(
        map: cef_string_multimap_t,
        key: *const cef_string_t
    ) -> usize;
}
extern "C" {
    #[doc = "\n Return the value_index-th value with the specified key.\n"]
    pub fn cef_string_multimap_enumerate(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value_index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Return the key at the specified zero-based string multimap index.\n"]
    pub fn cef_string_multimap_key(
        map: cef_string_multimap_t,
        index: usize,
        key: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Return the value at the specified zero-based string multimap index.\n"]
    pub fn cef_string_multimap_value(
        map: cef_string_multimap_t,
        index: usize,
        value: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Append a new key/value pair at the end of the string multimap.\n"]
    pub fn cef_string_multimap_append(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value: *const cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Clear the string multimap.\n"]
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
extern "C" {
    #[doc = "\n Free the string multimap.\n"]
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec:  __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec:    ::std::os::raw::c_int,
    pub tm_min:    ::std::os::raw::c_int,
    pub tm_hour:   ::std::os::raw::c_int,
    pub tm_mday:   ::std::os::raw::c_int,
    pub tm_mon:    ::std::os::raw::c_int,
    pub tm_year:   ::std::os::raw::c_int,
    pub tm_wday:   ::std::os::raw::c_int,
    pub tm_yday:   ::std::os::raw::c_int,
    pub tm_isdst:  ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone:   *mut ::std::os::raw::c_char
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[doc = "\n Represents a wall clock time in UTC. Values are not guaranteed to be\n monotonically non-decreasing and are subject to large amounts of skew.\n Time is stored internally as microseconds since the Windows epoch (1601).\n\n This is equivalent of Chromium `base::Time` (see base/time/time.h).\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_basetime_t {
    pub val: i64
}
#[doc = "\n Represents a wall clock time in UTC. Values are not guaranteed to be\n monotonically non-decreasing and are subject to large amounts of skew.\n Time is stored internally as microseconds since the Windows epoch (1601).\n\n This is equivalent of Chromium `base::Time` (see base/time/time.h).\n"]
pub type cef_basetime_t = _cef_basetime_t;
#[doc = "\n Time information. Values should always be in UTC.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_time_t {
    #[doc = "\n Four or five digit year \"2007\" (1601 to 30827 on Windows, 1970 to 2038 on\n 32-bit POSIX)\n"]
    pub year:         ::std::os::raw::c_int,
    #[doc = "\n 1-based month (values 1 = January, etc.)\n"]
    pub month:        ::std::os::raw::c_int,
    #[doc = "\n 0-based day of week (0 = Sunday, etc.)\n"]
    pub day_of_week:  ::std::os::raw::c_int,
    #[doc = "\n 1-based day of month (1-31)\n"]
    pub day_of_month: ::std::os::raw::c_int,
    #[doc = "\n Hour within the current day (0-23)\n"]
    pub hour:         ::std::os::raw::c_int,
    #[doc = "\n Minute within the current hour (0-59)\n"]
    pub minute:       ::std::os::raw::c_int,
    #[doc = "\n Second within the current minute (0-59 plus leap seconds which may take\n it up to 60).\n"]
    pub second:       ::std::os::raw::c_int,
    #[doc = "\n Milliseconds within the current second (0-999)\n"]
    pub millisecond:  ::std::os::raw::c_int
}
#[doc = "\n Time information. Values should always be in UTC.\n"]
pub type cef_time_t = _cef_time_t;
extern "C" {
    #[doc = "\n Converts cef_time_t to/from time_t. Returns true (1) on success and false\n (0) on failure.\n"]
    pub fn cef_time_to_timet(
        cef_time: *const cef_time_t,
        time: *mut time_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_timet(time: time_t, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Converts cef_time_t to/from a double which is the number of seconds since\n epoch (Jan 1, 1970). Webkit uses this format to represent time. A value of 0\n means \"not initialized\". Returns true (1) on success and false (0) on\n failure.\n"]
    pub fn cef_time_to_doublet(
        cef_time: *const cef_time_t,
        time: *mut f64
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Retrieve the current system time. Returns true (1) on success and false (0)\n on failure.\n"]
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Retrieve the current system time.\n"]
    pub fn cef_basetime_now() -> cef_basetime_t;
}
extern "C" {
    #[doc = "\n Retrieve the delta in milliseconds between two time values. Returns true (1)\n on success and false (0) on failure."]
    pub fn cef_time_delta(
        cef_time1: *const cef_time_t,
        cef_time2: *const cef_time_t,
        delta: *mut ::std::os::raw::c_longlong
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Converts cef_time_t to cef_basetime_t. Returns true (1) on success and\n false (0) on failure.\n"]
    pub fn cef_time_to_basetime(
        from: *const cef_time_t,
        to: *mut cef_basetime_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Converts cef_basetime_t to cef_time_t. Returns true (1) on success and\n false (0) on failure.\n"]
    pub fn cef_time_from_basetime(
        from: cef_basetime_t,
        to: *mut cef_time_t
    ) -> ::std::os::raw::c_int;
}
#[doc = " provided context. However, it may be overridden by other settings. This\n enum should NOT be read directly to determine whether cookies are enabled;\n the client should instead rely on the CookieSettings API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_COOKIES:
    cef_content_setting_types_t = 0;
#[doc = " provided context. However, it may be overridden by other settings. This\n enum should NOT be read directly to determine whether cookies are enabled;\n the client should instead rely on the CookieSettings API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_IMAGES: cef_content_setting_types_t =
    1;
#[doc = " provided context. However, it may be overridden by other settings. This\n enum should NOT be read directly to determine whether cookies are enabled;\n the client should instead rely on the CookieSettings API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_JAVASCRIPT:
    cef_content_setting_types_t = 2;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_POPUPS: cef_content_setting_types_t =
    3;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_GEOLOCATION:
    cef_content_setting_types_t = 4;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NOTIFICATIONS:
    cef_content_setting_types_t = 5;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTO_SELECT_CERTIFICATE:
    cef_content_setting_types_t = 6;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MIXEDSCRIPT:
    cef_content_setting_types_t = 7;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MEDIASTREAM_MIC:
    cef_content_setting_types_t = 8;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MEDIASTREAM_CAMERA:
    cef_content_setting_types_t = 9;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PROTOCOL_HANDLERS:
    cef_content_setting_types_t = 10;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DEPRECATED_PPAPI_BROKER:
    cef_content_setting_types_t = 11;
#[doc = " This setting governs both popups and unwanted redirects like tab-unders\n and framebusting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTOMATIC_DOWNLOADS:
    cef_content_setting_types_t = 12;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MIDI_SYSEX:
    cef_content_setting_types_t = 13;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SSL_CERT_DECISIONS:
    cef_content_setting_types_t = 14;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PROTECTED_MEDIA_IDENTIFIER:
    cef_content_setting_types_t = 15;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_APP_BANNER:
    cef_content_setting_types_t = 16;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SITE_ENGAGEMENT:
    cef_content_setting_types_t = 17;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DURABLE_STORAGE:
    cef_content_setting_types_t = 18;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_USB_CHOOSER_DATA:
    cef_content_setting_types_t = 19;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BLUETOOTH_GUARD:
    cef_content_setting_types_t = 20;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BACKGROUND_SYNC:
    cef_content_setting_types_t = 21;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTOPLAY:
    cef_content_setting_types_t = 22;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_IMPORTANT_SITE_INFO:
    cef_content_setting_types_t = 23;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PERMISSION_AUTOBLOCKER_DATA:
    cef_content_setting_types_t = 24;
#[doc = " Advanced device-specific functions on MIDI devices. MIDI-SysEx\n communications can be used for changing the MIDI device's persistent state\n such as firmware."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ADS: cef_content_setting_types_t =
    25;
#[doc = " Website setting which stores metadata for the subresource filter to aid in\n decisions for whether or not to show the UI."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ADS_DATA:
    cef_content_setting_types_t = 26;
#[doc = " MIDI stands for Musical Instrument Digital Interface. It is a standard\n that allows electronic musical instruments, computers, and other devices\n to communicate with each other."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MIDI: cef_content_setting_types_t =
    27;
#[doc = " This content setting type is for caching password protection service's\n verdicts of each origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PASSWORD_PROTECTION:
    cef_content_setting_types_t = 28;
#[doc = " Website setting which stores engagement data for media related to a\n specific origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MEDIA_ENGAGEMENT:
    cef_content_setting_types_t = 29;
#[doc = " Content setting which stores whether or not the site can play audible\n sound. This will not block playback but instead the user will not hear it."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SOUND: cef_content_setting_types_t =
    30;
#[doc = " Website setting which stores the list of client hints that the origin\n requested the browser to remember. The browser is expected to send all\n client hints in the HTTP request headers for every resource requested\n from that origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CLIENT_HINTS:
    cef_content_setting_types_t = 31;
#[doc = " Generic Sensor API covering ambient-light-sensor, accelerometer, gyroscope\n and magnetometer are all mapped to a single content_settings_type.\n Setting for the Generic Sensor API covering ambient-light-sensor,\n accelerometer, gyroscope and magnetometer. These are all mapped to a\n single ContentSettingsType."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SENSORS:
    cef_content_setting_types_t = 32;
#[doc = " Content setting which stores whether or not the user has granted the site\n permission to respond to accessibility events, which can be used to\n provide a custom accessibility experience. Requires explicit user consent\n because some users may not want sites to know they're using assistive\n technology."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ACCESSIBILITY_EVENTS:
    cef_content_setting_types_t = 33;
#[doc = " Used to store whether to allow a website to install a payment handler."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PAYMENT_HANDLER:
    cef_content_setting_types_t = 34;
#[doc = " Content setting which stores whether to allow sites to ask for permission\n to access USB devices. If this is allowed specific device permissions are\n stored under USB_CHOOSER_DATA."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_USB_GUARD:
    cef_content_setting_types_t = 35;
#[doc = " Nothing is stored in this setting at present. Please refer to\n BackgroundFetchPermissionContext for details on how this permission\n is ascertained."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BACKGROUND_FETCH:
    cef_content_setting_types_t = 36;
#[doc = " Website setting which stores the amount of times the user has dismissed\n intent picker UI without explicitly choosing an option."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_INTENT_PICKER_DISPLAY:
    cef_content_setting_types_t = 37;
#[doc = " Used to store whether to allow a website to detect user active/idle state."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_IDLE_DETECTION:
    cef_content_setting_types_t = 38;
#[doc = " Content settings for access to serial ports. The \"guard\" content setting\n stores whether to allow sites to ask for permission to access a port. The\n permissions granted to access particular ports are stored in the \"chooser\n data\" website setting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SERIAL_GUARD:
    cef_content_setting_types_t = 39;
#[doc = " Content settings for access to serial ports. The \"guard\" content setting\n stores whether to allow sites to ask for permission to access a port. The\n permissions granted to access particular ports are stored in the \"chooser\n data\" website setting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SERIAL_CHOOSER_DATA:
    cef_content_setting_types_t = 40;
#[doc = " Nothing is stored in this setting at present. Please refer to\n PeriodicBackgroundSyncPermissionContext for details on how this permission\n is ascertained.\n This content setting is not registered because it does not require access\n to any existing providers."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PERIODIC_BACKGROUND_SYNC:
    cef_content_setting_types_t = 41;
#[doc = " Content setting which stores whether to allow sites to ask for permission\n to do Bluetooth scanning."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BLUETOOTH_SCANNING:
    cef_content_setting_types_t = 42;
#[doc = " Content settings for access to HID devices. The \"guard\" content setting\n stores whether to allow sites to ask for permission to access a device.\n The permissions granted to access particular devices are stored in the\n \"chooser data\" website setting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HID_GUARD:
    cef_content_setting_types_t = 43;
#[doc = " Content settings for access to HID devices. The \"guard\" content setting\n stores whether to allow sites to ask for permission to access a device.\n The permissions granted to access particular devices are stored in the\n \"chooser data\" website setting."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HID_CHOOSER_DATA:
    cef_content_setting_types_t = 44;
#[doc = " Wake Lock API, which has two lock types: screen and system locks.\n Currently, screen locks do not need any additional permission, and system\n locks are always denied while the right UI is worked out."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WAKE_LOCK_SCREEN:
    cef_content_setting_types_t = 45;
#[doc = " Wake Lock API, which has two lock types: screen and system locks.\n Currently, screen locks do not need any additional permission, and system\n locks are always denied while the right UI is worked out."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WAKE_LOCK_SYSTEM:
    cef_content_setting_types_t = 46;
#[doc = " Legacy SameSite cookie behavior. This disables SameSite=Lax-by-default,\n SameSite=None requires Secure, and Schemeful Same-Site, forcing the\n legacy behavior wherein 1) cookies that don't specify SameSite are treated\n as SameSite=None, 2) SameSite=None cookies are not required to be Secure,\n and 3) schemeful same-site is not active.\n\n This will also be used to revert to legacy behavior when future changes\n in cookie handling are introduced."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_LEGACY_COOKIE_ACCESS:
    cef_content_setting_types_t = 47;
#[doc = " Content settings which stores whether to allow sites to ask for permission\n to save changes to an original file selected by the user through the\n File System Access API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_WRITE_GUARD:
    cef_content_setting_types_t = 48;
#[doc = " Used to store whether to allow a website to exchange data with NFC\n devices."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NFC: cef_content_setting_types_t =
    49;
#[doc = " Website setting to store permissions granted to access particular\n Bluetooth devices."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BLUETOOTH_CHOOSER_DATA:
    cef_content_setting_types_t = 50;
#[doc = " Full access to the system clipboard (sanitized read without user gesture,\n and unsanitized read and write with user gesture)."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CLIPBOARD_READ_WRITE:
    cef_content_setting_types_t = 51;
#[doc = " This is special-cased in the permissions layer to always allow, and as\n such doesn't have associated prefs data."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CLIPBOARD_SANITIZED_WRITE:
    cef_content_setting_types_t = 52;
#[doc = " This content setting type is for caching safe browsing real time url\n check's verdicts of each origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SAFE_BROWSING_URL_CHECK_DATA:
    cef_content_setting_types_t = 53;
#[doc = " Used to store whether a site is allowed to request AR or VR sessions with\n the WebXr Device API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_VR: cef_content_setting_types_t = 54;
#[doc = " Used to store whether a site is allowed to request AR or VR sessions with\n the WebXr Device API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AR: cef_content_setting_types_t = 55;
#[doc = " Content setting which stores whether to allow site to open and read files\n and directories selected through the File System Access API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_READ_GUARD:
    cef_content_setting_types_t = 56;
#[doc = " Access to first party storage in a third-party context. Exceptions are\n scoped to the combination of requesting/top-level origin, and are managed\n through the Storage Access API. For the time being, this content setting\n exists in parallel to third-party cookie rules stored in COOKIES."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_STORAGE_ACCESS:
    cef_content_setting_types_t = 57;
#[doc = " Content setting which stores whether to allow a site to control camera\n movements. It does not give access to camera."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CAMERA_PAN_TILT_ZOOM:
    cef_content_setting_types_t = 58;
#[doc = " Content setting for Screen Enumeration and Screen Detail functionality.\n Permits access to detailed multi-screen information, like size and\n position. Permits placing fullscreen and windowed content on specific\n screens. See also: https://w3c.github.io/window-placement"]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WINDOW_MANAGEMENT:
    cef_content_setting_types_t = 59;
#[doc = " Stores whether to allow insecure websites to make private network\n requests.\n See also: https://wicg.github.io/cors-rfc1918\n Set through enterprise policies only."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_INSECURE_PRIVATE_NETWORK:
    cef_content_setting_types_t = 60;
#[doc = " Content setting which stores whether or not a site can access low-level\n locally installed font data using the Local Fonts Access API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_LOCAL_FONTS:
    cef_content_setting_types_t = 61;
#[doc = " Stores per-origin state for permission auto-revocation (for all permission\n types)."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PERMISSION_AUTOREVOCATION_DATA:
    cef_content_setting_types_t = 62;
#[doc = " Stores per-origin state of the most recently selected directory for the\n use by the File System Access API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_LAST_PICKED_DIRECTORY:
    cef_content_setting_types_t = 63;
#[doc = " Controls access to the getDisplayMedia API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DISPLAY_CAPTURE:
    cef_content_setting_types_t = 64;
#[doc = " Website setting to store permissions metadata granted to paths on the\n local file system via the File System Access API.\n |FILE_SYSTEM_WRITE_GUARD| is the corresponding \"guard\" setting. The stored\n data represents valid permission only if\n |FILE_SYSTEM_ACCESS_EXTENDED_PERMISSION| is enabled via user opt-in.\n Otherwise, they represent \"recently granted but revoked permission\", which\n are used to restore the permission."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_CHOOSER_DATA:
    cef_content_setting_types_t = 65;
#[doc = " Stores a grant that allows a relying party to send a request for identity\n information to specified identity providers, potentially through any\n anti-tracking measures that would otherwise prevent it. This setting is\n associated with the relying party's origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_SHARING:
    cef_content_setting_types_t = 66;
#[doc = " Whether to use the v8 optimized JIT for running JavaScript on the page."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_JAVASCRIPT_JIT:
    cef_content_setting_types_t = 67;
#[doc = " Content setting which stores user decisions to allow loading a site over\n HTTP. Entries are added by hostname when a user bypasses the HTTPS-First\n Mode interstitial warning when a site does not support HTTPS. Allowed\n hosts are exact hostname matches -- subdomains of a host on the allowlist\n must be separately allowlisted."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HTTP_ALLOWED:
    cef_content_setting_types_t = 68;
#[doc = " Stores metadata related to form fill, such as e.g. whether user data was\n autofilled on a specific website."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FORMFILL_METADATA:
    cef_content_setting_types_t = 69;
#[doc = " Setting to indicate that there is an active federated sign-in session\n between a specified relying party and a specified identity provider for\n a specified account. When this is present it allows access to session\n management capabilities between the sites. This setting is associated\n with the relying party's origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DEPRECATED_FEDERATED_IDENTITY_ACTIVE_SESSION : cef_content_setting_types_t = 70 ;
#[doc = " Setting to indicate whether Chrome should automatically apply darkening to\n web content."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTO_DARK_WEB_CONTENT:
    cef_content_setting_types_t = 71;
#[doc = " Setting to indicate whether Chrome should request the desktop view of a\n site instead of the mobile one."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REQUEST_DESKTOP_SITE:
    cef_content_setting_types_t = 72;
#[doc = " Setting to indicate whether browser should allow signing into a website\n via the browser FedCM API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_API:
    cef_content_setting_types_t = 73;
#[doc = " Stores notification interactions per origin for the past 90 days.\n Interactions per origin are pre-aggregated over seven-day windows: A\n notification interaction or display is assigned to the last Monday\n midnight in local time."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NOTIFICATION_INTERACTIONS:
    cef_content_setting_types_t = 74;
#[doc = " Website setting which stores the last reduced accept language negotiated\n for a given origin, to be used on future visits to the origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REDUCED_ACCEPT_LANGUAGE:
    cef_content_setting_types_t = 75;
#[doc = " Website setting which is used for NotificationPermissionReviewService to\n store origin blocklist from review notification permissions feature."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NOTIFICATION_PERMISSION_REVIEW:
    cef_content_setting_types_t = 76;
#[doc = " Website setting to store permissions granted to access particular devices\n in private network."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PRIVATE_NETWORK_GUARD:
    cef_content_setting_types_t = 77;
#[doc = " Website setting to store permissions granted to access particular devices\n in private network."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PRIVATE_NETWORK_CHOOSER_DATA:
    cef_content_setting_types_t = 78;
#[doc = " Website setting which stores whether the browser has observed the user\n signing into an identity-provider based on observing the IdP-SignIn-Status\n HTTP header."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_IDENTITY_PROVIDER_SIGNIN_STATUS : cef_content_setting_types_t = 79 ;
#[doc = " Website setting which is used for UnusedSitePermissionsService to\n store revoked permissions of unused sites from unused site permissions\n feature."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REVOKED_UNUSED_SITE_PERMISSIONS:
    cef_content_setting_types_t = 80;
#[doc = " Similar to STORAGE_ACCESS, but applicable at the page-level rather than\n being specific to a frame."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TOP_LEVEL_STORAGE_ACCESS:
    cef_content_setting_types_t = 81;
#[doc = " Setting to indicate whether user has opted in to allowing auto re-authn\n via the FedCM API."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_AUTO_REAUTHN_PERMISSION : cef_content_setting_types_t = 82 ;
#[doc = " Website setting which stores whether the user has explicitly registered\n a website as an identity-provider."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_IDENTITY_PROVIDER_REGISTRATION : cef_content_setting_types_t = 83 ;
#[doc = " Content setting which is used to indicate whether anti-abuse functionality\n should be enabled."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ANTI_ABUSE:
    cef_content_setting_types_t = 84;
#[doc = " Content setting used to indicate whether third-party storage partitioning\n should be enabled."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_THIRD_PARTY_STORAGE_PARTITIONING:
    cef_content_setting_types_t = 85;
#[doc = " Used to indicate whether HTTPS-First Mode is enabled on the hostname."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HTTPS_ENFORCED:
    cef_content_setting_types_t = 86;
#[doc = " Setting for enabling the `getAllScreensMedia` API. Spec link:\n https://github.com/screen-share/capture-all-screens"]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ALL_SCREEN_CAPTURE:
    cef_content_setting_types_t = 87;
#[doc = " Stores per origin metadata for cookie controls."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_COOKIE_CONTROLS_METADATA:
    cef_content_setting_types_t = 88;
#[doc = " Content Setting for 3PC accesses granted via 3PC deprecation trial."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TPCD_SUPPORT:
    cef_content_setting_types_t = 89;
#[doc = " Content setting used to indicate whether entering picture-in-picture\n automatically should be enabled."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTO_PICTURE_IN_PICTURE:
    cef_content_setting_types_t = 90;
#[doc = " Content Setting for 3PC accesses granted by metadata delivered via the\n component updater service. This type will only be used when\n `net::features::kTpcdMetadataGrants` is enabled."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TPCD_METADATA_GRANTS:
    cef_content_setting_types_t = 91;
#[doc = " Whether user has opted into keeping file/directory permissions persistent\n between visits for a given origin. When enabled, permission metadata\n stored under |FILE_SYSTEM_ACCESS_CHOOSER_DATA| can auto-grant incoming\n permission request."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_EXTENDED_PERMISSION : cef_content_setting_types_t = 92 ;
#[doc = " Content Setting for temporary 3PC accesses granted by user behavior\n heuristics."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TPCD_HEURISTICS_GRANTS:
    cef_content_setting_types_t = 93;
#[doc = " Whether the FSA Persistent Permissions restore prompt is eligible to be\n shown to the user, for a given origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_RESTORE_PERMISSION : cef_content_setting_types_t = 94 ;
#[doc = " Whether the FSA Persistent Permissions restore prompt is eligible to be\n shown to the user, for a given origin."]
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NUM_TYPES:
    cef_content_setting_types_t = 95;
#[doc = "\n Supported content setting types. Some types are platform-specific or only\n supported with the Chrome runtime. Should be kept in sync with Chromium's\n ContentSettingsType type.\n"]
pub type cef_content_setting_types_t = ::std::os::raw::c_uint;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_DEFAULT:
    cef_content_setting_values_t = 0;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_ALLOW:
    cef_content_setting_values_t = 1;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_BLOCK:
    cef_content_setting_values_t = 2;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_ASK: cef_content_setting_values_t =
    3;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_SESSION_ONLY:
    cef_content_setting_values_t = 4;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_DETECT_IMPORTANT_CONTENT:
    cef_content_setting_values_t = 5;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_NUM_VALUES:
    cef_content_setting_values_t = 6;
#[doc = "\n Supported content setting values. Should be kept in sync with Chromium's\n ContentSetting type.\n"]
pub type cef_content_setting_values_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing a point.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int
}
#[doc = "\n Structure representing a point.\n"]
pub type cef_point_t = _cef_point_t;
#[doc = "\n Structure representing a rectangle.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_rect_t {
    pub x:      ::std::os::raw::c_int,
    pub y:      ::std::os::raw::c_int,
    pub width:  ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int
}
#[doc = "\n Structure representing a rectangle.\n"]
pub type cef_rect_t = _cef_rect_t;
#[doc = "\n Structure representing a size.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_size_t {
    pub width:  ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int
}
#[doc = "\n Structure representing a size.\n"]
pub type cef_size_t = _cef_size_t;
#[doc = "\n Structure representing insets.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_insets_t {
    pub top:    ::std::os::raw::c_int,
    pub left:   ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right:  ::std::os::raw::c_int
}
#[doc = "\n Structure representing insets.\n"]
pub type cef_insets_t = _cef_insets_t;
#[doc = "\n Structure representing CefExecuteProcess arguments.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_main_args_t {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char
}
#[doc = "\n Structure representing CefExecuteProcess arguments.\n"]
pub type cef_main_args_t = _cef_main_args_t;
#[doc = "\n Class representing window information.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_info_t {
    pub window_name:                  cef_string_t,
    #[doc = "\n Initial window bounds.\n"]
    pub bounds:                       cef_rect_t,
    #[doc = "\n Set to true (1) to create the view initially hidden.\n"]
    pub hidden:                       ::std::os::raw::c_int,
    #[doc = "\n NSView pointer for the parent view.\n"]
    pub parent_view:                  *mut ::std::os::raw::c_void,
    #[doc = "\n Set to true (1) to create the browser using windowless (off-screen)\n rendering. No view will be created for the browser and all rendering will\n occur via the CefRenderHandler interface. The |parent_view| value will be\n used to identify monitor info and to act as the parent view for dialogs,\n context menus, etc. If |parent_view| is not provided then the main screen\n monitor will be used and some functionality that requires a parent view\n may not function correctly. In order to create windowless browsers the\n CefSettings.windowless_rendering_enabled value must be set to true.\n Transparent painting is enabled by default but can be disabled by setting\n CefBrowserSettings.background_color to an opaque value.\n"]
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to enable shared textures for windowless rendering. Only\n valid if windowless_rendering_enabled above is also set to true. Currently\n only supported on Windows (D3D11).\n"]
    pub shared_texture_enabled:       ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to enable the ability to issue BeginFrame from the client\n application.\n"]
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    #[doc = "\n NSView pointer for the new browser view. Only used with windowed\n rendering.\n"]
    pub view:                         *mut ::std::os::raw::c_void
}
#[doc = "\n Class representing window information.\n"]
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = u32;
#[doc = "\n Default logging (currently INFO logging).\n"]
pub const cef_log_severity_t_LOGSEVERITY_DEFAULT: cef_log_severity_t = 0;
#[doc = "\n Verbose logging.\n"]
pub const cef_log_severity_t_LOGSEVERITY_VERBOSE: cef_log_severity_t = 1;
#[doc = "\n DEBUG logging.\n"]
pub const cef_log_severity_t_LOGSEVERITY_DEBUG: cef_log_severity_t = 1;
#[doc = "\n INFO logging.\n"]
pub const cef_log_severity_t_LOGSEVERITY_INFO: cef_log_severity_t = 2;
#[doc = "\n WARNING logging.\n"]
pub const cef_log_severity_t_LOGSEVERITY_WARNING: cef_log_severity_t = 3;
#[doc = "\n ERROR logging.\n"]
pub const cef_log_severity_t_LOGSEVERITY_ERROR: cef_log_severity_t = 4;
#[doc = "\n FATAL logging.\n"]
pub const cef_log_severity_t_LOGSEVERITY_FATAL: cef_log_severity_t = 5;
#[doc = "\n Disable logging to file for all messages, and to stderr for messages with\n severity less than FATAL.\n"]
pub const cef_log_severity_t_LOGSEVERITY_DISABLE: cef_log_severity_t = 99;
#[doc = "\n Log severity levels.\n"]
pub type cef_log_severity_t = ::std::os::raw::c_uint;
#[doc = "\n Prepend the default list of items.\n"]
pub const cef_log_items_t_LOG_ITEMS_DEFAULT: cef_log_items_t = 0;
#[doc = "\n Prepend no items.\n"]
pub const cef_log_items_t_LOG_ITEMS_NONE: cef_log_items_t = 1;
#[doc = "\n Prepend the process ID.\n"]
pub const cef_log_items_t_LOG_ITEMS_FLAG_PROCESS_ID: cef_log_items_t = 2;
#[doc = "\n Prepend the thread ID.\n"]
pub const cef_log_items_t_LOG_ITEMS_FLAG_THREAD_ID: cef_log_items_t = 4;
#[doc = "\n Prepend the timestamp.\n"]
pub const cef_log_items_t_LOG_ITEMS_FLAG_TIME_STAMP: cef_log_items_t = 8;
#[doc = "\n Prepend the tickcount.\n"]
pub const cef_log_items_t_LOG_ITEMS_FLAG_TICK_COUNT: cef_log_items_t = 16;
#[doc = "\n Log items prepended to each log line.\n"]
pub type cef_log_items_t = ::std::os::raw::c_uint;
#[doc = "\n Use the default state for the setting.\n"]
pub const cef_state_t_STATE_DEFAULT: cef_state_t = 0;
#[doc = "\n Enable or allow the setting.\n"]
pub const cef_state_t_STATE_ENABLED: cef_state_t = 1;
#[doc = "\n Disable or disallow the setting.\n"]
pub const cef_state_t_STATE_DISABLED: cef_state_t = 2;
#[doc = "\n Represents the state of a setting.\n"]
pub type cef_state_t = ::std::os::raw::c_uint;
#[doc = "\n Initialization settings. Specify NULL or 0 to get the recommended default\n values. Many of these and other settings can also configured using command-\n line switches.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_settings_t {
    #[doc = "\n Size of this structure.\n"]
    pub size:                                usize,
    #[doc = "\n Set to true (1) to disable the sandbox for sub-processes. See\n cef_sandbox_win.h for requirements to enable the sandbox on Windows. Also\n configurable using the \"no-sandbox\" command-line switch.\n"]
    pub no_sandbox:                          ::std::os::raw::c_int,
    #[doc = "\n The path to a separate executable that will be launched for sub-processes.\n If this value is empty on Windows or Linux then the main process\n executable will be used. If this value is empty on macOS then a helper\n executable must exist at \"Contents/Frameworks/<app>\n Helper.app/Contents/MacOS/<app> Helper\" in the top-level app bundle. See\n the comments on CefExecuteProcess() for details. If this value is\n non-empty then it must be an absolute path. Also configurable using the\n \"browser-subprocess-path\" command-line switch.\n"]
    pub browser_subprocess_path:             cef_string_t,
    #[doc = "\n The path to the CEF framework directory on macOS. If this value is empty\n then the framework must exist at \"Contents/Frameworks/Chromium Embedded\n Framework.framework\" in the top-level app bundle. If this value is\n non-empty then it must be an absolute path. Also configurable using the\n \"framework-dir-path\" command-line switch.\n"]
    pub framework_dir_path:                  cef_string_t,
    #[doc = "\n The path to the main bundle on macOS. If this value is empty then it\n defaults to the top-level app bundle. If this value is non-empty then it\n must be an absolute path. Also configurable using the \"main-bundle-path\"\n command-line switch.\n"]
    pub main_bundle_path:                    cef_string_t,
    #[doc = "\n Set to true (1) to enable use of the Chrome runtime in CEF. This feature\n is considered experimental and is not recommended for most users at this\n time. See issue #2969 for details.\n"]
    pub chrome_runtime:                      ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to have the browser process message loop run in a separate\n thread. If false (0) then the CefDoMessageLoopWork() function must be\n called from your application message loop. This option is only supported\n on Windows and Linux.\n"]
    pub multi_threaded_message_loop:         ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to control browser process main (UI) thread message pump\n scheduling via the CefBrowserProcessHandler::OnScheduleMessagePumpWork()\n callback. This option is recommended for use in combination with the\n CefDoMessageLoopWork() function in cases where the CEF message loop must\n be integrated into an existing application message loop (see additional\n comments and warnings on CefDoMessageLoopWork). Enabling this option is\n not recommended for most users; leave this option disabled and use either\n the CefRunMessageLoop() function or multi_threaded_message_loop if\n possible.\n"]
    pub external_message_pump:               ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to enable windowless (off-screen) rendering support. Do\n not enable this value if the application does not use windowless rendering\n as it may reduce rendering performance on some systems.\n"]
    pub windowless_rendering_enabled:        ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to disable configuration of browser process features using\n standard CEF and Chromium command-line arguments. Configuration can still\n be specified using CEF data structures or via the\n CefApp::OnBeforeCommandLineProcessing() method.\n"]
    pub command_line_args_disabled:          ::std::os::raw::c_int,
    #[doc = "\n The directory where data for the global browser cache will be stored on\n disk. If this value is non-empty then it must be an absolute path that is\n either equal to or a child directory of CefSettings.root_cache_path. If\n this value is empty then browsers will be created in \"incognito mode\"\n where in-memory caches are used for storage and no profile-specific data\n is persisted to disk (installation-specific data will still be persisted\n in root_cache_path). HTML5 databases such as localStorage will only\n persist across sessions if a cache path is specified. Can be overridden\n for individual CefRequestContext instances via the\n CefRequestContextSettings.cache_path value. When using the Chrome runtime\n any child directory value will be ignored and the \"default\" profile (also\n a child directory) will be used instead.\n"]
    pub cache_path:                          cef_string_t,
    #[doc = "\n The root directory for installation-specific data and the parent directory\n for profile-specific data. All CefSettings.cache_path and\n CefRequestContextSettings.cache_path values must have this parent\n directory in common. If this value is empty and CefSettings.cache_path is\n non-empty then it will default to the CefSettings.cache_path value. Any\n non-empty value must be an absolute path. If both values are empty then\n the default platform-specific directory will be used\n (\"~/.config/cef_user_data\" directory on Linux, \"~/Library/Application\n Support/CEF/User Data\" directory on MacOS, \"AppData\\Local\\CEF\\User Data\"\n directory under the user profile directory on Windows). Use of the default\n directory is not recommended in production applications (see below).\n\n Multiple application instances writing to the same root_cache_path\n directory could result in data corruption. A process singleton lock based\n on the root_cache_path value is therefore used to protect against this.\n This singleton behavior applies to all CEF-based applications using\n version 120 or newer. You should customize root_cache_path for your\n application and implement CefBrowserProcessHandler::\n OnAlreadyRunningAppRelaunch, which will then be called on any app relaunch\n with the same root_cache_path value.\n\n Failure to set the root_cache_path value correctly may result in startup\n crashes or other unexpected behaviors (for example, the sandbox blocking\n read/write access to certain files).\n"]
    pub root_cache_path:                     cef_string_t,
    #[doc = "\n To persist session cookies (cookies without an expiry date or validity\n interval) by default when using the global cookie manager set this value\n to true (1). Session cookies are generally intended to be transient and\n most Web browsers do not persist them. A |cache_path| value must also be\n specified to enable this feature. Also configurable using the\n \"persist-session-cookies\" command-line switch. Can be overridden for\n individual CefRequestContext instances via the\n CefRequestContextSettings.persist_session_cookies value.\n"]
    pub persist_session_cookies:             ::std::os::raw::c_int,
    #[doc = "\n To persist user preferences as a JSON file in the cache path directory set\n this value to true (1). A |cache_path| value must also be specified\n to enable this feature. Also configurable using the\n \"persist-user-preferences\" command-line switch. Can be overridden for\n individual CefRequestContext instances via the\n CefRequestContextSettings.persist_user_preferences value.\n"]
    pub persist_user_preferences:            ::std::os::raw::c_int,
    #[doc = "\n Value that will be returned as the User-Agent HTTP header. If empty the\n default User-Agent string will be used. Also configurable using the\n \"user-agent\" command-line switch.\n"]
    pub user_agent:                          cef_string_t,
    #[doc = "\n Value that will be inserted as the product portion of the default\n User-Agent string. If empty the Chromium product version will be used. If\n |userAgent| is specified this value will be ignored. Also configurable\n using the \"user-agent-product\" command-line switch.\n"]
    pub user_agent_product:                  cef_string_t,
    #[doc = "\n The locale string that will be passed to WebKit. If empty the default\n locale of \"en-US\" will be used. This value is ignored on Linux where\n locale is determined using environment variable parsing with the\n precedence order: LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also\n configurable using the \"lang\" command-line switch.\n"]
    pub locale:                              cef_string_t,
    #[doc = "\n The directory and file name to use for the debug log. If empty a default\n log file name and location will be used. On Windows and Linux a\n \"debug.log\" file will be written in the main executable directory. On\n MacOS a \"~/Library/Logs/[app name]_debug.log\" file will be written where\n [app name] is the name of the main app executable. Also configurable using\n the \"log-file\" command-line switch.\n"]
    pub log_file:                            cef_string_t,
    #[doc = "\n The log severity. Only messages of this severity level or higher will be\n logged. When set to DISABLE no messages will be written to the log file,\n but FATAL messages will still be output to stderr. Also configurable using\n the \"log-severity\" command-line switch with a value of \"verbose\", \"info\",\n \"warning\", \"error\", \"fatal\" or \"disable\".\n"]
    pub log_severity:                        cef_log_severity_t,
    #[doc = "\n The log items prepended to each log line. If not set the default log items\n will be used. Also configurable using the \"log-items\" command-line switch\n with a value of \"none\" for no log items, or a comma-delimited list of\n values \"pid\", \"tid\", \"timestamp\" or \"tickcount\" for custom log items.\n"]
    pub log_items:                           cef_log_items_t,
    #[doc = "\n Custom flags that will be used when initializing the V8 JavaScript engine.\n The consequences of using custom flags may not be well tested. Also\n configurable using the \"js-flags\" command-line switch.\n"]
    pub javascript_flags:                    cef_string_t,
    #[doc = "\n The fully qualified path for the resources directory. If this value is\n empty the *.pak files must be located in the module directory on\n Windows/Linux or the app bundle Resources directory on MacOS. If this\n value is non-empty then it must be an absolute path. Also configurable\n using the \"resources-dir-path\" command-line switch.\n"]
    pub resources_dir_path:                  cef_string_t,
    #[doc = "\n The fully qualified path for the locales directory. If this value is empty\n the locales directory must be located in the module directory. If this\n value is non-empty then it must be an absolute path. This value is ignored\n on MacOS where pack files are always loaded from the app bundle Resources\n directory. Also configurable using the \"locales-dir-path\" command-line\n switch.\n"]
    pub locales_dir_path:                    cef_string_t,
    #[doc = "\n Set to true (1) to disable loading of pack files for resources and\n locales. A resource bundle handler must be provided for the browser and\n render processes via CefApp::GetResourceBundleHandler() if loading of pack\n files is disabled. Also configurable using the \"disable-pack-loading\"\n command- line switch.\n"]
    pub pack_loading_disabled:               ::std::os::raw::c_int,
    #[doc = "\n Set to a value between 1024 and 65535 to enable remote debugging on the\n specified port. Also configurable using the \"remote-debugging-port\"\n command-line switch. Remote debugging can be accessed by loading the\n chrome://inspect page in Google Chrome. Port numbers 9222 and 9229 are\n discoverable by default. Other port numbers may need to be configured via\n \"Discover network targets\" on the Devices tab.\n"]
    pub remote_debugging_port:               ::std::os::raw::c_int,
    #[doc = "\n The number of stack trace frames to capture for uncaught exceptions.\n Specify a positive value to enable the\n CefRenderProcessHandler::OnUncaughtException() callback. Specify 0\n (default value) and OnUncaughtException() will not be called. Also\n configurable using the \"uncaught-exception-stack-size\" command-line\n switch.\n"]
    pub uncaught_exception_stack_size:       ::std::os::raw::c_int,
    #[doc = "\n Background color used for the browser before a document is loaded and when\n no document color is specified. The alpha component must be either fully\n opaque (0xFF) or fully transparent (0x00). If the alpha component is fully\n opaque then the RGB components will be used as the background color. If\n the alpha component is fully transparent for a windowed browser then the\n default value of opaque white be used. If the alpha component is fully\n transparent for a windowless (off-screen) browser then transparent\n painting will be enabled.\n"]
    pub background_color:                    cef_color_t,
    #[doc = "\n Comma delimited ordered list of language codes without any whitespace that\n will be used in the \"Accept-Language\" HTTP request header and\n \"navigator.language\" JS attribute. Can be overridden for individual\n CefRequestContext instances via the\n CefRequestContextSettings.accept_language_list value.\n"]
    pub accept_language_list:                cef_string_t,
    #[doc = "\n Comma delimited list of schemes supported by the associated\n CefCookieManager. If |cookieable_schemes_exclude_defaults| is false (0)\n the default schemes (\"http\", \"https\", \"ws\" and \"wss\") will also be\n supported. Not specifying a |cookieable_schemes_list| value and setting\n |cookieable_schemes_exclude_defaults| to true (1) will disable all loading\n and saving of cookies. These settings will only impact the global\n CefRequestContext. Individual CefRequestContext instances can be\n configured via the CefRequestContextSettings.cookieable_schemes_list and\n CefRequestContextSettings.cookieable_schemes_exclude_defaults values.\n"]
    pub cookieable_schemes_list:             cef_string_t,
    pub cookieable_schemes_exclude_defaults: ::std::os::raw::c_int,
    #[doc = "\n Specify an ID to enable Chrome policy management via Platform and OS-user\n policies. On Windows, this is a registry key like\n \"SOFTWARE\\\\Policies\\\\Google\\\\Chrome\". On MacOS, this is a bundle ID like\n \"com.google.Chrome\". On Linux, this is an absolute directory path like\n \"/etc/opt/chrome/policies\". Only supported with the Chrome runtime. See\n https://support.google.com/chrome/a/answer/9037717 for details.\n\n Chrome Browser Cloud Management integration, when enabled via the\n \"enable-chrome-browser-cloud-management\" command-line flag, will also use\n the specified ID. See https://support.google.com/chrome/a/answer/9116814\n for details.\n"]
    pub chrome_policy_id:                    cef_string_t,
    #[doc = "\n Specify an ID for an ICON resource that can be loaded from the main\n executable and used when creating default Chrome windows such as DevTools\n and Task Manager. If unspecified the default Chromium ICON (IDR_MAINFRAME\n [101]) will be loaded from libcef.dll. Only supported with the Chrome\n runtime on Windows.\n"]
    pub chrome_app_icon_id:                  ::std::os::raw::c_int
}
#[doc = "\n Initialization settings. Specify NULL or 0 to get the recommended default\n values. Many of these and other settings can also configured using command-\n line switches.\n"]
pub type cef_settings_t = _cef_settings_t;
#[doc = "\n Request context initialization settings. Specify NULL or 0 to get the\n recommended default values.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_settings_t {
    #[doc = "\n Size of this structure.\n"]
    pub size:                                usize,
    #[doc = "\n The directory where cache data for this request context will be stored on\n disk. If this value is non-empty then it must be an absolute path that is\n either equal to or a child directory of CefSettings.root_cache_path. If\n this value is empty then browsers will be created in \"incognito mode\"\n where in-memory caches are used for storage and no profile-specific data\n is persisted to disk (installation-specific data will still be persisted\n in root_cache_path). HTML5 databases such as localStorage will only\n persist across sessions if a cache path is specified. To share the global\n browser cache and related configuration set this value to match the\n CefSettings.cache_path value.\n"]
    pub cache_path:                          cef_string_t,
    #[doc = "\n To persist session cookies (cookies without an expiry date or validity\n interval) by default when using the global cookie manager set this value\n to true (1). Session cookies are generally intended to be transient and\n most Web browsers do not persist them. Can be set globally using the\n CefSettings.persist_session_cookies value. This value will be ignored if\n |cache_path| is empty or if it matches the CefSettings.cache_path value.\n"]
    pub persist_session_cookies:             ::std::os::raw::c_int,
    #[doc = "\n To persist user preferences as a JSON file in the cache path directory set\n this value to true (1). Can be set globally using the\n CefSettings.persist_user_preferences value. This value will be ignored if\n |cache_path| is empty or if it matches the CefSettings.cache_path value.\n"]
    pub persist_user_preferences:            ::std::os::raw::c_int,
    #[doc = "\n Comma delimited ordered list of language codes without any whitespace that\n will be used in the \"Accept-Language\" HTTP request header and\n \"navigator.language\" JS attribute. Can be set globally using the\n CefSettings.accept_language_list value. If all values are empty then\n \"en-US,en\" will be used. This value will be ignored if |cache_path|\n matches the CefSettings.cache_path value.\n"]
    pub accept_language_list:                cef_string_t,
    #[doc = "\n Comma delimited list of schemes supported by the associated\n CefCookieManager. If |cookieable_schemes_exclude_defaults| is false (0)\n the default schemes (\"http\", \"https\", \"ws\" and \"wss\") will also be\n supported. Not specifying a |cookieable_schemes_list| value and setting\n |cookieable_schemes_exclude_defaults| to true (1) will disable all loading\n and saving of cookies. These values will be ignored if |cache_path|\n matches the CefSettings.cache_path value.\n"]
    pub cookieable_schemes_list:             cef_string_t,
    pub cookieable_schemes_exclude_defaults: ::std::os::raw::c_int
}
#[doc = "\n Request context initialization settings. Specify NULL or 0 to get the\n recommended default values.\n"]
pub type cef_request_context_settings_t = _cef_request_context_settings_t;
#[doc = "\n Browser initialization settings. Specify NULL or 0 to get the recommended\n default values. The consequences of using custom values may not be well\n tested. Many of these and other settings can also configured using command-\n line switches.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_settings_t {
    #[doc = "\n Size of this structure.\n"]
    pub size:                           usize,
    #[doc = "\n The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint\n will be called for a windowless browser. The actual fps may be lower if\n the browser cannot generate frames at the requested rate. The minimum\n value is 1 and the maximum value is 60 (default 30). This value can also\n be changed dynamically via CefBrowserHost::SetWindowlessFrameRate.\n"]
    pub windowless_frame_rate:          ::std::os::raw::c_int,
    #[doc = "\n Font settings.\n"]
    pub standard_font_family:           cef_string_t,
    pub fixed_font_family:              cef_string_t,
    pub serif_font_family:              cef_string_t,
    pub sans_serif_font_family:         cef_string_t,
    pub cursive_font_family:            cef_string_t,
    pub fantasy_font_family:            cef_string_t,
    pub default_font_size:              ::std::os::raw::c_int,
    pub default_fixed_font_size:        ::std::os::raw::c_int,
    pub minimum_font_size:              ::std::os::raw::c_int,
    pub minimum_logical_font_size:      ::std::os::raw::c_int,
    #[doc = "\n Default encoding for Web content. If empty \"ISO-8859-1\" will be used. Also\n configurable using the \"default-encoding\" command-line switch.\n"]
    pub default_encoding:               cef_string_t,
    #[doc = "\n Controls the loading of fonts from remote sources. Also configurable using\n the \"disable-remote-fonts\" command-line switch.\n"]
    pub remote_fonts:                   cef_state_t,
    #[doc = "\n Controls whether JavaScript can be executed. Also configurable using the\n \"disable-javascript\" command-line switch.\n"]
    pub javascript:                     cef_state_t,
    #[doc = "\n Controls whether JavaScript can be used to close windows that were not\n opened via JavaScript. JavaScript can still be used to close windows that\n were opened via JavaScript or that have no back/forward history. Also\n configurable using the \"disable-javascript-close-windows\" command-line\n switch.\n"]
    pub javascript_close_windows:       cef_state_t,
    #[doc = "\n Controls whether JavaScript can access the clipboard. Also configurable\n using the \"disable-javascript-access-clipboard\" command-line switch.\n"]
    pub javascript_access_clipboard:    cef_state_t,
    #[doc = "\n Controls whether DOM pasting is supported in the editor via\n execCommand(\"paste\"). The |javascript_access_clipboard| setting must also\n be enabled. Also configurable using the \"disable-javascript-dom-paste\"\n command-line switch.\n"]
    pub javascript_dom_paste:           cef_state_t,
    #[doc = "\n Controls whether image URLs will be loaded from the network. A cached\n image will still be rendered if requested. Also configurable using the\n \"disable-image-loading\" command-line switch.\n"]
    pub image_loading:                  cef_state_t,
    #[doc = "\n Controls whether standalone images will be shrunk to fit the page. Also\n configurable using the \"image-shrink-standalone-to-fit\" command-line\n switch.\n"]
    pub image_shrink_standalone_to_fit: cef_state_t,
    #[doc = "\n Controls whether text areas can be resized. Also configurable using the\n \"disable-text-area-resize\" command-line switch.\n"]
    pub text_area_resize:               cef_state_t,
    #[doc = "\n Controls whether the tab key can advance focus to links. Also configurable\n using the \"disable-tab-to-links\" command-line switch.\n"]
    pub tab_to_links:                   cef_state_t,
    #[doc = "\n Controls whether local storage can be used. Also configurable using the\n \"disable-local-storage\" command-line switch.\n"]
    pub local_storage:                  cef_state_t,
    #[doc = "\n Controls whether databases can be used. Also configurable using the\n \"disable-databases\" command-line switch.\n"]
    pub databases:                      cef_state_t,
    #[doc = "\n Controls whether WebGL can be used. Note that WebGL requires hardware\n support and may not work on all systems even when enabled. Also\n configurable using the \"disable-webgl\" command-line switch.\n"]
    pub webgl:                          cef_state_t,
    #[doc = "\n Background color used for the browser before a document is loaded and when\n no document color is specified. The alpha component must be either fully\n opaque (0xFF) or fully transparent (0x00). If the alpha component is fully\n opaque then the RGB components will be used as the background color. If\n the alpha component is fully transparent for a windowed browser then the\n CefSettings.background_color value will be used. If the alpha component is\n fully transparent for a windowless (off-screen) browser then transparent\n painting will be enabled.\n"]
    pub background_color:               cef_color_t,
    #[doc = "\n Controls whether the Chrome status bubble will be used. Only supported\n with the Chrome runtime. For details about the status bubble see\n https://www.chromium.org/user-experience/status-bubble/\n"]
    pub chrome_status_bubble:           cef_state_t,
    #[doc = "\n Controls whether the Chrome zoom bubble will be shown when zooming. Only\n supported with the Chrome runtime.\n"]
    pub chrome_zoom_bubble:             cef_state_t
}
#[doc = "\n Browser initialization settings. Specify NULL or 0 to get the recommended\n default values. The consequences of using custom values may not be well\n tested. Many of these and other settings can also configured using command-\n line switches.\n"]
pub type cef_browser_settings_t = _cef_browser_settings_t;
#[doc = "\n Cancel immediately.\n"]
pub const cef_return_value_t_RV_CANCEL: cef_return_value_t = 0;
#[doc = "\n Continue immediately.\n"]
pub const cef_return_value_t_RV_CONTINUE: cef_return_value_t = 1;
#[doc = "\n Continue asynchronously (usually via a callback).\n"]
pub const cef_return_value_t_RV_CONTINUE_ASYNC: cef_return_value_t = 2;
#[doc = "\n Return value types.\n"]
pub type cef_return_value_t = ::std::os::raw::c_uint;
#[doc = "\n URL component parts.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlparts_t {
    #[doc = "\n The complete URL specification.\n"]
    pub spec:     cef_string_t,
    #[doc = "\n Scheme component not including the colon (e.g., \"http\").\n"]
    pub scheme:   cef_string_t,
    #[doc = "\n User name component.\n"]
    pub username: cef_string_t,
    #[doc = "\n Password component.\n"]
    pub password: cef_string_t,
    #[doc = "\n Host component. This may be a hostname, an IPv4 address or an IPv6 literal\n surrounded by square brackets (e.g., \"[2001:db8::1]\").\n"]
    pub host:     cef_string_t,
    #[doc = "\n Port number component.\n"]
    pub port:     cef_string_t,
    #[doc = "\n Origin contains just the scheme, host, and port from a URL. Equivalent to\n clearing any username and password, replacing the path with a slash, and\n clearing everything after that. This value will be empty for non-standard\n URLs.\n"]
    pub origin:   cef_string_t,
    #[doc = "\n Path component including the first slash following the host.\n"]
    pub path:     cef_string_t,
    #[doc = "\n Query string component (i.e., everything following the '?').\n"]
    pub query:    cef_string_t,
    #[doc = "\n Fragment (hash) identifier component (i.e., the string following the '#').\n"]
    pub fragment: cef_string_t
}
#[doc = "\n URL component parts.\n"]
pub type cef_urlparts_t = _cef_urlparts_t;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_LOW: cef_cookie_priority_t = -1;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_MEDIUM: cef_cookie_priority_t = 0;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_HIGH: cef_cookie_priority_t = 1;
#[doc = "\n Cookie priority values.\n"]
pub type cef_cookie_priority_t = ::std::os::raw::c_int;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_UNSPECIFIED: cef_cookie_same_site_t = 0;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_NO_RESTRICTION: cef_cookie_same_site_t = 1;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_LAX_MODE: cef_cookie_same_site_t = 2;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_STRICT_MODE: cef_cookie_same_site_t = 3;
#[doc = "\n Cookie same site values.\n"]
pub type cef_cookie_same_site_t = ::std::os::raw::c_uint;
#[doc = "\n Cookie information.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_t {
    #[doc = "\n The cookie name.\n"]
    pub name:        cef_string_t,
    #[doc = "\n The cookie value.\n"]
    pub value:       cef_string_t,
    #[doc = "\n If |domain| is empty a host cookie will be created instead of a domain\n cookie. Domain cookies are stored with a leading \".\" and are visible to\n sub-domains whereas host cookies are not.\n"]
    pub domain:      cef_string_t,
    #[doc = "\n If |path| is non-empty only URLs at or below the path will get the cookie\n value.\n"]
    pub path:        cef_string_t,
    #[doc = "\n If |secure| is true the cookie will only be sent for HTTPS requests.\n"]
    pub secure:      ::std::os::raw::c_int,
    #[doc = "\n If |httponly| is true the cookie will only be sent for HTTP requests.\n"]
    pub httponly:    ::std::os::raw::c_int,
    #[doc = "\n The cookie creation date. This is automatically populated by the system on\n cookie creation.\n"]
    pub creation:    cef_basetime_t,
    #[doc = "\n The cookie last access date. This is automatically populated by the system\n on access.\n"]
    pub last_access: cef_basetime_t,
    #[doc = "\n The cookie expiration date is only valid if |has_expires| is true.\n"]
    pub has_expires: ::std::os::raw::c_int,
    pub expires:     cef_basetime_t,
    #[doc = "\n Same site.\n"]
    pub same_site:   cef_cookie_same_site_t,
    #[doc = "\n Priority.\n"]
    pub priority:    cef_cookie_priority_t
}
#[doc = "\n Cookie information.\n"]
pub type cef_cookie_t = _cef_cookie_t;
#[doc = "\n Non-zero exit status.\n"]
pub const cef_termination_status_t_TS_ABNORMAL_TERMINATION: cef_termination_status_t = 0;
#[doc = "\n SIGKILL or task manager kill.\n"]
pub const cef_termination_status_t_TS_PROCESS_WAS_KILLED: cef_termination_status_t = 1;
#[doc = "\n Segmentation fault.\n"]
pub const cef_termination_status_t_TS_PROCESS_CRASHED: cef_termination_status_t = 2;
#[doc = "\n Out of memory. Some platforms may use TS_PROCESS_CRASHED instead.\n"]
pub const cef_termination_status_t_TS_PROCESS_OOM: cef_termination_status_t = 3;
#[doc = "\n Process termination status values.\n"]
pub type cef_termination_status_t = ::std::os::raw::c_uint;
#[doc = "\n Current directory.\n"]
pub const cef_path_key_t_PK_DIR_CURRENT: cef_path_key_t = 0;
#[doc = "\n Directory containing PK_FILE_EXE.\n"]
pub const cef_path_key_t_PK_DIR_EXE: cef_path_key_t = 1;
#[doc = "\n Directory containing PK_FILE_MODULE.\n"]
pub const cef_path_key_t_PK_DIR_MODULE: cef_path_key_t = 2;
#[doc = "\n Temporary directory.\n"]
pub const cef_path_key_t_PK_DIR_TEMP: cef_path_key_t = 3;
#[doc = "\n Path and filename of the current executable.\n"]
pub const cef_path_key_t_PK_FILE_EXE: cef_path_key_t = 4;
#[doc = "\n Path and filename of the module containing the CEF code (usually the\n libcef module).\n"]
pub const cef_path_key_t_PK_FILE_MODULE: cef_path_key_t = 5;
#[doc = "\n \"Local Settings\\Application Data\" directory under the user profile\n directory on Windows.\n"]
pub const cef_path_key_t_PK_LOCAL_APP_DATA: cef_path_key_t = 6;
#[doc = "\n \"Application Data\" directory under the user profile directory on Windows\n and \"~/Library/Application Support\" directory on MacOS.\n"]
pub const cef_path_key_t_PK_USER_DATA: cef_path_key_t = 7;
#[doc = "\n Directory containing application resources. Can be configured via\n CefSettings.resources_dir_path.\n"]
pub const cef_path_key_t_PK_DIR_RESOURCES: cef_path_key_t = 8;
#[doc = "\n Path key values.\n"]
pub type cef_path_key_t = ::std::os::raw::c_uint;
pub const cef_storage_type_t_ST_LOCALSTORAGE: cef_storage_type_t = 0;
pub const cef_storage_type_t_ST_SESSIONSTORAGE: cef_storage_type_t = 1;
#[doc = "\n Storage types.\n"]
pub type cef_storage_type_t = ::std::os::raw::c_uint;
pub const cef_errorcode_t_ERR_NONE: cef_errorcode_t = 0;
pub const cef_errorcode_t_ERR_IO_PENDING: cef_errorcode_t = -1;
pub const cef_errorcode_t_ERR_FAILED: cef_errorcode_t = -2;
pub const cef_errorcode_t_ERR_ABORTED: cef_errorcode_t = -3;
pub const cef_errorcode_t_ERR_INVALID_ARGUMENT: cef_errorcode_t = -4;
pub const cef_errorcode_t_ERR_INVALID_HANDLE: cef_errorcode_t = -5;
pub const cef_errorcode_t_ERR_FILE_NOT_FOUND: cef_errorcode_t = -6;
pub const cef_errorcode_t_ERR_TIMED_OUT: cef_errorcode_t = -7;
pub const cef_errorcode_t_ERR_FILE_TOO_BIG: cef_errorcode_t = -8;
pub const cef_errorcode_t_ERR_UNEXPECTED: cef_errorcode_t = -9;
pub const cef_errorcode_t_ERR_ACCESS_DENIED: cef_errorcode_t = -10;
pub const cef_errorcode_t_ERR_NOT_IMPLEMENTED: cef_errorcode_t = -11;
pub const cef_errorcode_t_ERR_INSUFFICIENT_RESOURCES: cef_errorcode_t = -12;
pub const cef_errorcode_t_ERR_OUT_OF_MEMORY: cef_errorcode_t = -13;
pub const cef_errorcode_t_ERR_UPLOAD_FILE_CHANGED: cef_errorcode_t = -14;
pub const cef_errorcode_t_ERR_SOCKET_NOT_CONNECTED: cef_errorcode_t = -15;
pub const cef_errorcode_t_ERR_FILE_EXISTS: cef_errorcode_t = -16;
pub const cef_errorcode_t_ERR_FILE_PATH_TOO_LONG: cef_errorcode_t = -17;
pub const cef_errorcode_t_ERR_FILE_NO_SPACE: cef_errorcode_t = -18;
pub const cef_errorcode_t_ERR_FILE_VIRUS_INFECTED: cef_errorcode_t = -19;
pub const cef_errorcode_t_ERR_BLOCKED_BY_CLIENT: cef_errorcode_t = -20;
pub const cef_errorcode_t_ERR_NETWORK_CHANGED: cef_errorcode_t = -21;
pub const cef_errorcode_t_ERR_BLOCKED_BY_ADMINISTRATOR: cef_errorcode_t = -22;
pub const cef_errorcode_t_ERR_SOCKET_IS_CONNECTED: cef_errorcode_t = -23;
pub const cef_errorcode_t_ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED: cef_errorcode_t = -25;
pub const cef_errorcode_t_ERR_CONTEXT_SHUT_DOWN: cef_errorcode_t = -26;
pub const cef_errorcode_t_ERR_BLOCKED_BY_RESPONSE: cef_errorcode_t = -27;
pub const cef_errorcode_t_ERR_CLEARTEXT_NOT_PERMITTED: cef_errorcode_t = -29;
pub const cef_errorcode_t_ERR_BLOCKED_BY_CSP: cef_errorcode_t = -30;
pub const cef_errorcode_t_ERR_H2_OR_QUIC_REQUIRED: cef_errorcode_t = -31;
pub const cef_errorcode_t_ERR_BLOCKED_BY_ORB: cef_errorcode_t = -32;
pub const cef_errorcode_t_ERR_CONNECTION_CLOSED: cef_errorcode_t = -100;
pub const cef_errorcode_t_ERR_CONNECTION_RESET: cef_errorcode_t = -101;
pub const cef_errorcode_t_ERR_CONNECTION_REFUSED: cef_errorcode_t = -102;
pub const cef_errorcode_t_ERR_CONNECTION_ABORTED: cef_errorcode_t = -103;
pub const cef_errorcode_t_ERR_CONNECTION_FAILED: cef_errorcode_t = -104;
pub const cef_errorcode_t_ERR_NAME_NOT_RESOLVED: cef_errorcode_t = -105;
pub const cef_errorcode_t_ERR_INTERNET_DISCONNECTED: cef_errorcode_t = -106;
pub const cef_errorcode_t_ERR_SSL_PROTOCOL_ERROR: cef_errorcode_t = -107;
pub const cef_errorcode_t_ERR_ADDRESS_INVALID: cef_errorcode_t = -108;
pub const cef_errorcode_t_ERR_ADDRESS_UNREACHABLE: cef_errorcode_t = -109;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_NEEDED: cef_errorcode_t = -110;
pub const cef_errorcode_t_ERR_TUNNEL_CONNECTION_FAILED: cef_errorcode_t = -111;
pub const cef_errorcode_t_ERR_NO_SSL_VERSIONS_ENABLED: cef_errorcode_t = -112;
pub const cef_errorcode_t_ERR_SSL_VERSION_OR_CIPHER_MISMATCH: cef_errorcode_t = -113;
pub const cef_errorcode_t_ERR_SSL_RENEGOTIATION_REQUESTED: cef_errorcode_t = -114;
pub const cef_errorcode_t_ERR_PROXY_AUTH_UNSUPPORTED: cef_errorcode_t = -115;
pub const cef_errorcode_t_ERR_BAD_SSL_CLIENT_AUTH_CERT: cef_errorcode_t = -117;
pub const cef_errorcode_t_ERR_CONNECTION_TIMED_OUT: cef_errorcode_t = -118;
pub const cef_errorcode_t_ERR_HOST_RESOLVER_QUEUE_TOO_LARGE: cef_errorcode_t = -119;
pub const cef_errorcode_t_ERR_SOCKS_CONNECTION_FAILED: cef_errorcode_t = -120;
pub const cef_errorcode_t_ERR_SOCKS_CONNECTION_HOST_UNREACHABLE: cef_errorcode_t = -121;
pub const cef_errorcode_t_ERR_ALPN_NEGOTIATION_FAILED: cef_errorcode_t = -122;
pub const cef_errorcode_t_ERR_SSL_NO_RENEGOTIATION: cef_errorcode_t = -123;
pub const cef_errorcode_t_ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES: cef_errorcode_t = -124;
pub const cef_errorcode_t_ERR_SSL_DECOMPRESSION_FAILURE_ALERT: cef_errorcode_t = -125;
pub const cef_errorcode_t_ERR_SSL_BAD_RECORD_MAC_ALERT: cef_errorcode_t = -126;
pub const cef_errorcode_t_ERR_PROXY_AUTH_REQUESTED: cef_errorcode_t = -127;
pub const cef_errorcode_t_ERR_PROXY_CONNECTION_FAILED: cef_errorcode_t = -130;
pub const cef_errorcode_t_ERR_MANDATORY_PROXY_CONFIGURATION_FAILED: cef_errorcode_t = -131;
pub const cef_errorcode_t_ERR_PRECONNECT_MAX_SOCKET_LIMIT: cef_errorcode_t = -133;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED: cef_errorcode_t = -134;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY: cef_errorcode_t = -135;
pub const cef_errorcode_t_ERR_PROXY_CERTIFICATE_INVALID: cef_errorcode_t = -136;
pub const cef_errorcode_t_ERR_NAME_RESOLUTION_FAILED: cef_errorcode_t = -137;
pub const cef_errorcode_t_ERR_NETWORK_ACCESS_DENIED: cef_errorcode_t = -138;
pub const cef_errorcode_t_ERR_TEMPORARILY_THROTTLED: cef_errorcode_t = -139;
pub const cef_errorcode_t_ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT: cef_errorcode_t = -140;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED: cef_errorcode_t = -141;
pub const cef_errorcode_t_ERR_MSG_TOO_BIG: cef_errorcode_t = -142;
pub const cef_errorcode_t_ERR_WS_PROTOCOL_ERROR: cef_errorcode_t = -145;
pub const cef_errorcode_t_ERR_ADDRESS_IN_USE: cef_errorcode_t = -147;
pub const cef_errorcode_t_ERR_SSL_HANDSHAKE_NOT_COMPLETED: cef_errorcode_t = -148;
pub const cef_errorcode_t_ERR_SSL_BAD_PEER_PUBLIC_KEY: cef_errorcode_t = -149;
pub const cef_errorcode_t_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN: cef_errorcode_t = -150;
pub const cef_errorcode_t_ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED: cef_errorcode_t = -151;
pub const cef_errorcode_t_ERR_SSL_DECRYPT_ERROR_ALERT: cef_errorcode_t = -153;
pub const cef_errorcode_t_ERR_WS_THROTTLE_QUEUE_TOO_LARGE: cef_errorcode_t = -154;
pub const cef_errorcode_t_ERR_SSL_SERVER_CERT_CHANGED: cef_errorcode_t = -156;
pub const cef_errorcode_t_ERR_SSL_UNRECOGNIZED_NAME_ALERT: cef_errorcode_t = -159;
pub const cef_errorcode_t_ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR: cef_errorcode_t = -160;
pub const cef_errorcode_t_ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR: cef_errorcode_t = -161;
pub const cef_errorcode_t_ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE: cef_errorcode_t = -162;
pub const cef_errorcode_t_ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE: cef_errorcode_t = -163;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT: cef_errorcode_t = -164;
pub const cef_errorcode_t_ERR_ICANN_NAME_COLLISION: cef_errorcode_t = -166;
pub const cef_errorcode_t_ERR_SSL_SERVER_CERT_BAD_FORMAT: cef_errorcode_t = -167;
pub const cef_errorcode_t_ERR_CT_STH_PARSING_FAILED: cef_errorcode_t = -168;
pub const cef_errorcode_t_ERR_CT_STH_INCOMPLETE: cef_errorcode_t = -169;
pub const cef_errorcode_t_ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH: cef_errorcode_t = -170;
pub const cef_errorcode_t_ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED: cef_errorcode_t = -171;
pub const cef_errorcode_t_ERR_SSL_OBSOLETE_CIPHER: cef_errorcode_t = -172;
pub const cef_errorcode_t_ERR_WS_UPGRADE: cef_errorcode_t = -173;
pub const cef_errorcode_t_ERR_READ_IF_READY_NOT_IMPLEMENTED: cef_errorcode_t = -174;
pub const cef_errorcode_t_ERR_NO_BUFFER_SPACE: cef_errorcode_t = -176;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS: cef_errorcode_t = -177;
pub const cef_errorcode_t_ERR_EARLY_DATA_REJECTED: cef_errorcode_t = -178;
pub const cef_errorcode_t_ERR_WRONG_VERSION_ON_EARLY_DATA: cef_errorcode_t = -179;
pub const cef_errorcode_t_ERR_TLS13_DOWNGRADE_DETECTED: cef_errorcode_t = -180;
pub const cef_errorcode_t_ERR_SSL_KEY_USAGE_INCOMPATIBLE: cef_errorcode_t = -181;
pub const cef_errorcode_t_ERR_INVALID_ECH_CONFIG_LIST: cef_errorcode_t = -182;
pub const cef_errorcode_t_ERR_ECH_NOT_NEGOTIATED: cef_errorcode_t = -183;
pub const cef_errorcode_t_ERR_ECH_FALLBACK_CERTIFICATE_INVALID: cef_errorcode_t = -184;
pub const cef_errorcode_t_ERR_CERT_COMMON_NAME_INVALID: cef_errorcode_t = -200;
pub const cef_errorcode_t_ERR_CERT_DATE_INVALID: cef_errorcode_t = -201;
pub const cef_errorcode_t_ERR_CERT_AUTHORITY_INVALID: cef_errorcode_t = -202;
pub const cef_errorcode_t_ERR_CERT_CONTAINS_ERRORS: cef_errorcode_t = -203;
pub const cef_errorcode_t_ERR_CERT_NO_REVOCATION_MECHANISM: cef_errorcode_t = -204;
pub const cef_errorcode_t_ERR_CERT_UNABLE_TO_CHECK_REVOCATION: cef_errorcode_t = -205;
pub const cef_errorcode_t_ERR_CERT_REVOKED: cef_errorcode_t = -206;
pub const cef_errorcode_t_ERR_CERT_INVALID: cef_errorcode_t = -207;
pub const cef_errorcode_t_ERR_CERT_WEAK_SIGNATURE_ALGORITHM: cef_errorcode_t = -208;
pub const cef_errorcode_t_ERR_CERT_NON_UNIQUE_NAME: cef_errorcode_t = -210;
pub const cef_errorcode_t_ERR_CERT_WEAK_KEY: cef_errorcode_t = -211;
pub const cef_errorcode_t_ERR_CERT_NAME_CONSTRAINT_VIOLATION: cef_errorcode_t = -212;
pub const cef_errorcode_t_ERR_CERT_VALIDITY_TOO_LONG: cef_errorcode_t = -213;
pub const cef_errorcode_t_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED: cef_errorcode_t = -214;
pub const cef_errorcode_t_ERR_CERT_SYMANTEC_LEGACY: cef_errorcode_t = -215;
pub const cef_errorcode_t_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED: cef_errorcode_t = -217;
pub const cef_errorcode_t_ERR_CERT_END: cef_errorcode_t = -219;
pub const cef_errorcode_t_ERR_INVALID_URL: cef_errorcode_t = -300;
pub const cef_errorcode_t_ERR_DISALLOWED_URL_SCHEME: cef_errorcode_t = -301;
pub const cef_errorcode_t_ERR_UNKNOWN_URL_SCHEME: cef_errorcode_t = -302;
pub const cef_errorcode_t_ERR_INVALID_REDIRECT: cef_errorcode_t = -303;
pub const cef_errorcode_t_ERR_TOO_MANY_REDIRECTS: cef_errorcode_t = -310;
pub const cef_errorcode_t_ERR_UNSAFE_REDIRECT: cef_errorcode_t = -311;
pub const cef_errorcode_t_ERR_UNSAFE_PORT: cef_errorcode_t = -312;
pub const cef_errorcode_t_ERR_INVALID_RESPONSE: cef_errorcode_t = -320;
pub const cef_errorcode_t_ERR_INVALID_CHUNKED_ENCODING: cef_errorcode_t = -321;
pub const cef_errorcode_t_ERR_METHOD_NOT_SUPPORTED: cef_errorcode_t = -322;
pub const cef_errorcode_t_ERR_UNEXPECTED_PROXY_AUTH: cef_errorcode_t = -323;
pub const cef_errorcode_t_ERR_EMPTY_RESPONSE: cef_errorcode_t = -324;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_TOO_BIG: cef_errorcode_t = -325;
pub const cef_errorcode_t_ERR_PAC_SCRIPT_FAILED: cef_errorcode_t = -327;
pub const cef_errorcode_t_ERR_REQUEST_RANGE_NOT_SATISFIABLE: cef_errorcode_t = -328;
pub const cef_errorcode_t_ERR_MALFORMED_IDENTITY: cef_errorcode_t = -329;
pub const cef_errorcode_t_ERR_CONTENT_DECODING_FAILED: cef_errorcode_t = -330;
pub const cef_errorcode_t_ERR_NETWORK_IO_SUSPENDED: cef_errorcode_t = -331;
pub const cef_errorcode_t_ERR_SYN_REPLY_NOT_RECEIVED: cef_errorcode_t = -332;
pub const cef_errorcode_t_ERR_ENCODING_CONVERSION_FAILED: cef_errorcode_t = -333;
pub const cef_errorcode_t_ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT: cef_errorcode_t = -334;
pub const cef_errorcode_t_ERR_NO_SUPPORTED_PROXIES: cef_errorcode_t = -336;
pub const cef_errorcode_t_ERR_HTTP2_PROTOCOL_ERROR: cef_errorcode_t = -337;
pub const cef_errorcode_t_ERR_INVALID_AUTH_CREDENTIALS: cef_errorcode_t = -338;
pub const cef_errorcode_t_ERR_UNSUPPORTED_AUTH_SCHEME: cef_errorcode_t = -339;
pub const cef_errorcode_t_ERR_ENCODING_DETECTION_FAILED: cef_errorcode_t = -340;
pub const cef_errorcode_t_ERR_MISSING_AUTH_CREDENTIALS: cef_errorcode_t = -341;
pub const cef_errorcode_t_ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS: cef_errorcode_t = -342;
pub const cef_errorcode_t_ERR_MISCONFIGURED_AUTH_ENVIRONMENT: cef_errorcode_t = -343;
pub const cef_errorcode_t_ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS: cef_errorcode_t = -344;
pub const cef_errorcode_t_ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN: cef_errorcode_t = -345;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH: cef_errorcode_t = -346;
pub const cef_errorcode_t_ERR_INCOMPLETE_HTTP2_HEADERS: cef_errorcode_t = -347;
pub const cef_errorcode_t_ERR_PAC_NOT_IN_DHCP: cef_errorcode_t = -348;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION: cef_errorcode_t = -349;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION: cef_errorcode_t = -350;
pub const cef_errorcode_t_ERR_HTTP2_SERVER_REFUSED_STREAM: cef_errorcode_t = -351;
pub const cef_errorcode_t_ERR_HTTP2_PING_FAILED: cef_errorcode_t = -352;
pub const cef_errorcode_t_ERR_CONTENT_LENGTH_MISMATCH: cef_errorcode_t = -354;
pub const cef_errorcode_t_ERR_INCOMPLETE_CHUNKED_ENCODING: cef_errorcode_t = -355;
pub const cef_errorcode_t_ERR_QUIC_PROTOCOL_ERROR: cef_errorcode_t = -356;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_TRUNCATED: cef_errorcode_t = -357;
pub const cef_errorcode_t_ERR_QUIC_HANDSHAKE_FAILED: cef_errorcode_t = -358;
pub const cef_errorcode_t_ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY: cef_errorcode_t = -360;
pub const cef_errorcode_t_ERR_HTTP2_FLOW_CONTROL_ERROR: cef_errorcode_t = -361;
pub const cef_errorcode_t_ERR_HTTP2_FRAME_SIZE_ERROR: cef_errorcode_t = -362;
pub const cef_errorcode_t_ERR_HTTP2_COMPRESSION_ERROR: cef_errorcode_t = -363;
pub const cef_errorcode_t_ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION: cef_errorcode_t = -364;
pub const cef_errorcode_t_ERR_HTTP_1_1_REQUIRED: cef_errorcode_t = -365;
pub const cef_errorcode_t_ERR_PROXY_HTTP_1_1_REQUIRED: cef_errorcode_t = -366;
pub const cef_errorcode_t_ERR_PAC_SCRIPT_TERMINATED: cef_errorcode_t = -367;
pub const cef_errorcode_t_ERR_INVALID_HTTP_RESPONSE: cef_errorcode_t = -370;
pub const cef_errorcode_t_ERR_CONTENT_DECODING_INIT_FAILED: cef_errorcode_t = -371;
pub const cef_errorcode_t_ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED: cef_errorcode_t = -372;
pub const cef_errorcode_t_ERR_TOO_MANY_RETRIES: cef_errorcode_t = -375;
pub const cef_errorcode_t_ERR_HTTP2_STREAM_CLOSED: cef_errorcode_t = -376;
pub const cef_errorcode_t_ERR_HTTP_RESPONSE_CODE_FAILURE: cef_errorcode_t = -379;
pub const cef_errorcode_t_ERR_QUIC_CERT_ROOT_NOT_KNOWN: cef_errorcode_t = -380;
pub const cef_errorcode_t_ERR_QUIC_GOAWAY_REQUEST_CAN_BE_RETRIED: cef_errorcode_t = -381;
pub const cef_errorcode_t_ERR_TOO_MANY_ACCEPT_CH_RESTARTS: cef_errorcode_t = -382;
pub const cef_errorcode_t_ERR_INCONSISTENT_IP_ADDRESS_SPACE: cef_errorcode_t = -383;
pub const cef_errorcode_t_ERR_CACHED_IP_ADDRESS_SPACE_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_POLICY:
    cef_errorcode_t = -384;
pub const cef_errorcode_t_ERR_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_CHECKS: cef_errorcode_t = -385;
pub const cef_errorcode_t_ERR_CACHE_MISS: cef_errorcode_t = -400;
pub const cef_errorcode_t_ERR_CACHE_READ_FAILURE: cef_errorcode_t = -401;
pub const cef_errorcode_t_ERR_CACHE_WRITE_FAILURE: cef_errorcode_t = -402;
pub const cef_errorcode_t_ERR_CACHE_OPERATION_NOT_SUPPORTED: cef_errorcode_t = -403;
pub const cef_errorcode_t_ERR_CACHE_OPEN_FAILURE: cef_errorcode_t = -404;
pub const cef_errorcode_t_ERR_CACHE_CREATE_FAILURE: cef_errorcode_t = -405;
pub const cef_errorcode_t_ERR_CACHE_RACE: cef_errorcode_t = -406;
pub const cef_errorcode_t_ERR_CACHE_CHECKSUM_READ_FAILURE: cef_errorcode_t = -407;
pub const cef_errorcode_t_ERR_CACHE_CHECKSUM_MISMATCH: cef_errorcode_t = -408;
pub const cef_errorcode_t_ERR_CACHE_LOCK_TIMEOUT: cef_errorcode_t = -409;
pub const cef_errorcode_t_ERR_CACHE_AUTH_FAILURE_AFTER_READ: cef_errorcode_t = -410;
pub const cef_errorcode_t_ERR_CACHE_ENTRY_NOT_SUITABLE: cef_errorcode_t = -411;
pub const cef_errorcode_t_ERR_CACHE_DOOM_FAILURE: cef_errorcode_t = -412;
pub const cef_errorcode_t_ERR_CACHE_OPEN_OR_CREATE_FAILURE: cef_errorcode_t = -413;
pub const cef_errorcode_t_ERR_INSECURE_RESPONSE: cef_errorcode_t = -501;
pub const cef_errorcode_t_ERR_NO_PRIVATE_KEY_FOR_CERT: cef_errorcode_t = -502;
pub const cef_errorcode_t_ERR_ADD_USER_CERT_FAILED: cef_errorcode_t = -503;
pub const cef_errorcode_t_ERR_INVALID_SIGNED_EXCHANGE: cef_errorcode_t = -504;
pub const cef_errorcode_t_ERR_INVALID_WEB_BUNDLE: cef_errorcode_t = -505;
pub const cef_errorcode_t_ERR_TRUST_TOKEN_OPERATION_FAILED: cef_errorcode_t = -506;
pub const cef_errorcode_t_ERR_TRUST_TOKEN_OPERATION_SUCCESS_WITHOUT_SENDING_REQUEST:
    cef_errorcode_t = -507;
pub const cef_errorcode_t_ERR_FTP_FAILED: cef_errorcode_t = -601;
pub const cef_errorcode_t_ERR_FTP_SERVICE_UNAVAILABLE: cef_errorcode_t = -602;
pub const cef_errorcode_t_ERR_FTP_TRANSFER_ABORTED: cef_errorcode_t = -603;
pub const cef_errorcode_t_ERR_FTP_FILE_BUSY: cef_errorcode_t = -604;
pub const cef_errorcode_t_ERR_FTP_SYNTAX_ERROR: cef_errorcode_t = -605;
pub const cef_errorcode_t_ERR_FTP_COMMAND_NOT_SUPPORTED: cef_errorcode_t = -606;
pub const cef_errorcode_t_ERR_FTP_BAD_COMMAND_SEQUENCE: cef_errorcode_t = -607;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_BAD_PASSWORD: cef_errorcode_t = -701;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_FAILED: cef_errorcode_t = -702;
pub const cef_errorcode_t_ERR_IMPORT_CA_CERT_NOT_CA: cef_errorcode_t = -703;
pub const cef_errorcode_t_ERR_IMPORT_CERT_ALREADY_EXISTS: cef_errorcode_t = -704;
pub const cef_errorcode_t_ERR_IMPORT_CA_CERT_FAILED: cef_errorcode_t = -705;
pub const cef_errorcode_t_ERR_IMPORT_SERVER_CERT_FAILED: cef_errorcode_t = -706;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_INVALID_MAC: cef_errorcode_t = -707;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_INVALID_FILE: cef_errorcode_t = -708;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_UNSUPPORTED: cef_errorcode_t = -709;
pub const cef_errorcode_t_ERR_KEY_GENERATION_FAILED: cef_errorcode_t = -710;
pub const cef_errorcode_t_ERR_PRIVATE_KEY_EXPORT_FAILED: cef_errorcode_t = -712;
pub const cef_errorcode_t_ERR_SELF_SIGNED_CERT_GENERATION_FAILED: cef_errorcode_t = -713;
pub const cef_errorcode_t_ERR_CERT_DATABASE_CHANGED: cef_errorcode_t = -714;
pub const cef_errorcode_t_ERR_CERT_VERIFIER_CHANGED: cef_errorcode_t = -716;
pub const cef_errorcode_t_ERR_DNS_MALFORMED_RESPONSE: cef_errorcode_t = -800;
pub const cef_errorcode_t_ERR_DNS_SERVER_REQUIRES_TCP: cef_errorcode_t = -801;
pub const cef_errorcode_t_ERR_DNS_SERVER_FAILED: cef_errorcode_t = -802;
pub const cef_errorcode_t_ERR_DNS_TIMED_OUT: cef_errorcode_t = -803;
pub const cef_errorcode_t_ERR_DNS_CACHE_MISS: cef_errorcode_t = -804;
pub const cef_errorcode_t_ERR_DNS_SEARCH_EMPTY: cef_errorcode_t = -805;
pub const cef_errorcode_t_ERR_DNS_SORT_ERROR: cef_errorcode_t = -806;
pub const cef_errorcode_t_ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED: cef_errorcode_t =
    -808;
pub const cef_errorcode_t_ERR_DNS_NAME_HTTPS_ONLY: cef_errorcode_t = -809;
pub const cef_errorcode_t_ERR_DNS_REQUEST_CANCELLED: cef_errorcode_t = -810;
pub const cef_errorcode_t_ERR_DNS_NO_MATCHING_SUPPORTED_ALPN: cef_errorcode_t = -811;
pub const cef_errorcode_t_ERR_DICTIONARY_LOAD_FAILED: cef_errorcode_t = -812;
#[doc = "\n Supported error code values. For the complete list of error values see\n \"include/base/internal/cef_net_error_list.h\".\n"]
pub type cef_errorcode_t = ::std::os::raw::c_int;
pub const cef_cert_status_t_CERT_STATUS_NONE: cef_cert_status_t = 0;
pub const cef_cert_status_t_CERT_STATUS_COMMON_NAME_INVALID: cef_cert_status_t = 1;
pub const cef_cert_status_t_CERT_STATUS_DATE_INVALID: cef_cert_status_t = 2;
pub const cef_cert_status_t_CERT_STATUS_AUTHORITY_INVALID: cef_cert_status_t = 4;
pub const cef_cert_status_t_CERT_STATUS_NO_REVOCATION_MECHANISM: cef_cert_status_t = 16;
pub const cef_cert_status_t_CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: cef_cert_status_t = 32;
pub const cef_cert_status_t_CERT_STATUS_REVOKED: cef_cert_status_t = 64;
pub const cef_cert_status_t_CERT_STATUS_INVALID: cef_cert_status_t = 128;
pub const cef_cert_status_t_CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: cef_cert_status_t = 256;
pub const cef_cert_status_t_CERT_STATUS_NON_UNIQUE_NAME: cef_cert_status_t = 1024;
pub const cef_cert_status_t_CERT_STATUS_WEAK_KEY: cef_cert_status_t = 2048;
pub const cef_cert_status_t_CERT_STATUS_PINNED_KEY_MISSING: cef_cert_status_t = 8192;
pub const cef_cert_status_t_CERT_STATUS_NAME_CONSTRAINT_VIOLATION: cef_cert_status_t = 16384;
pub const cef_cert_status_t_CERT_STATUS_VALIDITY_TOO_LONG: cef_cert_status_t = 32768;
pub const cef_cert_status_t_CERT_STATUS_IS_EV: cef_cert_status_t = 65536;
pub const cef_cert_status_t_CERT_STATUS_REV_CHECKING_ENABLED: cef_cert_status_t = 131072;
pub const cef_cert_status_t_CERT_STATUS_SHA1_SIGNATURE_PRESENT: cef_cert_status_t = 524288;
pub const cef_cert_status_t_CERT_STATUS_CT_COMPLIANCE_FAILED: cef_cert_status_t = 1048576;
#[doc = "\n Supported certificate status code values. See net\\cert\\cert_status_flags.h\n for more information. CERT_STATUS_NONE is new in CEF because we use an\n enum while cert_status_flags.h uses a typedef and static const variables.\n"]
pub type cef_cert_status_t = ::std::os::raw::c_uint;
pub const cef_window_open_disposition_t_CEF_WOD_UNKNOWN: cef_window_open_disposition_t = 0;
#[doc = "\n Current tab. This is the default in most cases.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_CURRENT_TAB: cef_window_open_disposition_t = 1;
#[doc = "\n Indicates that only one tab with the url should exist in the same window.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_SINGLETON_TAB: cef_window_open_disposition_t = 2;
#[doc = "\n Shift key + Middle mouse button or meta/ctrl key while clicking.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_NEW_FOREGROUND_TAB: cef_window_open_disposition_t =
    3;
#[doc = "\n Middle mouse button or meta/ctrl key while clicking.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_NEW_BACKGROUND_TAB: cef_window_open_disposition_t =
    4;
#[doc = "\n New popup window.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_NEW_POPUP: cef_window_open_disposition_t = 5;
#[doc = "\n Shift key while clicking.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_NEW_WINDOW: cef_window_open_disposition_t = 6;
#[doc = "\n Alt key while clicking.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_SAVE_TO_DISK: cef_window_open_disposition_t = 7;
#[doc = "\n New off-the-record (incognito) window.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_OFF_THE_RECORD: cef_window_open_disposition_t = 8;
#[doc = "\n Special case error condition from the renderer.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_IGNORE_ACTION: cef_window_open_disposition_t = 9;
#[doc = "\n Activates an existing tab containing the url, rather than navigating.\n This is similar to SINGLETON_TAB, but searches across all windows from\n the current profile and anonymity (instead of just the current one);\n closes the current tab on switching if the current tab was the NTP with\n no session history; and behaves like CURRENT_TAB instead of\n NEW_FOREGROUND_TAB when no existing tab is found.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_SWITCH_TO_TAB: cef_window_open_disposition_t = 10;
#[doc = "\n Creates a new document picture-in-picture window showing a child WebView.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_NEW_PICTURE_IN_PICTURE:
    cef_window_open_disposition_t = 11;
#[doc = "\n Creates a new document picture-in-picture window showing a child WebView.\n"]
pub const cef_window_open_disposition_t_CEF_WOD_MAX_VALUE: cef_window_open_disposition_t = 11;
#[doc = "\n The manner in which a link click should be opened. These constants match\n their equivalents in Chromium's window_open_disposition.h and should not be\n renumbered.\n"]
pub type cef_window_open_disposition_t = ::std::os::raw::c_uint;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_NONE: cef_drag_operations_mask_t = 0;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_COPY: cef_drag_operations_mask_t = 1;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_LINK: cef_drag_operations_mask_t = 2;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_GENERIC: cef_drag_operations_mask_t = 4;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_PRIVATE: cef_drag_operations_mask_t = 8;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_MOVE: cef_drag_operations_mask_t = 16;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_DELETE: cef_drag_operations_mask_t = 32;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_EVERY: cef_drag_operations_mask_t = 4294967295;
#[doc = "\n \"Verb\" of a drag-and-drop operation as negotiated between the source and\n destination. These constants match their equivalents in WebCore's\n DragActions.h and should not be renumbered.\n"]
pub type cef_drag_operations_mask_t = ::std::os::raw::c_uint;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_DEFAULT: cef_text_input_mode_t = 0;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_NONE: cef_text_input_mode_t = 1;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_TEXT: cef_text_input_mode_t = 2;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_TEL: cef_text_input_mode_t = 3;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_URL: cef_text_input_mode_t = 4;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_EMAIL: cef_text_input_mode_t = 5;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_NUMERIC: cef_text_input_mode_t = 6;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_DECIMAL: cef_text_input_mode_t = 7;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_SEARCH: cef_text_input_mode_t = 8;
pub const cef_text_input_mode_t_CEF_TEXT_INPUT_MODE_MAX: cef_text_input_mode_t = 8;
#[doc = "\n Input mode of a virtual keyboard. These constants match their equivalents\n in Chromium's text_input_mode.h and should not be renumbered.\n See https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute\n"]
pub type cef_text_input_mode_t = ::std::os::raw::c_uint;
pub const cef_v8_accesscontrol_t_V8_ACCESS_CONTROL_DEFAULT: cef_v8_accesscontrol_t = 0;
pub const cef_v8_accesscontrol_t_V8_ACCESS_CONTROL_ALL_CAN_READ: cef_v8_accesscontrol_t = 1;
pub const cef_v8_accesscontrol_t_V8_ACCESS_CONTROL_ALL_CAN_WRITE: cef_v8_accesscontrol_t = 2;
pub const cef_v8_accesscontrol_t_V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING: cef_v8_accesscontrol_t =
    4;
#[doc = "\n V8 access control values.\n"]
pub type cef_v8_accesscontrol_t = ::std::os::raw::c_uint;
#[doc = "\n Writeable, Enumerable, Configurable\n"]
pub const cef_v8_propertyattribute_t_V8_PROPERTY_ATTRIBUTE_NONE: cef_v8_propertyattribute_t = 0;
#[doc = "\n Not writeable\n"]
pub const cef_v8_propertyattribute_t_V8_PROPERTY_ATTRIBUTE_READONLY: cef_v8_propertyattribute_t = 1;
#[doc = "\n Not enumerable\n"]
pub const cef_v8_propertyattribute_t_V8_PROPERTY_ATTRIBUTE_DONTENUM: cef_v8_propertyattribute_t = 2;
#[doc = "\n Not configurable\n"]
pub const cef_v8_propertyattribute_t_V8_PROPERTY_ATTRIBUTE_DONTDELETE: cef_v8_propertyattribute_t =
    4;
#[doc = "\n V8 property attribute values.\n"]
pub type cef_v8_propertyattribute_t = ::std::os::raw::c_uint;
pub const cef_postdataelement_type_t_PDE_TYPE_EMPTY: cef_postdataelement_type_t = 0;
pub const cef_postdataelement_type_t_PDE_TYPE_BYTES: cef_postdataelement_type_t = 1;
pub const cef_postdataelement_type_t_PDE_TYPE_FILE: cef_postdataelement_type_t = 2;
#[doc = "\n Post data elements may represent either bytes or files.\n"]
pub type cef_postdataelement_type_t = ::std::os::raw::c_uint;
#[doc = "\n Top level page.\n"]
pub const cef_resource_type_t_RT_MAIN_FRAME: cef_resource_type_t = 0;
#[doc = "\n Frame or iframe.\n"]
pub const cef_resource_type_t_RT_SUB_FRAME: cef_resource_type_t = 1;
#[doc = "\n CSS stylesheet.\n"]
pub const cef_resource_type_t_RT_STYLESHEET: cef_resource_type_t = 2;
#[doc = "\n External script.\n"]
pub const cef_resource_type_t_RT_SCRIPT: cef_resource_type_t = 3;
#[doc = "\n Image (jpg/gif/png/etc).\n"]
pub const cef_resource_type_t_RT_IMAGE: cef_resource_type_t = 4;
#[doc = "\n Font.\n"]
pub const cef_resource_type_t_RT_FONT_RESOURCE: cef_resource_type_t = 5;
#[doc = "\n Some other subresource. This is the default type if the actual type is\n unknown.\n"]
pub const cef_resource_type_t_RT_SUB_RESOURCE: cef_resource_type_t = 6;
#[doc = "\n Object (or embed) tag for a plugin, or a resource that a plugin requested.\n"]
pub const cef_resource_type_t_RT_OBJECT: cef_resource_type_t = 7;
#[doc = "\n Media resource.\n"]
pub const cef_resource_type_t_RT_MEDIA: cef_resource_type_t = 8;
#[doc = "\n Main resource of a dedicated worker.\n"]
pub const cef_resource_type_t_RT_WORKER: cef_resource_type_t = 9;
#[doc = "\n Main resource of a shared worker.\n"]
pub const cef_resource_type_t_RT_SHARED_WORKER: cef_resource_type_t = 10;
#[doc = "\n Explicitly requested prefetch.\n"]
pub const cef_resource_type_t_RT_PREFETCH: cef_resource_type_t = 11;
#[doc = "\n Favicon.\n"]
pub const cef_resource_type_t_RT_FAVICON: cef_resource_type_t = 12;
#[doc = "\n XMLHttpRequest.\n"]
pub const cef_resource_type_t_RT_XHR: cef_resource_type_t = 13;
#[doc = "\n A request for a \"<ping>\".\n"]
pub const cef_resource_type_t_RT_PING: cef_resource_type_t = 14;
#[doc = "\n Main resource of a service worker.\n"]
pub const cef_resource_type_t_RT_SERVICE_WORKER: cef_resource_type_t = 15;
#[doc = "\n A report of Content Security Policy violations.\n"]
pub const cef_resource_type_t_RT_CSP_REPORT: cef_resource_type_t = 16;
#[doc = "\n A resource that a plugin requested.\n"]
pub const cef_resource_type_t_RT_PLUGIN_RESOURCE: cef_resource_type_t = 17;
#[doc = "\n A main-frame service worker navigation preload request.\n"]
pub const cef_resource_type_t_RT_NAVIGATION_PRELOAD_MAIN_FRAME: cef_resource_type_t = 19;
#[doc = "\n A sub-frame service worker navigation preload request.\n"]
pub const cef_resource_type_t_RT_NAVIGATION_PRELOAD_SUB_FRAME: cef_resource_type_t = 20;
#[doc = "\n Resource type for a request. These constants match their equivalents in\n Chromium's ResourceType and should not be renumbered.\n"]
pub type cef_resource_type_t = ::std::os::raw::c_uint;
#[doc = "\n Source is a link click or the JavaScript window.open function. This is\n also the default value for requests like sub-resource loads that are not\n navigations.\n"]
pub const cef_transition_type_t_TT_LINK: cef_transition_type_t = 0;
#[doc = "\n Source is some other \"explicit\" navigation. This is the default value for\n navigations where the actual type is unknown. See also\n TT_DIRECT_LOAD_FLAG.\n"]
pub const cef_transition_type_t_TT_EXPLICIT: cef_transition_type_t = 1;
#[doc = "\n User got to this page through a suggestion in the UI (for example, via the\n destinations page). Chrome runtime only.\n"]
pub const cef_transition_type_t_TT_AUTO_BOOKMARK: cef_transition_type_t = 2;
#[doc = "\n Source is a subframe navigation. This is any content that is automatically\n loaded in a non-toplevel frame. For example, if a page consists of several\n frames containing ads, those ad URLs will have this transition type.\n The user may not even realize the content in these pages is a separate\n frame, so may not care about the URL.\n"]
pub const cef_transition_type_t_TT_AUTO_SUBFRAME: cef_transition_type_t = 3;
#[doc = "\n Source is a subframe navigation explicitly requested by the user that will\n generate new navigation entries in the back/forward list. These are\n probably more important than frames that were automatically loaded in\n the background because the user probably cares about the fact that this\n link was loaded.\n"]
pub const cef_transition_type_t_TT_MANUAL_SUBFRAME: cef_transition_type_t = 4;
#[doc = "\n User got to this page by typing in the URL bar and selecting an entry\n that did not look like a URL.  For example, a match might have the URL\n of a Google search result page, but appear like \"Search Google for ...\".\n These are not quite the same as EXPLICIT navigations because the user\n didn't type or see the destination URL. Chrome runtime only.\n See also TT_KEYWORD.\n"]
pub const cef_transition_type_t_TT_GENERATED: cef_transition_type_t = 5;
#[doc = "\n This is a toplevel navigation. This is any content that is automatically\n loaded in a toplevel frame.  For example, opening a tab to show the ASH\n screen saver, opening the devtools window, opening the NTP after the safe\n browsing warning, opening web-based dialog boxes are examples of\n AUTO_TOPLEVEL navigations. Chrome runtime only.\n"]
pub const cef_transition_type_t_TT_AUTO_TOPLEVEL: cef_transition_type_t = 6;
#[doc = "\n Source is a form submission by the user. NOTE: In some situations\n submitting a form does not result in this transition type. This can happen\n if the form uses a script to submit the contents.\n"]
pub const cef_transition_type_t_TT_FORM_SUBMIT: cef_transition_type_t = 7;
#[doc = "\n Source is a \"reload\" of the page via the Reload function or by re-visiting\n the same URL. NOTE: This is distinct from the concept of whether a\n particular load uses \"reload semantics\" (i.e. bypasses cached data).\n"]
pub const cef_transition_type_t_TT_RELOAD: cef_transition_type_t = 8;
#[doc = "\n The url was generated from a replaceable keyword other than the default\n search provider. If the user types a keyword (which also applies to\n tab-to-search) in the omnibox this qualifier is applied to the transition\n type of the generated url. TemplateURLModel then may generate an\n additional visit with a transition type of TT_KEYWORD_GENERATED against\n the url 'http://' + keyword. For example, if you do a tab-to-search\n against wikipedia the generated url has a transition qualifer of\n TT_KEYWORD, and TemplateURLModel generates a visit for 'wikipedia.org'\n with a transition type of TT_KEYWORD_GENERATED. Chrome runtime only.\n"]
pub const cef_transition_type_t_TT_KEYWORD: cef_transition_type_t = 9;
#[doc = "\n Corresponds to a visit generated for a keyword. See description of\n TT_KEYWORD for more details. Chrome runtime only.\n"]
pub const cef_transition_type_t_TT_KEYWORD_GENERATED: cef_transition_type_t = 10;
#[doc = "\n General mask defining the bits used for the source values.\n"]
pub const cef_transition_type_t_TT_SOURCE_MASK: cef_transition_type_t = 255;
#[doc = "\n Attempted to visit a URL but was blocked.\n"]
pub const cef_transition_type_t_TT_BLOCKED_FLAG: cef_transition_type_t = 8388608;
#[doc = "\n Used the Forward or Back function to navigate among browsing history.\n Will be ORed to the transition type for the original load.\n"]
pub const cef_transition_type_t_TT_FORWARD_BACK_FLAG: cef_transition_type_t = 16777216;
#[doc = "\n Loaded a URL directly via CreateBrowser, LoadURL or LoadRequest.\n"]
pub const cef_transition_type_t_TT_DIRECT_LOAD_FLAG: cef_transition_type_t = 33554432;
#[doc = "\n User is navigating to the home page. Chrome runtime only.\n"]
pub const cef_transition_type_t_TT_HOME_PAGE_FLAG: cef_transition_type_t = 67108864;
#[doc = "\n The transition originated from an external application; the exact\n definition of this is embedder dependent. Chrome runtime and\n extension system only.\n"]
pub const cef_transition_type_t_TT_FROM_API_FLAG: cef_transition_type_t = 134217728;
#[doc = "\n The beginning of a navigation chain.\n"]
pub const cef_transition_type_t_TT_CHAIN_START_FLAG: cef_transition_type_t = 268435456;
#[doc = "\n The last transition in a redirect chain.\n"]
pub const cef_transition_type_t_TT_CHAIN_END_FLAG: cef_transition_type_t = 536870912;
#[doc = "\n Redirects caused by JavaScript or a meta refresh tag on the page.\n"]
pub const cef_transition_type_t_TT_CLIENT_REDIRECT_FLAG: cef_transition_type_t = 1073741824;
#[doc = "\n Redirects sent from the server by HTTP headers.\n"]
pub const cef_transition_type_t_TT_SERVER_REDIRECT_FLAG: cef_transition_type_t = 2147483648;
#[doc = "\n Used to test whether a transition involves a redirect.\n"]
pub const cef_transition_type_t_TT_IS_REDIRECT_MASK: cef_transition_type_t = 3221225472;
#[doc = "\n General mask defining the bits used for the qualifiers.\n"]
pub const cef_transition_type_t_TT_QUALIFIER_MASK: cef_transition_type_t = 4294967040;
#[doc = "\n Transition type for a request. Made up of one source value and 0 or more\n qualifiers.\n"]
pub type cef_transition_type_t = ::std::os::raw::c_uint;
#[doc = "\n Default behavior.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_NONE: cef_urlrequest_flags_t = 0;
#[doc = "\n If set the cache will be skipped when handling the request. Setting this\n value is equivalent to specifying the \"Cache-Control: no-cache\" request\n header. Setting this value in combination with UR_FLAG_ONLY_FROM_CACHE\n will cause the request to fail.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_SKIP_CACHE: cef_urlrequest_flags_t = 1;
#[doc = "\n If set the request will fail if it cannot be served from the cache (or\n some equivalent local store). Setting this value is equivalent to\n specifying the \"Cache-Control: only-if-cached\" request header. Setting\n this value in combination with UR_FLAG_SKIP_CACHE or UR_FLAG_DISABLE_CACHE\n will cause the request to fail.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_ONLY_FROM_CACHE: cef_urlrequest_flags_t = 2;
#[doc = "\n If set the cache will not be used at all. Setting this value is equivalent\n to specifying the \"Cache-Control: no-store\" request header. Setting this\n value in combination with UR_FLAG_ONLY_FROM_CACHE will cause the request\n to fail.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_DISABLE_CACHE: cef_urlrequest_flags_t = 4;
#[doc = "\n If set user name, password, and cookies may be sent with the request, and\n cookies may be saved from the response.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_ALLOW_STORED_CREDENTIALS: cef_urlrequest_flags_t = 8;
#[doc = "\n If set upload progress events will be generated when a request has a body.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_REPORT_UPLOAD_PROGRESS: cef_urlrequest_flags_t = 16;
#[doc = "\n If set the CefURLRequestClient::OnDownloadData method will not be called.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_NO_DOWNLOAD_DATA: cef_urlrequest_flags_t = 32;
#[doc = "\n If set 5XX redirect errors will be propagated to the observer instead of\n automatically re-tried. This currently only applies for requests\n originated in the browser process.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_NO_RETRY_ON_5XX: cef_urlrequest_flags_t = 64;
#[doc = "\n If set 3XX responses will cause the fetch to halt immediately rather than\n continue through the redirect.\n"]
pub const cef_urlrequest_flags_t_UR_FLAG_STOP_ON_REDIRECT: cef_urlrequest_flags_t = 128;
#[doc = "\n Flags used to customize the behavior of CefURLRequest.\n"]
pub type cef_urlrequest_flags_t = ::std::os::raw::c_uint;
#[doc = "\n Unknown status.\n"]
pub const cef_urlrequest_status_t_UR_UNKNOWN: cef_urlrequest_status_t = 0;
#[doc = "\n Request succeeded.\n"]
pub const cef_urlrequest_status_t_UR_SUCCESS: cef_urlrequest_status_t = 1;
#[doc = "\n An IO request is pending, and the caller will be informed when it is\n completed.\n"]
pub const cef_urlrequest_status_t_UR_IO_PENDING: cef_urlrequest_status_t = 2;
#[doc = "\n Request was canceled programatically.\n"]
pub const cef_urlrequest_status_t_UR_CANCELED: cef_urlrequest_status_t = 3;
#[doc = "\n Request failed for some reason.\n"]
pub const cef_urlrequest_status_t_UR_FAILED: cef_urlrequest_status_t = 4;
#[doc = "\n Flags that represent CefURLRequest status.\n"]
pub type cef_urlrequest_status_t = ::std::os::raw::c_uint;
#[doc = " Structure representing a draggable region.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_draggable_region_t {
    #[doc = "\n Bounds of the region.\n"]
    pub bounds:    cef_rect_t,
    #[doc = "\n True (1) this this region is draggable and false (0) otherwise.\n"]
    pub draggable: ::std::os::raw::c_int
}
#[doc = " Structure representing a draggable region.\n"]
pub type cef_draggable_region_t = _cef_draggable_region_t;
#[doc = "\n Browser process.\n"]
pub const cef_process_id_t_PID_BROWSER: cef_process_id_t = 0;
#[doc = "\n Renderer process.\n"]
pub const cef_process_id_t_PID_RENDERER: cef_process_id_t = 1;
#[doc = "\n Existing process IDs.\n"]
pub type cef_process_id_t = ::std::os::raw::c_uint;
#[doc = "\n The main thread in the browser. This will be the same as the main\n application thread if CefInitialize() is called with a\n CefSettings.multi_threaded_message_loop value of false. Do not perform\n blocking tasks on this thread. All tasks posted after\n CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()\n are guaranteed to run. This thread will outlive all other CEF threads.\n"]
pub const cef_thread_id_t_TID_UI: cef_thread_id_t = 0;
#[doc = "\n Used for blocking tasks like file system access where the user won't\n notice if the task takes an arbitrarily long time to complete. All tasks\n posted after CefBrowserProcessHandler::OnContextInitialized() and before\n CefShutdown() are guaranteed to run.\n"]
pub const cef_thread_id_t_TID_FILE_BACKGROUND: cef_thread_id_t = 1;
#[doc = "\n Used for blocking tasks like file system access that affect UI or\n responsiveness of future user interactions. Do not use if an immediate\n response to a user interaction is expected. All tasks posted after\n CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()\n are guaranteed to run.\n Examples:\n - Updating the UI to reflect progress on a long task.\n - Loading data that might be shown in the UI after a future user\n   interaction.\n"]
pub const cef_thread_id_t_TID_FILE_USER_VISIBLE: cef_thread_id_t = 2;
#[doc = "\n Used for blocking tasks like file system access that affect UI\n immediately after a user interaction. All tasks posted after\n CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()\n are guaranteed to run.\n Example: Generating data shown in the UI immediately after a click.\n"]
pub const cef_thread_id_t_TID_FILE_USER_BLOCKING: cef_thread_id_t = 3;
#[doc = "\n Used to launch and terminate browser processes.\n"]
pub const cef_thread_id_t_TID_PROCESS_LAUNCHER: cef_thread_id_t = 4;
#[doc = "\n Used to process IPC and network messages. Do not perform blocking tasks on\n this thread. All tasks posted after\n CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()\n are guaranteed to run.\n"]
pub const cef_thread_id_t_TID_IO: cef_thread_id_t = 5;
#[doc = "\n The main thread in the renderer. Used for all WebKit and V8 interaction.\n Tasks may be posted to this thread after\n CefRenderProcessHandler::OnWebKitInitialized but are not guaranteed to\n run before sub-process termination (sub-processes may be killed at any\n time without warning).\n"]
pub const cef_thread_id_t_TID_RENDERER: cef_thread_id_t = 6;
#[doc = "\n Existing thread IDs.\n"]
pub type cef_thread_id_t = ::std::os::raw::c_uint;
#[doc = "\n Suitable for threads that shouldn't disrupt high priority work.\n"]
pub const cef_thread_priority_t_TP_BACKGROUND: cef_thread_priority_t = 0;
#[doc = "\n Default priority level.\n"]
pub const cef_thread_priority_t_TP_NORMAL: cef_thread_priority_t = 1;
#[doc = "\n Suitable for threads which generate data for the display (at ~60Hz).\n"]
pub const cef_thread_priority_t_TP_DISPLAY: cef_thread_priority_t = 2;
#[doc = "\n Suitable for low-latency, glitch-resistant audio.\n"]
pub const cef_thread_priority_t_TP_REALTIME_AUDIO: cef_thread_priority_t = 3;
#[doc = "\n Thread priority values listed in increasing order of importance.\n"]
pub type cef_thread_priority_t = ::std::os::raw::c_uint;
#[doc = "\n Supports tasks and timers.\n"]
pub const cef_message_loop_type_t_ML_TYPE_DEFAULT: cef_message_loop_type_t = 0;
#[doc = "\n Supports tasks, timers and native UI events (e.g. Windows messages).\n"]
pub const cef_message_loop_type_t_ML_TYPE_UI: cef_message_loop_type_t = 1;
#[doc = "\n Supports tasks, timers and asynchronous IO events.\n"]
pub const cef_message_loop_type_t_ML_TYPE_IO: cef_message_loop_type_t = 2;
#[doc = "\n Message loop types. Indicates the set of asynchronous events that a message\n loop can process.\n"]
pub type cef_message_loop_type_t = ::std::os::raw::c_uint;
#[doc = "\n No COM initialization.\n"]
pub const cef_com_init_mode_t_COM_INIT_MODE_NONE: cef_com_init_mode_t = 0;
#[doc = "\n Initialize COM using single-threaded apartments.\n"]
pub const cef_com_init_mode_t_COM_INIT_MODE_STA: cef_com_init_mode_t = 1;
#[doc = "\n Initialize COM using multi-threaded apartments.\n"]
pub const cef_com_init_mode_t_COM_INIT_MODE_MTA: cef_com_init_mode_t = 2;
#[doc = "\n Windows COM initialization mode. Specifies how COM will be initialized for a\n new thread.\n"]
pub type cef_com_init_mode_t = ::std::os::raw::c_uint;
pub const cef_value_type_t_VTYPE_INVALID: cef_value_type_t = 0;
pub const cef_value_type_t_VTYPE_NULL: cef_value_type_t = 1;
pub const cef_value_type_t_VTYPE_BOOL: cef_value_type_t = 2;
pub const cef_value_type_t_VTYPE_INT: cef_value_type_t = 3;
pub const cef_value_type_t_VTYPE_DOUBLE: cef_value_type_t = 4;
pub const cef_value_type_t_VTYPE_STRING: cef_value_type_t = 5;
pub const cef_value_type_t_VTYPE_BINARY: cef_value_type_t = 6;
pub const cef_value_type_t_VTYPE_DICTIONARY: cef_value_type_t = 7;
pub const cef_value_type_t_VTYPE_LIST: cef_value_type_t = 8;
#[doc = "\n Supported value types.\n"]
pub type cef_value_type_t = ::std::os::raw::c_uint;
pub const cef_jsdialog_type_t_JSDIALOGTYPE_ALERT: cef_jsdialog_type_t = 0;
pub const cef_jsdialog_type_t_JSDIALOGTYPE_CONFIRM: cef_jsdialog_type_t = 1;
pub const cef_jsdialog_type_t_JSDIALOGTYPE_PROMPT: cef_jsdialog_type_t = 2;
#[doc = "\n Supported JavaScript dialog types.\n"]
pub type cef_jsdialog_type_t = ::std::os::raw::c_uint;
#[doc = "\n Screen information used when window rendering is disabled. This structure is\n passed as a parameter to CefRenderHandler::GetScreenInfo and should be\n filled in by the client.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_screen_info_t {
    #[doc = "\n Device scale factor. Specifies the ratio between physical and logical\n pixels.\n"]
    pub device_scale_factor: f32,
    #[doc = "\n The screen depth in bits per pixel.\n"]
    pub depth:               ::std::os::raw::c_int,
    #[doc = "\n The bits per color component. This assumes that the colors are balanced\n equally.\n"]
    pub depth_per_component: ::std::os::raw::c_int,
    #[doc = "\n This can be true for black and white printers.\n"]
    pub is_monochrome:       ::std::os::raw::c_int,
    #[doc = " The |rect| and |available_rect| properties are used to determine the\n available surface for rendering popup views.\n"]
    pub rect:                cef_rect_t,
    #[doc = " The |rect| and |available_rect| properties are used to determine the\n available surface for rendering popup views.\n"]
    pub available_rect:      cef_rect_t
}
#[doc = "\n Screen information used when window rendering is disabled. This structure is\n passed as a parameter to CefRenderHandler::GetScreenInfo and should be\n filled in by the client.\n"]
pub type cef_screen_info_t = _cef_screen_info_t;
pub const cef_menu_id_t_MENU_ID_BACK: cef_menu_id_t = 100;
pub const cef_menu_id_t_MENU_ID_FORWARD: cef_menu_id_t = 101;
pub const cef_menu_id_t_MENU_ID_RELOAD: cef_menu_id_t = 102;
pub const cef_menu_id_t_MENU_ID_RELOAD_NOCACHE: cef_menu_id_t = 103;
pub const cef_menu_id_t_MENU_ID_STOPLOAD: cef_menu_id_t = 104;
pub const cef_menu_id_t_MENU_ID_UNDO: cef_menu_id_t = 110;
pub const cef_menu_id_t_MENU_ID_REDO: cef_menu_id_t = 111;
pub const cef_menu_id_t_MENU_ID_CUT: cef_menu_id_t = 112;
pub const cef_menu_id_t_MENU_ID_COPY: cef_menu_id_t = 113;
pub const cef_menu_id_t_MENU_ID_PASTE: cef_menu_id_t = 114;
pub const cef_menu_id_t_MENU_ID_DELETE: cef_menu_id_t = 115;
pub const cef_menu_id_t_MENU_ID_SELECT_ALL: cef_menu_id_t = 116;
pub const cef_menu_id_t_MENU_ID_FIND: cef_menu_id_t = 130;
pub const cef_menu_id_t_MENU_ID_PRINT: cef_menu_id_t = 131;
pub const cef_menu_id_t_MENU_ID_VIEW_SOURCE: cef_menu_id_t = 132;
pub const cef_menu_id_t_MENU_ID_SPELLCHECK_SUGGESTION_0: cef_menu_id_t = 200;
pub const cef_menu_id_t_MENU_ID_SPELLCHECK_SUGGESTION_1: cef_menu_id_t = 201;
pub const cef_menu_id_t_MENU_ID_SPELLCHECK_SUGGESTION_2: cef_menu_id_t = 202;
pub const cef_menu_id_t_MENU_ID_SPELLCHECK_SUGGESTION_3: cef_menu_id_t = 203;
pub const cef_menu_id_t_MENU_ID_SPELLCHECK_SUGGESTION_4: cef_menu_id_t = 204;
pub const cef_menu_id_t_MENU_ID_SPELLCHECK_SUGGESTION_LAST: cef_menu_id_t = 204;
pub const cef_menu_id_t_MENU_ID_NO_SPELLING_SUGGESTIONS: cef_menu_id_t = 205;
pub const cef_menu_id_t_MENU_ID_ADD_TO_DICTIONARY: cef_menu_id_t = 206;
pub const cef_menu_id_t_MENU_ID_CUSTOM_FIRST: cef_menu_id_t = 220;
pub const cef_menu_id_t_MENU_ID_CUSTOM_LAST: cef_menu_id_t = 250;
pub const cef_menu_id_t_MENU_ID_USER_FIRST: cef_menu_id_t = 26500;
pub const cef_menu_id_t_MENU_ID_USER_LAST: cef_menu_id_t = 28500;
#[doc = "\n Supported menu IDs. Non-English translations can be provided for the\n IDS_MENU_* strings in CefResourceBundleHandler::GetLocalizedString().\n"]
pub type cef_menu_id_t = ::std::os::raw::c_uint;
pub const cef_mouse_button_type_t_MBT_LEFT: cef_mouse_button_type_t = 0;
pub const cef_mouse_button_type_t_MBT_MIDDLE: cef_mouse_button_type_t = 1;
pub const cef_mouse_button_type_t_MBT_RIGHT: cef_mouse_button_type_t = 2;
#[doc = "\n Mouse button types.\n"]
pub type cef_mouse_button_type_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing mouse event information.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_mouse_event_t {
    #[doc = "\n X coordinate relative to the left side of the view.\n"]
    pub x:         ::std::os::raw::c_int,
    #[doc = "\n Y coordinate relative to the top side of the view.\n"]
    pub y:         ::std::os::raw::c_int,
    #[doc = "\n Bit flags describing any pressed modifier keys. See\n cef_event_flags_t for values.\n"]
    pub modifiers: u32
}
#[doc = "\n Structure representing mouse event information.\n"]
pub type cef_mouse_event_t = _cef_mouse_event_t;
pub const cef_touch_event_type_t_CEF_TET_RELEASED: cef_touch_event_type_t = 0;
pub const cef_touch_event_type_t_CEF_TET_PRESSED: cef_touch_event_type_t = 1;
pub const cef_touch_event_type_t_CEF_TET_MOVED: cef_touch_event_type_t = 2;
pub const cef_touch_event_type_t_CEF_TET_CANCELLED: cef_touch_event_type_t = 3;
#[doc = "\n Touch points states types.\n"]
pub type cef_touch_event_type_t = ::std::os::raw::c_uint;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_TOUCH: cef_pointer_type_t = 0;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_MOUSE: cef_pointer_type_t = 1;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_PEN: cef_pointer_type_t = 2;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_ERASER: cef_pointer_type_t = 3;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_UNKNOWN: cef_pointer_type_t = 4;
#[doc = "\n The device type that caused the event.\n"]
pub type cef_pointer_type_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing touch event information.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_touch_event_t {
    #[doc = "\n Id of a touch point. Must be unique per touch, can be any number except\n -1. Note that a maximum of 16 concurrent touches will be tracked; touches\n beyond that will be ignored.\n"]
    pub id:             ::std::os::raw::c_int,
    #[doc = "\n X coordinate relative to the left side of the view.\n"]
    pub x:              f32,
    #[doc = "\n Y coordinate relative to the top side of the view.\n"]
    pub y:              f32,
    #[doc = "\n X radius in pixels. Set to 0 if not applicable.\n"]
    pub radius_x:       f32,
    #[doc = "\n Y radius in pixels. Set to 0 if not applicable.\n"]
    pub radius_y:       f32,
    #[doc = "\n Rotation angle in radians. Set to 0 if not applicable.\n"]
    pub rotation_angle: f32,
    #[doc = "\n The normalized pressure of the pointer input in the range of [0,1].\n Set to 0 if not applicable.\n"]
    pub pressure:       f32,
    #[doc = "\n The state of the touch point. Touches begin with one CEF_TET_PRESSED event\n followed by zero or more CEF_TET_MOVED events and finally one\n CEF_TET_RELEASED or CEF_TET_CANCELLED event. Events not respecting this\n order will be ignored.\n"]
    pub type_:          cef_touch_event_type_t,
    #[doc = "\n Bit flags describing any pressed modifier keys. See\n cef_event_flags_t for values.\n"]
    pub modifiers:      u32,
    #[doc = "\n The device type that caused the event.\n"]
    pub pointer_type:   cef_pointer_type_t
}
#[doc = "\n Structure representing touch event information.\n"]
pub type cef_touch_event_t = _cef_touch_event_t;
pub const cef_paint_element_type_t_PET_VIEW: cef_paint_element_type_t = 0;
pub const cef_paint_element_type_t_PET_POPUP: cef_paint_element_type_t = 1;
#[doc = "\n Paint element types.\n"]
pub type cef_paint_element_type_t = ::std::os::raw::c_uint;
pub const cef_event_flags_t_EVENTFLAG_NONE: cef_event_flags_t = 0;
pub const cef_event_flags_t_EVENTFLAG_CAPS_LOCK_ON: cef_event_flags_t = 1;
pub const cef_event_flags_t_EVENTFLAG_SHIFT_DOWN: cef_event_flags_t = 2;
pub const cef_event_flags_t_EVENTFLAG_CONTROL_DOWN: cef_event_flags_t = 4;
pub const cef_event_flags_t_EVENTFLAG_ALT_DOWN: cef_event_flags_t = 8;
pub const cef_event_flags_t_EVENTFLAG_LEFT_MOUSE_BUTTON: cef_event_flags_t = 16;
pub const cef_event_flags_t_EVENTFLAG_MIDDLE_MOUSE_BUTTON: cef_event_flags_t = 32;
pub const cef_event_flags_t_EVENTFLAG_RIGHT_MOUSE_BUTTON: cef_event_flags_t = 64;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_COMMAND_DOWN: cef_event_flags_t = 128;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_NUM_LOCK_ON: cef_event_flags_t = 256;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_IS_KEY_PAD: cef_event_flags_t = 512;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_IS_LEFT: cef_event_flags_t = 1024;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_IS_RIGHT: cef_event_flags_t = 2048;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_ALTGR_DOWN: cef_event_flags_t = 4096;
#[doc = " Mac OS-X command key."]
pub const cef_event_flags_t_EVENTFLAG_IS_REPEAT: cef_event_flags_t = 8192;
#[doc = "\n Supported event bit flags.\n"]
pub type cef_event_flags_t = ::std::os::raw::c_uint;
pub const cef_menu_item_type_t_MENUITEMTYPE_NONE: cef_menu_item_type_t = 0;
pub const cef_menu_item_type_t_MENUITEMTYPE_COMMAND: cef_menu_item_type_t = 1;
pub const cef_menu_item_type_t_MENUITEMTYPE_CHECK: cef_menu_item_type_t = 2;
pub const cef_menu_item_type_t_MENUITEMTYPE_RADIO: cef_menu_item_type_t = 3;
pub const cef_menu_item_type_t_MENUITEMTYPE_SEPARATOR: cef_menu_item_type_t = 4;
pub const cef_menu_item_type_t_MENUITEMTYPE_SUBMENU: cef_menu_item_type_t = 5;
#[doc = "\n Supported menu item types.\n"]
pub type cef_menu_item_type_t = ::std::os::raw::c_uint;
#[doc = "\n No node is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_NONE: cef_context_menu_type_flags_t = 0;
#[doc = "\n The top page is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_PAGE: cef_context_menu_type_flags_t = 1;
#[doc = "\n A subframe page is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_FRAME: cef_context_menu_type_flags_t = 2;
#[doc = "\n A link is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_LINK: cef_context_menu_type_flags_t = 4;
#[doc = "\n A media node is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_MEDIA: cef_context_menu_type_flags_t = 8;
#[doc = "\n There is a textual or mixed selection that is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_SELECTION: cef_context_menu_type_flags_t = 16;
#[doc = "\n An editable element is selected.\n"]
pub const cef_context_menu_type_flags_t_CM_TYPEFLAG_EDITABLE: cef_context_menu_type_flags_t = 32;
#[doc = "\n Supported context menu type flags.\n"]
pub type cef_context_menu_type_flags_t = ::std::os::raw::c_uint;
#[doc = "\n No special node is in context.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_NONE: cef_context_menu_media_type_t = 0;
#[doc = "\n An image node is selected.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_IMAGE: cef_context_menu_media_type_t = 1;
#[doc = "\n A video node is selected.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_VIDEO: cef_context_menu_media_type_t = 2;
#[doc = "\n An audio node is selected.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_AUDIO: cef_context_menu_media_type_t = 3;
#[doc = "\n An canvas node is selected.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_CANVAS: cef_context_menu_media_type_t = 4;
#[doc = "\n A file node is selected.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_FILE: cef_context_menu_media_type_t = 5;
#[doc = "\n A plugin node is selected.\n"]
pub const cef_context_menu_media_type_t_CM_MEDIATYPE_PLUGIN: cef_context_menu_media_type_t = 6;
#[doc = "\n Supported context menu media types. These constants match their equivalents\n in Chromium's ContextMenuDataMediaType and should not be renumbered.\n"]
pub type cef_context_menu_media_type_t = ::std::os::raw::c_uint;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_NONE:
    cef_context_menu_media_state_flags_t = 0;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_IN_ERROR:
    cef_context_menu_media_state_flags_t = 1;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_PAUSED:
    cef_context_menu_media_state_flags_t = 2;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_MUTED:
    cef_context_menu_media_state_flags_t = 4;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_LOOP:
    cef_context_menu_media_state_flags_t = 8;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CAN_SAVE:
    cef_context_menu_media_state_flags_t = 16;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_HAS_AUDIO:
    cef_context_menu_media_state_flags_t = 32;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CAN_TOGGLE_CONTROLS:
    cef_context_menu_media_state_flags_t = 64;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CONTROLS:
    cef_context_menu_media_state_flags_t = 128;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CAN_PRINT:
    cef_context_menu_media_state_flags_t = 256;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CAN_ROTATE:
    cef_context_menu_media_state_flags_t = 512;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CAN_PICTURE_IN_PICTURE:
    cef_context_menu_media_state_flags_t = 1024;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_PICTURE_IN_PICTURE:
    cef_context_menu_media_state_flags_t = 2048;
pub const cef_context_menu_media_state_flags_t_CM_MEDIAFLAG_CAN_LOOP:
    cef_context_menu_media_state_flags_t = 4096;
#[doc = "\n Supported context menu media state bit flags. These constants match their\n equivalents in Chromium's ContextMenuData::MediaFlags and should not be\n renumbered.\n"]
pub type cef_context_menu_media_state_flags_t = ::std::os::raw::c_uint;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_NONE:
    cef_context_menu_edit_state_flags_t = 0;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_UNDO:
    cef_context_menu_edit_state_flags_t = 1;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_REDO:
    cef_context_menu_edit_state_flags_t = 2;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_CUT:
    cef_context_menu_edit_state_flags_t = 4;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_COPY:
    cef_context_menu_edit_state_flags_t = 8;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_PASTE:
    cef_context_menu_edit_state_flags_t = 16;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_DELETE:
    cef_context_menu_edit_state_flags_t = 32;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_SELECT_ALL:
    cef_context_menu_edit_state_flags_t = 64;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_TRANSLATE:
    cef_context_menu_edit_state_flags_t = 128;
pub const cef_context_menu_edit_state_flags_t_CM_EDITFLAG_CAN_EDIT_RICHLY:
    cef_context_menu_edit_state_flags_t = 256;
#[doc = "\n Supported context menu edit state bit flags. These constants match their\n equivalents in Chromium's ContextMenuDataEditFlags and should not be\n renumbered.\n"]
pub type cef_context_menu_edit_state_flags_t = ::std::os::raw::c_uint;
pub const cef_quick_menu_edit_state_flags_t_QM_EDITFLAG_NONE: cef_quick_menu_edit_state_flags_t = 0;
pub const cef_quick_menu_edit_state_flags_t_QM_EDITFLAG_CAN_ELLIPSIS:
    cef_quick_menu_edit_state_flags_t = 1;
pub const cef_quick_menu_edit_state_flags_t_QM_EDITFLAG_CAN_CUT: cef_quick_menu_edit_state_flags_t =
    2;
pub const cef_quick_menu_edit_state_flags_t_QM_EDITFLAG_CAN_COPY:
    cef_quick_menu_edit_state_flags_t = 4;
pub const cef_quick_menu_edit_state_flags_t_QM_EDITFLAG_CAN_PASTE:
    cef_quick_menu_edit_state_flags_t = 8;
#[doc = "\n Supported quick menu state bit flags.\n"]
pub type cef_quick_menu_edit_state_flags_t = ::std::os::raw::c_uint;
#[doc = "\n Notification that a key transitioned from \"up\" to \"down\".\n"]
pub const cef_key_event_type_t_KEYEVENT_RAWKEYDOWN: cef_key_event_type_t = 0;
#[doc = "\n Notification that a key was pressed. This does not necessarily correspond\n to a character depending on the key and language. Use KEYEVENT_CHAR for\n character input.\n"]
pub const cef_key_event_type_t_KEYEVENT_KEYDOWN: cef_key_event_type_t = 1;
#[doc = "\n Notification that a key was released.\n"]
pub const cef_key_event_type_t_KEYEVENT_KEYUP: cef_key_event_type_t = 2;
#[doc = "\n Notification that a character was typed. Use this for text input. Key\n down events may generate 0, 1, or more than one character event depending\n on the key, locale, and operating system.\n"]
pub const cef_key_event_type_t_KEYEVENT_CHAR: cef_key_event_type_t = 3;
#[doc = "\n Key event types.\n"]
pub type cef_key_event_type_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing keyboard event information.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_key_event_t {
    #[doc = "\n The type of keyboard event.\n"]
    pub type_:                   cef_key_event_type_t,
    #[doc = "\n Bit flags describing any pressed modifier keys. See\n cef_event_flags_t for values.\n"]
    pub modifiers:               u32,
    #[doc = "\n The Windows key code for the key event. This value is used by the DOM\n specification. Sometimes it comes directly from the event (i.e. on\n Windows) and sometimes it's determined using a mapping function. See\n WebCore/platform/chromium/KeyboardCodes.h for the list of values.\n"]
    pub windows_key_code:        ::std::os::raw::c_int,
    #[doc = "\n The actual key code genenerated by the platform.\n"]
    pub native_key_code:         ::std::os::raw::c_int,
    #[doc = "\n Indicates whether the event is considered a \"system key\" event (see\n http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).\n This value will always be false on non-Windows platforms.\n"]
    pub is_system_key:           ::std::os::raw::c_int,
    #[doc = "\n The character generated by the keystroke.\n"]
    pub character:               char16_t,
    #[doc = "\n Same as |character| but unmodified by any concurrently-held modifiers\n (except shift). This is useful for working out shortcut keys.\n"]
    pub unmodified_character:    char16_t,
    #[doc = "\n True if the focus is currently on an editable field on the page. This is\n useful for determining if standard key events should be intercepted.\n"]
    pub focus_on_editable_field: ::std::os::raw::c_int
}
#[doc = "\n Structure representing keyboard event information.\n"]
pub type cef_key_event_t = _cef_key_event_t;
#[doc = "\n The source is explicit navigation via the API (LoadURL(), etc).\n"]
pub const cef_focus_source_t_FOCUS_SOURCE_NAVIGATION: cef_focus_source_t = 0;
#[doc = "\n The source is a system-generated focus event.\n"]
pub const cef_focus_source_t_FOCUS_SOURCE_SYSTEM: cef_focus_source_t = 1;
#[doc = "\n Focus sources.\n"]
pub type cef_focus_source_t = ::std::os::raw::c_uint;
pub const cef_navigation_type_t_NAVIGATION_LINK_CLICKED: cef_navigation_type_t = 0;
pub const cef_navigation_type_t_NAVIGATION_FORM_SUBMITTED: cef_navigation_type_t = 1;
pub const cef_navigation_type_t_NAVIGATION_BACK_FORWARD: cef_navigation_type_t = 2;
pub const cef_navigation_type_t_NAVIGATION_RELOAD: cef_navigation_type_t = 3;
pub const cef_navigation_type_t_NAVIGATION_FORM_RESUBMITTED: cef_navigation_type_t = 4;
pub const cef_navigation_type_t_NAVIGATION_OTHER: cef_navigation_type_t = 5;
#[doc = "\n Navigation types.\n"]
pub type cef_navigation_type_t = ::std::os::raw::c_uint;
pub const cef_xml_encoding_type_t_XML_ENCODING_NONE: cef_xml_encoding_type_t = 0;
pub const cef_xml_encoding_type_t_XML_ENCODING_UTF8: cef_xml_encoding_type_t = 1;
pub const cef_xml_encoding_type_t_XML_ENCODING_UTF16LE: cef_xml_encoding_type_t = 2;
pub const cef_xml_encoding_type_t_XML_ENCODING_UTF16BE: cef_xml_encoding_type_t = 3;
pub const cef_xml_encoding_type_t_XML_ENCODING_ASCII: cef_xml_encoding_type_t = 4;
#[doc = "\n Supported XML encoding types. The parser supports ASCII, ISO-8859-1, and\n UTF16 (LE and BE) by default. All other types must be translated to UTF8\n before being passed to the parser. If a BOM is detected and the correct\n decoder is available then that decoder will be used automatically.\n"]
pub type cef_xml_encoding_type_t = ::std::os::raw::c_uint;
pub const cef_xml_node_type_t_XML_NODE_UNSUPPORTED: cef_xml_node_type_t = 0;
pub const cef_xml_node_type_t_XML_NODE_PROCESSING_INSTRUCTION: cef_xml_node_type_t = 1;
pub const cef_xml_node_type_t_XML_NODE_DOCUMENT_TYPE: cef_xml_node_type_t = 2;
pub const cef_xml_node_type_t_XML_NODE_ELEMENT_START: cef_xml_node_type_t = 3;
pub const cef_xml_node_type_t_XML_NODE_ELEMENT_END: cef_xml_node_type_t = 4;
pub const cef_xml_node_type_t_XML_NODE_ATTRIBUTE: cef_xml_node_type_t = 5;
pub const cef_xml_node_type_t_XML_NODE_TEXT: cef_xml_node_type_t = 6;
pub const cef_xml_node_type_t_XML_NODE_CDATA: cef_xml_node_type_t = 7;
pub const cef_xml_node_type_t_XML_NODE_ENTITY_REFERENCE: cef_xml_node_type_t = 8;
pub const cef_xml_node_type_t_XML_NODE_WHITESPACE: cef_xml_node_type_t = 9;
pub const cef_xml_node_type_t_XML_NODE_COMMENT: cef_xml_node_type_t = 10;
#[doc = "\n XML node types.\n"]
pub type cef_xml_node_type_t = ::std::os::raw::c_uint;
#[doc = "\n Popup window features.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_popup_features_t {
    pub x:         ::std::os::raw::c_int,
    pub xSet:      ::std::os::raw::c_int,
    pub y:         ::std::os::raw::c_int,
    pub ySet:      ::std::os::raw::c_int,
    pub width:     ::std::os::raw::c_int,
    pub widthSet:  ::std::os::raw::c_int,
    pub height:    ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    #[doc = " True (1) if browser interface elements should be hidden."]
    pub isPopup:   ::std::os::raw::c_int
}
#[doc = "\n Popup window features.\n"]
pub type cef_popup_features_t = _cef_popup_features_t;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_UNKNOWN: cef_dom_document_type_t = 0;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_HTML: cef_dom_document_type_t = 1;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_XHTML: cef_dom_document_type_t = 2;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_PLUGIN: cef_dom_document_type_t = 3;
#[doc = "\n DOM document types.\n"]
pub type cef_dom_document_type_t = ::std::os::raw::c_uint;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_UNKNOWN: cef_dom_event_category_t = 0;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_UI: cef_dom_event_category_t = 1;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_MOUSE: cef_dom_event_category_t = 2;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_MUTATION: cef_dom_event_category_t = 4;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_KEYBOARD: cef_dom_event_category_t = 8;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_TEXT: cef_dom_event_category_t = 16;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_COMPOSITION: cef_dom_event_category_t = 32;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_DRAG: cef_dom_event_category_t = 64;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_CLIPBOARD: cef_dom_event_category_t = 128;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_MESSAGE: cef_dom_event_category_t = 256;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_WHEEL: cef_dom_event_category_t = 512;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED:
    cef_dom_event_category_t = 1024;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_OVERFLOW: cef_dom_event_category_t = 2048;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_PAGE_TRANSITION: cef_dom_event_category_t =
    4096;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_POPSTATE: cef_dom_event_category_t = 8192;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_PROGRESS: cef_dom_event_category_t = 16384;
pub const cef_dom_event_category_t_DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS:
    cef_dom_event_category_t = 32768;
#[doc = "\n DOM event category flags.\n"]
pub type cef_dom_event_category_t = ::std::os::raw::c_uint;
pub const cef_dom_event_phase_t_DOM_EVENT_PHASE_UNKNOWN: cef_dom_event_phase_t = 0;
pub const cef_dom_event_phase_t_DOM_EVENT_PHASE_CAPTURING: cef_dom_event_phase_t = 1;
pub const cef_dom_event_phase_t_DOM_EVENT_PHASE_AT_TARGET: cef_dom_event_phase_t = 2;
pub const cef_dom_event_phase_t_DOM_EVENT_PHASE_BUBBLING: cef_dom_event_phase_t = 3;
#[doc = "\n DOM event processing phases.\n"]
pub type cef_dom_event_phase_t = ::std::os::raw::c_uint;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_UNSUPPORTED: cef_dom_node_type_t = 0;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_ELEMENT: cef_dom_node_type_t = 1;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_ATTRIBUTE: cef_dom_node_type_t = 2;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_TEXT: cef_dom_node_type_t = 3;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_CDATA_SECTION: cef_dom_node_type_t = 4;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS: cef_dom_node_type_t = 5;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_COMMENT: cef_dom_node_type_t = 6;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_DOCUMENT: cef_dom_node_type_t = 7;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_DOCUMENT_TYPE: cef_dom_node_type_t = 8;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_DOCUMENT_FRAGMENT: cef_dom_node_type_t = 9;
#[doc = "\n DOM node types.\n"]
pub type cef_dom_node_type_t = ::std::os::raw::c_uint;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_UNSUPPORTED:
    cef_dom_form_control_type_t = 0;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_BUTTON_BUTTON:
    cef_dom_form_control_type_t = 1;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_BUTTON_SUBMIT:
    cef_dom_form_control_type_t = 2;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_BUTTON_RESET:
    cef_dom_form_control_type_t = 3;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_BUTTON_SELECT_LIST:
    cef_dom_form_control_type_t = 4;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_FIELDSET: cef_dom_form_control_type_t =
    5;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_BUTTON:
    cef_dom_form_control_type_t = 6;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_CHECKBOX:
    cef_dom_form_control_type_t = 7;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_COLOR:
    cef_dom_form_control_type_t = 8;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_DATE:
    cef_dom_form_control_type_t = 9;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_DATETIME_LOCAL:
    cef_dom_form_control_type_t = 10;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_EMAIL:
    cef_dom_form_control_type_t = 11;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_FILE:
    cef_dom_form_control_type_t = 12;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_HIDDEN:
    cef_dom_form_control_type_t = 13;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_IMAGE:
    cef_dom_form_control_type_t = 14;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_MONTH:
    cef_dom_form_control_type_t = 15;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_NUMBER:
    cef_dom_form_control_type_t = 16;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_PASSWORD:
    cef_dom_form_control_type_t = 17;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_RADIO:
    cef_dom_form_control_type_t = 18;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_RANGE:
    cef_dom_form_control_type_t = 19;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_RESET:
    cef_dom_form_control_type_t = 20;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_SEARCH:
    cef_dom_form_control_type_t = 21;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_SUBMIT:
    cef_dom_form_control_type_t = 22;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_TELEPHONE:
    cef_dom_form_control_type_t = 23;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_TEXT:
    cef_dom_form_control_type_t = 24;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_TIME:
    cef_dom_form_control_type_t = 25;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_URL: cef_dom_form_control_type_t =
    26;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_INPUT_WEEK:
    cef_dom_form_control_type_t = 27;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_OUTPUT: cef_dom_form_control_type_t =
    28;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_SELECT_ONE:
    cef_dom_form_control_type_t = 29;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_SELECT_MULTIPLE:
    cef_dom_form_control_type_t = 30;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_SELECT_LIST:
    cef_dom_form_control_type_t = 31;
pub const cef_dom_form_control_type_t_DOM_FORM_CONTROL_TYPE_TEXT_AREA: cef_dom_form_control_type_t =
    32;
#[doc = "\n DOM form control types. Should be kept in sync with Chromium's\n blink::mojom::FormControlType type.\n"]
pub type cef_dom_form_control_type_t = ::std::os::raw::c_uint;
#[doc = "\n Requires that the file exists before allowing the user to pick it.\n"]
pub const cef_file_dialog_mode_t_FILE_DIALOG_OPEN: cef_file_dialog_mode_t = 0;
#[doc = "\n Like Open, but allows picking multiple files to open.\n"]
pub const cef_file_dialog_mode_t_FILE_DIALOG_OPEN_MULTIPLE: cef_file_dialog_mode_t = 1;
#[doc = "\n Like Open, but selects a folder to open.\n"]
pub const cef_file_dialog_mode_t_FILE_DIALOG_OPEN_FOLDER: cef_file_dialog_mode_t = 2;
#[doc = "\n Allows picking a nonexistent file, and prompts to overwrite if the file\n already exists.\n"]
pub const cef_file_dialog_mode_t_FILE_DIALOG_SAVE: cef_file_dialog_mode_t = 3;
#[doc = "\n Supported file dialog modes.\n"]
pub type cef_file_dialog_mode_t = ::std::os::raw::c_uint;
pub const cef_color_model_t_COLOR_MODEL_UNKNOWN: cef_color_model_t = 0;
pub const cef_color_model_t_COLOR_MODEL_GRAY: cef_color_model_t = 1;
pub const cef_color_model_t_COLOR_MODEL_COLOR: cef_color_model_t = 2;
pub const cef_color_model_t_COLOR_MODEL_CMYK: cef_color_model_t = 3;
pub const cef_color_model_t_COLOR_MODEL_CMY: cef_color_model_t = 4;
pub const cef_color_model_t_COLOR_MODEL_KCMY: cef_color_model_t = 5;
pub const cef_color_model_t_COLOR_MODEL_CMY_K: cef_color_model_t = 6;
pub const cef_color_model_t_COLOR_MODEL_BLACK: cef_color_model_t = 7;
pub const cef_color_model_t_COLOR_MODEL_GRAYSCALE: cef_color_model_t = 8;
pub const cef_color_model_t_COLOR_MODEL_RGB: cef_color_model_t = 9;
pub const cef_color_model_t_COLOR_MODEL_RGB16: cef_color_model_t = 10;
pub const cef_color_model_t_COLOR_MODEL_RGBA: cef_color_model_t = 11;
pub const cef_color_model_t_COLOR_MODEL_COLORMODE_COLOR: cef_color_model_t = 12;
pub const cef_color_model_t_COLOR_MODEL_COLORMODE_MONOCHROME: cef_color_model_t = 13;
pub const cef_color_model_t_COLOR_MODEL_HP_COLOR_COLOR: cef_color_model_t = 14;
pub const cef_color_model_t_COLOR_MODEL_HP_COLOR_BLACK: cef_color_model_t = 15;
pub const cef_color_model_t_COLOR_MODEL_PRINTOUTMODE_NORMAL: cef_color_model_t = 16;
pub const cef_color_model_t_COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY: cef_color_model_t = 17;
pub const cef_color_model_t_COLOR_MODEL_PROCESSCOLORMODEL_CMYK: cef_color_model_t = 18;
pub const cef_color_model_t_COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE: cef_color_model_t = 19;
pub const cef_color_model_t_COLOR_MODEL_PROCESSCOLORMODEL_RGB: cef_color_model_t = 20;
#[doc = "\n Print job color mode values.\n"]
pub type cef_color_model_t = ::std::os::raw::c_uint;
pub const cef_duplex_mode_t_DUPLEX_MODE_UNKNOWN: cef_duplex_mode_t = -1;
pub const cef_duplex_mode_t_DUPLEX_MODE_SIMPLEX: cef_duplex_mode_t = 0;
pub const cef_duplex_mode_t_DUPLEX_MODE_LONG_EDGE: cef_duplex_mode_t = 1;
pub const cef_duplex_mode_t_DUPLEX_MODE_SHORT_EDGE: cef_duplex_mode_t = 2;
#[doc = "\n Print job duplex mode values.\n"]
pub type cef_duplex_mode_t = ::std::os::raw::c_int;
pub const cef_cursor_type_t_CT_POINTER: cef_cursor_type_t = 0;
pub const cef_cursor_type_t_CT_CROSS: cef_cursor_type_t = 1;
pub const cef_cursor_type_t_CT_HAND: cef_cursor_type_t = 2;
pub const cef_cursor_type_t_CT_IBEAM: cef_cursor_type_t = 3;
pub const cef_cursor_type_t_CT_WAIT: cef_cursor_type_t = 4;
pub const cef_cursor_type_t_CT_HELP: cef_cursor_type_t = 5;
pub const cef_cursor_type_t_CT_EASTRESIZE: cef_cursor_type_t = 6;
pub const cef_cursor_type_t_CT_NORTHRESIZE: cef_cursor_type_t = 7;
pub const cef_cursor_type_t_CT_NORTHEASTRESIZE: cef_cursor_type_t = 8;
pub const cef_cursor_type_t_CT_NORTHWESTRESIZE: cef_cursor_type_t = 9;
pub const cef_cursor_type_t_CT_SOUTHRESIZE: cef_cursor_type_t = 10;
pub const cef_cursor_type_t_CT_SOUTHEASTRESIZE: cef_cursor_type_t = 11;
pub const cef_cursor_type_t_CT_SOUTHWESTRESIZE: cef_cursor_type_t = 12;
pub const cef_cursor_type_t_CT_WESTRESIZE: cef_cursor_type_t = 13;
pub const cef_cursor_type_t_CT_NORTHSOUTHRESIZE: cef_cursor_type_t = 14;
pub const cef_cursor_type_t_CT_EASTWESTRESIZE: cef_cursor_type_t = 15;
pub const cef_cursor_type_t_CT_NORTHEASTSOUTHWESTRESIZE: cef_cursor_type_t = 16;
pub const cef_cursor_type_t_CT_NORTHWESTSOUTHEASTRESIZE: cef_cursor_type_t = 17;
pub const cef_cursor_type_t_CT_COLUMNRESIZE: cef_cursor_type_t = 18;
pub const cef_cursor_type_t_CT_ROWRESIZE: cef_cursor_type_t = 19;
pub const cef_cursor_type_t_CT_MIDDLEPANNING: cef_cursor_type_t = 20;
pub const cef_cursor_type_t_CT_EASTPANNING: cef_cursor_type_t = 21;
pub const cef_cursor_type_t_CT_NORTHPANNING: cef_cursor_type_t = 22;
pub const cef_cursor_type_t_CT_NORTHEASTPANNING: cef_cursor_type_t = 23;
pub const cef_cursor_type_t_CT_NORTHWESTPANNING: cef_cursor_type_t = 24;
pub const cef_cursor_type_t_CT_SOUTHPANNING: cef_cursor_type_t = 25;
pub const cef_cursor_type_t_CT_SOUTHEASTPANNING: cef_cursor_type_t = 26;
pub const cef_cursor_type_t_CT_SOUTHWESTPANNING: cef_cursor_type_t = 27;
pub const cef_cursor_type_t_CT_WESTPANNING: cef_cursor_type_t = 28;
pub const cef_cursor_type_t_CT_MOVE: cef_cursor_type_t = 29;
pub const cef_cursor_type_t_CT_VERTICALTEXT: cef_cursor_type_t = 30;
pub const cef_cursor_type_t_CT_CELL: cef_cursor_type_t = 31;
pub const cef_cursor_type_t_CT_CONTEXTMENU: cef_cursor_type_t = 32;
pub const cef_cursor_type_t_CT_ALIAS: cef_cursor_type_t = 33;
pub const cef_cursor_type_t_CT_PROGRESS: cef_cursor_type_t = 34;
pub const cef_cursor_type_t_CT_NODROP: cef_cursor_type_t = 35;
pub const cef_cursor_type_t_CT_COPY: cef_cursor_type_t = 36;
pub const cef_cursor_type_t_CT_NONE: cef_cursor_type_t = 37;
pub const cef_cursor_type_t_CT_NOTALLOWED: cef_cursor_type_t = 38;
pub const cef_cursor_type_t_CT_ZOOMIN: cef_cursor_type_t = 39;
pub const cef_cursor_type_t_CT_ZOOMOUT: cef_cursor_type_t = 40;
pub const cef_cursor_type_t_CT_GRAB: cef_cursor_type_t = 41;
pub const cef_cursor_type_t_CT_GRABBING: cef_cursor_type_t = 42;
pub const cef_cursor_type_t_CT_MIDDLE_PANNING_VERTICAL: cef_cursor_type_t = 43;
pub const cef_cursor_type_t_CT_MIDDLE_PANNING_HORIZONTAL: cef_cursor_type_t = 44;
pub const cef_cursor_type_t_CT_CUSTOM: cef_cursor_type_t = 45;
pub const cef_cursor_type_t_CT_DND_NONE: cef_cursor_type_t = 46;
pub const cef_cursor_type_t_CT_DND_MOVE: cef_cursor_type_t = 47;
pub const cef_cursor_type_t_CT_DND_COPY: cef_cursor_type_t = 48;
pub const cef_cursor_type_t_CT_DND_LINK: cef_cursor_type_t = 49;
#[doc = "\n Cursor type values.\n"]
pub type cef_cursor_type_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing cursor information. |buffer| will be\n |size.width|*|size.height|*4 bytes in size and represents a BGRA image with\n an upper-left origin.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cursor_info_t {
    pub hotspot:            cef_point_t,
    pub image_scale_factor: f32,
    pub buffer:             *mut ::std::os::raw::c_void,
    pub size:               cef_size_t
}
#[doc = "\n Structure representing cursor information. |buffer| will be\n |size.width|*|size.height|*4 bytes in size and represents a BGRA image with\n an upper-left origin.\n"]
pub type cef_cursor_info_t = _cef_cursor_info_t;
#[doc = "\n Don't unescape anything at all.\n"]
pub const cef_uri_unescape_rule_t_UU_NONE: cef_uri_unescape_rule_t = 0;
#[doc = "\n Don't unescape anything special, but all normal unescaping will happen.\n This is a placeholder and can't be combined with other flags (since it's\n just the absence of them). All other unescape rules imply \"normal\" in\n addition to their special meaning. Things like escaped letters, digits,\n and most symbols will get unescaped with this mode.\n"]
pub const cef_uri_unescape_rule_t_UU_NORMAL: cef_uri_unescape_rule_t = 1;
#[doc = "\n Convert %20 to spaces. In some places where we're showing URLs, we may\n want this. In places where the URL may be copied and pasted out, then\n you wouldn't want this since it might not be interpreted in one piece\n by other applications.\n"]
pub const cef_uri_unescape_rule_t_UU_SPACES: cef_uri_unescape_rule_t = 2;
#[doc = "\n Unescapes '/' and '\\\\'. If these characters were unescaped, the resulting\n URL won't be the same as the source one. Moreover, they are dangerous to\n unescape in strings that will be used as file paths or names. This value\n should only be used when slashes don't have special meaning, like data\n URLs.\n"]
pub const cef_uri_unescape_rule_t_UU_PATH_SEPARATORS: cef_uri_unescape_rule_t = 4;
#[doc = "\n Unescapes various characters that will change the meaning of URLs,\n including '%', '+', '&', '#'. Does not unescape path separators.\n If these characters were unescaped, the resulting URL won't be the same\n as the source one. This flag is used when generating final output like\n filenames for URLs where we won't be interpreting as a URL and want to do\n as much unescaping as possible.\n"]
pub const cef_uri_unescape_rule_t_UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS:
    cef_uri_unescape_rule_t = 8;
#[doc = "\n URL queries use \"+\" for space. This flag controls that replacement.\n"]
pub const cef_uri_unescape_rule_t_UU_REPLACE_PLUS_WITH_SPACE: cef_uri_unescape_rule_t = 16;
#[doc = "\n URI unescape rules passed to CefURIDecode().\n"]
pub type cef_uri_unescape_rule_t = ::std::os::raw::c_uint;
#[doc = "\n Parses the input strictly according to RFC 4627. See comments in\n Chromium's base/json/json_reader.h file for known limitations/\n deviations from the RFC.\n"]
pub const cef_json_parser_options_t_JSON_PARSER_RFC: cef_json_parser_options_t = 0;
#[doc = "\n Allows commas to exist after the last element in structures.\n"]
pub const cef_json_parser_options_t_JSON_PARSER_ALLOW_TRAILING_COMMAS: cef_json_parser_options_t =
    1;
#[doc = "\n Options that can be passed to CefParseJSON.\n"]
pub type cef_json_parser_options_t = ::std::os::raw::c_uint;
#[doc = "\n Default behavior.\n"]
pub const cef_json_writer_options_t_JSON_WRITER_DEFAULT: cef_json_writer_options_t = 0;
#[doc = "\n This option instructs the writer that if a Binary value is encountered,\n the value (and key if within a dictionary) will be omitted from the\n output, and success will be returned. Otherwise, if a binary value is\n encountered, failure will be returned.\n"]
pub const cef_json_writer_options_t_JSON_WRITER_OMIT_BINARY_VALUES: cef_json_writer_options_t = 1;
#[doc = "\n This option instructs the writer to write doubles that have no fractional\n part as a normal integer (i.e., without using exponential notation\n or appending a '.0') as long as the value is within the range of a\n 64-bit int.\n"]
pub const cef_json_writer_options_t_JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION:
    cef_json_writer_options_t = 2;
#[doc = "\n Return a slightly nicer formatted json string (pads with whitespace to\n help with readability).\n"]
pub const cef_json_writer_options_t_JSON_WRITER_PRETTY_PRINT: cef_json_writer_options_t = 4;
#[doc = "\n Options that can be passed to CefWriteJSON.\n"]
pub type cef_json_writer_options_t = ::std::os::raw::c_uint;
#[doc = "\n Default margins of 1cm (~0.4 inches).\n"]
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_DEFAULT: cef_pdf_print_margin_type_t = 0;
#[doc = "\n No margins.\n"]
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_NONE: cef_pdf_print_margin_type_t = 1;
#[doc = "\n Custom margins using the |margin_*| values from cef_pdf_print_settings_t.\n"]
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_CUSTOM: cef_pdf_print_margin_type_t = 2;
#[doc = "\n Margin type for PDF printing.\n"]
pub type cef_pdf_print_margin_type_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing PDF print settings. These values match the parameters\n supported by the DevTools Page.printToPDF function. See\n https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_settings_t {
    #[doc = "\n Set to true (1) for landscape mode or false (0) for portrait mode.\n"]
    pub landscape:                 ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to print background graphics.\n"]
    pub print_background:          ::std::os::raw::c_int,
    #[doc = "\n The percentage to scale the PDF by before printing (e.g. .5 is 50%).\n If this value is less than or equal to zero the default value of 1.0\n will be used.\n"]
    pub scale:                     f64,
    #[doc = "\n Output paper size in inches. If either of these values is less than or\n equal to zero then the default paper size (letter, 8.5 x 11 inches) will\n be used.\n"]
    pub paper_width:               f64,
    pub paper_height:              f64,
    #[doc = "\n Set to true (1) to prefer page size as defined by css. Defaults to false\n (0), in which case the content will be scaled to fit the paper size.\n"]
    pub prefer_css_page_size:      ::std::os::raw::c_int,
    #[doc = "\n Margin type.\n"]
    pub margin_type:               cef_pdf_print_margin_type_t,
    #[doc = "\n Margins in inches. Only used if |margin_type| is set to\n PDF_PRINT_MARGIN_CUSTOM.\n"]
    pub margin_top:                f64,
    pub margin_right:              f64,
    pub margin_bottom:             f64,
    pub margin_left:               f64,
    #[doc = "\n Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages are printed\n in the document order, not in the order specified, and no more than once.\n Defaults to empty string, which implies the entire document is printed.\n The page numbers are quietly capped to actual page count of the document,\n and ranges beyond the end of the document are ignored. If this results in\n no pages to print, an error is reported. It is an error to specify a range\n with start greater than end.\n"]
    pub page_ranges:               cef_string_t,
    #[doc = "\n Set to true (1) to display the header and/or footer. Modify\n |header_template| and/or |footer_template| to customize the display.\n"]
    pub display_header_footer:     ::std::os::raw::c_int,
    #[doc = "\n HTML template for the print header. Only displayed if\n |display_header_footer| is true (1). Should be valid HTML markup with\n the following classes used to inject printing values into them:\n\n - date: formatted print date\n - title: document title\n - url: document location\n - pageNumber: current page number\n - totalPages: total pages in the document\n\n For example, \"<span class=title></span>\" would generate a span containing\n the title.\n"]
    pub header_template:           cef_string_t,
    #[doc = "\n HTML template for the print footer. Only displayed if\n |display_header_footer| is true (1). Uses the same format as\n |header_template|.\n"]
    pub footer_template:           cef_string_t,
    #[doc = "\n Set to true (1) to generate tagged (accessible) PDF.\n"]
    pub generate_tagged_pdf:       ::std::os::raw::c_int,
    #[doc = "\n Set to true (1) to generate a document outline.\n"]
    pub generate_document_outline: ::std::os::raw::c_int
}
#[doc = "\n Structure representing PDF print settings. These values match the parameters\n supported by the DevTools Page.printToPDF function. See\n https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF\n"]
pub type cef_pdf_print_settings_t = _cef_pdf_print_settings_t;
pub const cef_scale_factor_t_SCALE_FACTOR_NONE: cef_scale_factor_t = 0;
pub const cef_scale_factor_t_SCALE_FACTOR_100P: cef_scale_factor_t = 1;
pub const cef_scale_factor_t_SCALE_FACTOR_125P: cef_scale_factor_t = 2;
pub const cef_scale_factor_t_SCALE_FACTOR_133P: cef_scale_factor_t = 3;
pub const cef_scale_factor_t_SCALE_FACTOR_140P: cef_scale_factor_t = 4;
pub const cef_scale_factor_t_SCALE_FACTOR_150P: cef_scale_factor_t = 5;
pub const cef_scale_factor_t_SCALE_FACTOR_180P: cef_scale_factor_t = 6;
pub const cef_scale_factor_t_SCALE_FACTOR_200P: cef_scale_factor_t = 7;
pub const cef_scale_factor_t_SCALE_FACTOR_250P: cef_scale_factor_t = 8;
pub const cef_scale_factor_t_SCALE_FACTOR_300P: cef_scale_factor_t = 9;
#[doc = "\n Supported UI scale factors for the platform. SCALE_FACTOR_NONE is used for\n density independent resources such as string, html/js files or an image that\n can be used for any scale factors (such as wallpapers).\n"]
pub type cef_scale_factor_t = ::std::os::raw::c_uint;
#[doc = "\n Clear the referrer header if the header value is HTTPS but the request\n destination is HTTP. This is the default behavior.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE : cef_referrer_policy_t = 0 ;
#[doc = "\n Clear the referrer header if the header value is HTTPS but the request\n destination is HTTP. This is the default behavior.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_DEFAULT: cef_referrer_policy_t = 0;
#[doc = "\n A slight variant on CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE:\n If the request destination is HTTP, an HTTPS referrer will be cleared. If\n the request's destination is cross-origin with the referrer (but does not\n downgrade), the referrer's granularity will be stripped down to an origin\n rather than a full URL. Same-origin requests will send the full referrer.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN : cef_referrer_policy_t = 1 ;
#[doc = "\n Strip the referrer down to an origin when the origin of the referrer is\n different from the destination's origin.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN:
    cef_referrer_policy_t = 2;
#[doc = "\n Never change the referrer.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_NEVER_CLEAR_REFERRER: cef_referrer_policy_t = 3;
#[doc = "\n Strip the referrer down to the origin regardless of the redirect location.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN: cef_referrer_policy_t = 4;
#[doc = "\n Clear the referrer when the request's referrer is cross-origin with the\n request's destination.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN:
    cef_referrer_policy_t = 5;
#[doc = "\n Strip the referrer down to the origin, but clear it entirely if the\n referrer value is HTTPS and the destination is HTTP.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE : cef_referrer_policy_t = 6 ;
#[doc = "\n Always clear the referrer regardless of the request destination.\n"]
pub const cef_referrer_policy_t_REFERRER_POLICY_NO_REFERRER: cef_referrer_policy_t = 7;
#[doc = " Always the last value in this enumeration."]
pub const cef_referrer_policy_t_REFERRER_POLICY_LAST_VALUE: cef_referrer_policy_t = 7;
#[doc = "\n Policy for how the Referrer HTTP header value will be sent during\n navigation. If the `--no-referrers` command-line flag is specified then the\n policy value will be ignored and the Referrer value will never be sent. Must\n be kept synchronized with net::URLRequest::ReferrerPolicy from Chromium.\n"]
pub type cef_referrer_policy_t = ::std::os::raw::c_uint;
#[doc = "\n Some or all of the pre-filter data was read successfully but more data is\n needed in order to continue filtering (filtered output is pending).\n"]
pub const cef_response_filter_status_t_RESPONSE_FILTER_NEED_MORE_DATA:
    cef_response_filter_status_t = 0;
#[doc = "\n Some or all of the pre-filter data was read successfully and all available\n filtered output has been written.\n"]
pub const cef_response_filter_status_t_RESPONSE_FILTER_DONE: cef_response_filter_status_t = 1;
#[doc = "\n An error occurred during filtering.\n"]
pub const cef_response_filter_status_t_RESPONSE_FILTER_ERROR: cef_response_filter_status_t = 2;
#[doc = "\n Return values for CefResponseFilter::Filter().\n"]
pub type cef_response_filter_status_t = ::std::os::raw::c_uint;
#[doc = "\n RGBA with 8 bits per pixel (32bits total).\n"]
pub const cef_color_type_t_CEF_COLOR_TYPE_RGBA_8888: cef_color_type_t = 0;
#[doc = "\n BGRA with 8 bits per pixel (32bits total).\n"]
pub const cef_color_type_t_CEF_COLOR_TYPE_BGRA_8888: cef_color_type_t = 1;
#[doc = "\n Describes how to interpret the components of a pixel.\n"]
pub type cef_color_type_t = ::std::os::raw::c_uint;
#[doc = "\n No transparency. The alpha component is ignored.\n"]
pub const cef_alpha_type_t_CEF_ALPHA_TYPE_OPAQUE: cef_alpha_type_t = 0;
#[doc = "\n Transparency with pre-multiplied alpha component.\n"]
pub const cef_alpha_type_t_CEF_ALPHA_TYPE_PREMULTIPLIED: cef_alpha_type_t = 1;
#[doc = "\n Transparency with post-multiplied alpha component.\n"]
pub const cef_alpha_type_t_CEF_ALPHA_TYPE_POSTMULTIPLIED: cef_alpha_type_t = 2;
#[doc = "\n Describes how to interpret the alpha component of a pixel.\n"]
pub type cef_alpha_type_t = ::std::os::raw::c_uint;
pub const cef_text_style_t_CEF_TEXT_STYLE_BOLD: cef_text_style_t = 0;
pub const cef_text_style_t_CEF_TEXT_STYLE_ITALIC: cef_text_style_t = 1;
pub const cef_text_style_t_CEF_TEXT_STYLE_STRIKE: cef_text_style_t = 2;
pub const cef_text_style_t_CEF_TEXT_STYLE_DIAGONAL_STRIKE: cef_text_style_t = 3;
pub const cef_text_style_t_CEF_TEXT_STYLE_UNDERLINE: cef_text_style_t = 4;
#[doc = "\n Text style types. Should be kepy in sync with gfx::TextStyle.\n"]
pub type cef_text_style_t = ::std::os::raw::c_uint;
#[doc = "\n Child views will be left-aligned.\n"]
pub const cef_main_axis_alignment_t_CEF_MAIN_AXIS_ALIGNMENT_START: cef_main_axis_alignment_t = 0;
#[doc = "\n Child views will be center-aligned.\n"]
pub const cef_main_axis_alignment_t_CEF_MAIN_AXIS_ALIGNMENT_CENTER: cef_main_axis_alignment_t = 1;
#[doc = "\n Child views will be right-aligned.\n"]
pub const cef_main_axis_alignment_t_CEF_MAIN_AXIS_ALIGNMENT_END: cef_main_axis_alignment_t = 2;
#[doc = "\n Specifies where along the main axis the CefBoxLayout child views should be\n laid out.\n"]
pub type cef_main_axis_alignment_t = ::std::os::raw::c_uint;
#[doc = "\n Child views will be stretched to fit.\n"]
pub const cef_cross_axis_alignment_t_CEF_CROSS_AXIS_ALIGNMENT_STRETCH: cef_cross_axis_alignment_t =
    0;
#[doc = "\n Child views will be left-aligned.\n"]
pub const cef_cross_axis_alignment_t_CEF_CROSS_AXIS_ALIGNMENT_START: cef_cross_axis_alignment_t = 1;
#[doc = "\n Child views will be center-aligned.\n"]
pub const cef_cross_axis_alignment_t_CEF_CROSS_AXIS_ALIGNMENT_CENTER: cef_cross_axis_alignment_t =
    2;
#[doc = "\n Child views will be right-aligned.\n"]
pub const cef_cross_axis_alignment_t_CEF_CROSS_AXIS_ALIGNMENT_END: cef_cross_axis_alignment_t = 3;
#[doc = "\n Specifies where along the cross axis the CefBoxLayout child views should be\n laid out.\n"]
pub type cef_cross_axis_alignment_t = ::std::os::raw::c_uint;
#[doc = "\n Settings used when initializing a CefBoxLayout.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_settings_t {
    #[doc = "\n If true (1) the layout will be horizontal, otherwise the layout will be\n vertical.\n"]
    pub horizontal:                       ::std::os::raw::c_int,
    #[doc = "\n Adds additional horizontal space between the child view area and the host\n view border.\n"]
    pub inside_border_horizontal_spacing: ::std::os::raw::c_int,
    #[doc = "\n Adds additional vertical space between the child view area and the host\n view border.\n"]
    pub inside_border_vertical_spacing:   ::std::os::raw::c_int,
    #[doc = "\n Adds additional space around the child view area.\n"]
    pub inside_border_insets:             cef_insets_t,
    #[doc = "\n Adds additional space between child views.\n"]
    pub between_child_spacing:            ::std::os::raw::c_int,
    #[doc = "\n Specifies where along the main axis the child views should be laid out.\n"]
    pub main_axis_alignment:              cef_main_axis_alignment_t,
    #[doc = "\n Specifies where along the cross axis the child views should be laid out.\n"]
    pub cross_axis_alignment:             cef_cross_axis_alignment_t,
    #[doc = "\n Minimum cross axis size.\n"]
    pub minimum_cross_axis_size:          ::std::os::raw::c_int,
    #[doc = "\n Default flex for views when none is specified via CefBoxLayout methods.\n Using the preferred size as the basis, free space along the main axis is\n distributed to views in the ratio of their flex weights. Similarly, if the\n views will overflow the parent, space is subtracted in these ratios. A\n flex of 0 means this view is not resized. Flex values must not be\n negative.\n"]
    pub default_flex:                     ::std::os::raw::c_int
}
#[doc = "\n Settings used when initializing a CefBoxLayout.\n"]
pub type cef_box_layout_settings_t = _cef_box_layout_settings_t;
pub const cef_button_state_t_CEF_BUTTON_STATE_NORMAL: cef_button_state_t = 0;
pub const cef_button_state_t_CEF_BUTTON_STATE_HOVERED: cef_button_state_t = 1;
pub const cef_button_state_t_CEF_BUTTON_STATE_PRESSED: cef_button_state_t = 2;
pub const cef_button_state_t_CEF_BUTTON_STATE_DISABLED: cef_button_state_t = 3;
#[doc = "\n Specifies the button display state.\n"]
pub type cef_button_state_t = ::std::os::raw::c_uint;
#[doc = "\n Align the text's left edge with that of its display area.\n"]
pub const cef_horizontal_alignment_t_CEF_HORIZONTAL_ALIGNMENT_LEFT: cef_horizontal_alignment_t = 0;
#[doc = "\n Align the text's center with that of its display area.\n"]
pub const cef_horizontal_alignment_t_CEF_HORIZONTAL_ALIGNMENT_CENTER: cef_horizontal_alignment_t =
    1;
#[doc = "\n Align the text's right edge with that of its display area.\n"]
pub const cef_horizontal_alignment_t_CEF_HORIZONTAL_ALIGNMENT_RIGHT: cef_horizontal_alignment_t = 2;
#[doc = "\n Specifies the horizontal text alignment mode.\n"]
pub type cef_horizontal_alignment_t = ::std::os::raw::c_uint;
pub const cef_menu_anchor_position_t_CEF_MENU_ANCHOR_TOPLEFT: cef_menu_anchor_position_t = 0;
pub const cef_menu_anchor_position_t_CEF_MENU_ANCHOR_TOPRIGHT: cef_menu_anchor_position_t = 1;
pub const cef_menu_anchor_position_t_CEF_MENU_ANCHOR_BOTTOMCENTER: cef_menu_anchor_position_t = 2;
#[doc = "\n Specifies how a menu will be anchored for non-RTL languages. The opposite\n position will be used for RTL languages.\n"]
pub type cef_menu_anchor_position_t = ::std::os::raw::c_uint;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_TEXT: cef_menu_color_type_t = 0;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_TEXT_HOVERED: cef_menu_color_type_t = 1;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_TEXT_ACCELERATOR: cef_menu_color_type_t = 2;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED: cef_menu_color_type_t = 3;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_BACKGROUND: cef_menu_color_type_t = 4;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_BACKGROUND_HOVERED: cef_menu_color_type_t = 5;
pub const cef_menu_color_type_t_CEF_MENU_COLOR_COUNT: cef_menu_color_type_t = 6;
#[doc = "\n Supported color types for menu items.\n"]
pub type cef_menu_color_type_t = ::std::os::raw::c_uint;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_UNKNOWN: cef_ssl_version_t = 0;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_SSL2: cef_ssl_version_t = 1;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_SSL3: cef_ssl_version_t = 2;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1: cef_ssl_version_t = 3;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1_1: cef_ssl_version_t = 4;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1_2: cef_ssl_version_t = 5;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1_3: cef_ssl_version_t = 6;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_QUIC: cef_ssl_version_t = 7;
#[doc = " Supported SSL version values. See net/ssl/ssl_connection_status_flags.h\n for more information."]
pub type cef_ssl_version_t = ::std::os::raw::c_uint;
pub const cef_ssl_content_status_t_SSL_CONTENT_NORMAL_CONTENT: cef_ssl_content_status_t = 0;
pub const cef_ssl_content_status_t_SSL_CONTENT_DISPLAYED_INSECURE_CONTENT:
    cef_ssl_content_status_t = 1;
pub const cef_ssl_content_status_t_SSL_CONTENT_RAN_INSECURE_CONTENT: cef_ssl_content_status_t = 2;
#[doc = " Supported SSL content status flags. See content/public/common/ssl_status.h\n for more information."]
pub type cef_ssl_content_status_t = ::std::os::raw::c_uint;
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_NONE: cef_scheme_options_t = 0;
#[doc = " For non-standard scheme URLs only the \"scheme:\" component is parsed and\n canonicalized. The remainder of the URL will be passed to the handler as-\n is. For example, \"scheme:///some%20text\" will remain the same.\n Non-standard scheme URLs cannot be used as a target for form submission.\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_STANDARD: cef_scheme_options_t = 1;
#[doc = "\n If CEF_SCHEME_OPTION_LOCAL is set the scheme will be treated with the same\n security rules as those applied to \"file\" URLs. Normal pages cannot link\n to or access local URLs. Also, by default, local URLs can only perform\n XMLHttpRequest calls to the same URL (origin + path) that originated the\n request. To allow XMLHttpRequest calls from a local URL to other URLs with\n the same origin set the CefSettings.file_access_from_file_urls_allowed\n value to true (1). To allow XMLHttpRequest calls from a local URL to all\n origins set the CefSettings.universal_access_from_file_urls_allowed value\n to true (1).\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_LOCAL: cef_scheme_options_t = 2;
#[doc = "\n If CEF_SCHEME_OPTION_DISPLAY_ISOLATED is set the scheme can only be\n displayed from other content hosted with the same scheme. For example,\n pages in other origins cannot create iframes or hyperlinks to URLs with\n the scheme. For schemes that must be accessible from other schemes don't\n set this, set CEF_SCHEME_OPTION_CORS_ENABLED, and use CORS\n \"Access-Control-Allow-Origin\" headers to further restrict access.\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_DISPLAY_ISOLATED: cef_scheme_options_t = 4;
#[doc = "\n If CEF_SCHEME_OPTION_SECURE is set the scheme will be treated with the\n same security rules as those applied to \"https\" URLs. For example, loading\n this scheme from other secure schemes will not trigger mixed content\n warnings.\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_SECURE: cef_scheme_options_t = 8;
#[doc = "\n If CEF_SCHEME_OPTION_CORS_ENABLED is set the scheme can be sent CORS\n requests. This value should be set in most cases where\n CEF_SCHEME_OPTION_STANDARD is set.\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_CORS_ENABLED: cef_scheme_options_t = 16;
#[doc = "\n If CEF_SCHEME_OPTION_CSP_BYPASSING is set the scheme can bypass Content-\n Security-Policy (CSP) checks. This value should not be set in most cases\n where CEF_SCHEME_OPTION_STANDARD is set.\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_CSP_BYPASSING: cef_scheme_options_t = 32;
#[doc = "\n If CEF_SCHEME_OPTION_FETCH_ENABLED is set the scheme can perform Fetch API\n requests.\n"]
pub const cef_scheme_options_t_CEF_SCHEME_OPTION_FETCH_ENABLED: cef_scheme_options_t = 64;
#[doc = " Configuration options for registering a custom scheme.\n These values are used when calling AddCustomScheme."]
pub type cef_scheme_options_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing a range.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_range_t {
    pub from: u32,
    pub to:   u32
}
#[doc = "\n Structure representing a range.\n"]
pub type cef_range_t = _cef_range_t;
pub const cef_composition_underline_style_t_CEF_CUS_SOLID: cef_composition_underline_style_t = 0;
pub const cef_composition_underline_style_t_CEF_CUS_DOT: cef_composition_underline_style_t = 1;
pub const cef_composition_underline_style_t_CEF_CUS_DASH: cef_composition_underline_style_t = 2;
pub const cef_composition_underline_style_t_CEF_CUS_NONE: cef_composition_underline_style_t = 3;
#[doc = "\n Composition underline style.\n"]
pub type cef_composition_underline_style_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing IME composition underline information. This is a thin\n wrapper around Blink's WebCompositionUnderline class and should be kept in\n sync with that.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_composition_underline_t {
    #[doc = "\n Underline character range.\n"]
    pub range:            cef_range_t,
    #[doc = "\n Text color.\n"]
    pub color:            cef_color_t,
    #[doc = "\n Background color.\n"]
    pub background_color: cef_color_t,
    #[doc = "\n Set to true (1) for thick underline.\n"]
    pub thick:            ::std::os::raw::c_int,
    #[doc = "\n Style.\n"]
    pub style:            cef_composition_underline_style_t
}
#[doc = "\n Structure representing IME composition underline information. This is a thin\n wrapper around Blink's WebCompositionUnderline class and should be kept in\n sync with that.\n"]
pub type cef_composition_underline_t = _cef_composition_underline_t;
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_NONE: cef_channel_layout_t = 0;
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_UNSUPPORTED: cef_channel_layout_t = 1;
#[doc = " Front C"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_MONO: cef_channel_layout_t = 2;
#[doc = " Front L, Front R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_STEREO: cef_channel_layout_t = 3;
#[doc = " Front L, Front R, Back C"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_2_1: cef_channel_layout_t = 4;
#[doc = " Front L, Front R, Front C"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_SURROUND: cef_channel_layout_t = 5;
#[doc = " Front L, Front R, Front C, Back C"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_4_0: cef_channel_layout_t = 6;
#[doc = " Front L, Front R, Side L, Side R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_2_2: cef_channel_layout_t = 7;
#[doc = " Front L, Front R, Back L, Back R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_QUAD: cef_channel_layout_t = 8;
#[doc = " Front L, Front R, Front C, Side L, Side R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_5_0: cef_channel_layout_t = 9;
#[doc = " Front L, Front R, Front C, LFE, Side L, Side R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_5_1: cef_channel_layout_t = 10;
#[doc = " Front L, Front R, Front C, Back L, Back R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_5_0_BACK: cef_channel_layout_t = 11;
#[doc = " Front L, Front R, Front C, LFE, Back L, Back R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_5_1_BACK: cef_channel_layout_t = 12;
#[doc = " Front L, Front R, Front C, Side L, Side R, Back L, Back R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_7_0: cef_channel_layout_t = 13;
#[doc = " Front L, Front R, Front C, LFE, Side L, Side R, Back L, Back R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_7_1: cef_channel_layout_t = 14;
#[doc = " Front L, Front R, Front C, LFE, Side L, Side R, Front LofC, Front RofC"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_7_1_WIDE: cef_channel_layout_t = 15;
#[doc = " Stereo L, Stereo R"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX: cef_channel_layout_t = 16;
#[doc = " Stereo L, Stereo R, LFE"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_2POINT1: cef_channel_layout_t = 17;
#[doc = " Stereo L, Stereo R, Front C, LFE"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_3_1: cef_channel_layout_t = 18;
#[doc = " Stereo L, Stereo R, Front C, Rear C, LFE"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_4_1: cef_channel_layout_t = 19;
#[doc = " Stereo L, Stereo R, Front C, Side L, Side R, Back C"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_6_0: cef_channel_layout_t = 20;
#[doc = " Stereo L, Stereo R, Side L, Side R, Front LofC, Front RofC"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_6_0_FRONT: cef_channel_layout_t = 21;
#[doc = " Stereo L, Stereo R, Front C, Rear L, Rear R, Rear C"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_HEXAGONAL: cef_channel_layout_t = 22;
#[doc = " Stereo L, Stereo R, Front C, LFE, Side L, Side R, Rear Center"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_6_1: cef_channel_layout_t = 23;
#[doc = " Stereo L, Stereo R, Front C, LFE, Back L, Back R, Rear Center"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_6_1_BACK: cef_channel_layout_t = 24;
#[doc = " Stereo L, Stereo R, Side L, Side R, Front LofC, Front RofC, LFE"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_6_1_FRONT: cef_channel_layout_t = 25;
#[doc = " Front L, Front R, Front C, Side L, Side R, Front LofC, Front RofC"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_7_0_FRONT: cef_channel_layout_t = 26;
#[doc = " Front L, Front R, Front C, LFE, Back L, Back R, Front LofC, Front RofC"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK: cef_channel_layout_t = 27;
#[doc = " Front L, Front R, Front C, Side L, Side R, Rear L, Back R, Back C."]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_OCTAGONAL: cef_channel_layout_t = 28;
#[doc = " Channels are not explicitly mapped to speakers."]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_DISCRETE: cef_channel_layout_t = 29;
#[doc = " Front L, Front R, Front C. Front C contains the keyboard mic audio. This\n layout is only intended for input for WebRTC. The Front C channel\n is stripped away in the WebRTC audio input pipeline and never seen outside\n of that."]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC: cef_channel_layout_t =
    30;
#[doc = " Front L, Front R, Side L, Side R, LFE"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE: cef_channel_layout_t = 31;
#[doc = " Actual channel layout is specified in the bitstream and the actual channel\n count is unknown at Chromium media pipeline level (useful for audio\n pass-through mode)."]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_BITSTREAM: cef_channel_layout_t = 32;
#[doc = " Front L, Front R, Front C, LFE, Side L, Side R,\n Front Height L, Front Height R, Rear Height L, Rear Height R\n Will be represented as six channels (5.1) due to eight channel limit\n kMaxConcurrentChannels"]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_5_1_4_DOWNMIX: cef_channel_layout_t = 33;
#[doc = " Max value, must always equal the largest entry ever logged."]
pub const cef_channel_layout_t_CEF_CHANNEL_LAYOUT_MAX: cef_channel_layout_t = 33;
#[doc = "\n Enumerates the various representations of the ordering of audio channels.\n Must be kept synchronized with media::ChannelLayout from Chromium.\n See media\\base\\channel_layout.h\n"]
pub type cef_channel_layout_t = ::std::os::raw::c_uint;
#[doc = "\n Structure representing the audio parameters for setting up the audio\n handler.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_parameters_t {
    #[doc = "\n Layout of the audio channels\n"]
    pub channel_layout:    cef_channel_layout_t,
    #[doc = "\n Sample rate"]
    pub sample_rate:       ::std::os::raw::c_int,
    #[doc = "\n Number of frames per buffer\n"]
    pub frames_per_buffer: ::std::os::raw::c_int
}
#[doc = "\n Structure representing the audio parameters for setting up the audio\n handler.\n"]
pub type cef_audio_parameters_t = _cef_audio_parameters_t;
pub const cef_media_route_create_result_t_CEF_MRCR_UNKNOWN_ERROR: cef_media_route_create_result_t =
    0;
pub const cef_media_route_create_result_t_CEF_MRCR_OK: cef_media_route_create_result_t = 1;
pub const cef_media_route_create_result_t_CEF_MRCR_TIMED_OUT: cef_media_route_create_result_t = 2;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_NOT_FOUND:
    cef_media_route_create_result_t = 3;
pub const cef_media_route_create_result_t_CEF_MRCR_SINK_NOT_FOUND: cef_media_route_create_result_t =
    4;
pub const cef_media_route_create_result_t_CEF_MRCR_INVALID_ORIGIN: cef_media_route_create_result_t =
    5;
pub const cef_media_route_create_result_t_CEF_MRCR_NO_SUPPORTED_PROVIDER:
    cef_media_route_create_result_t = 7;
pub const cef_media_route_create_result_t_CEF_MRCR_CANCELLED: cef_media_route_create_result_t = 8;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_ALREADY_EXISTS:
    cef_media_route_create_result_t = 9;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_ALREADY_TERMINATED:
    cef_media_route_create_result_t = 11;
#[doc = "\n Result codes for CefMediaRouter::CreateRoute. Should be kept in sync with\n Chromium's media_router::mojom::RouteRequestResultCode type.\n"]
pub type cef_media_route_create_result_t = ::std::os::raw::c_uint;
pub const cef_media_route_connection_state_t_CEF_MRCS_UNKNOWN: cef_media_route_connection_state_t =
    0;
pub const cef_media_route_connection_state_t_CEF_MRCS_CONNECTING:
    cef_media_route_connection_state_t = 1;
pub const cef_media_route_connection_state_t_CEF_MRCS_CONNECTED:
    cef_media_route_connection_state_t = 2;
pub const cef_media_route_connection_state_t_CEF_MRCS_CLOSED: cef_media_route_connection_state_t =
    3;
pub const cef_media_route_connection_state_t_CEF_MRCS_TERMINATED:
    cef_media_route_connection_state_t = 4;
#[doc = "\n Connection state for a MediaRoute object.\n"]
pub type cef_media_route_connection_state_t = ::std::os::raw::c_uint;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST: cef_media_sink_icon_type_t = 0;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST_AUDIO_GROUP: cef_media_sink_icon_type_t = 1;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST_AUDIO: cef_media_sink_icon_type_t = 2;
pub const cef_media_sink_icon_type_t_CEF_MSIT_MEETING: cef_media_sink_icon_type_t = 3;
pub const cef_media_sink_icon_type_t_CEF_MSIT_HANGOUT: cef_media_sink_icon_type_t = 4;
pub const cef_media_sink_icon_type_t_CEF_MSIT_EDUCATION: cef_media_sink_icon_type_t = 5;
pub const cef_media_sink_icon_type_t_CEF_MSIT_WIRED_DISPLAY: cef_media_sink_icon_type_t = 6;
pub const cef_media_sink_icon_type_t_CEF_MSIT_GENERIC: cef_media_sink_icon_type_t = 7;
pub const cef_media_sink_icon_type_t_CEF_MSIT_TOTAL_COUNT: cef_media_sink_icon_type_t = 8;
#[doc = "\n Icon types for a MediaSink object. Should be kept in sync with Chromium's\n media_router::SinkIconType type.\n"]
pub type cef_media_sink_icon_type_t = ::std::os::raw::c_uint;
#[doc = "\n Device information for a MediaSink object.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_t {
    pub ip_address: cef_string_t,
    pub port:       ::std::os::raw::c_int,
    pub model_name: cef_string_t
}
#[doc = "\n Device information for a MediaSink object.\n"]
pub type cef_media_sink_device_info_t = _cef_media_sink_device_info_t;
pub const cef_text_field_commands_t_CEF_TFC_CUT: cef_text_field_commands_t = 1;
pub const cef_text_field_commands_t_CEF_TFC_COPY: cef_text_field_commands_t = 2;
pub const cef_text_field_commands_t_CEF_TFC_PASTE: cef_text_field_commands_t = 3;
pub const cef_text_field_commands_t_CEF_TFC_UNDO: cef_text_field_commands_t = 4;
pub const cef_text_field_commands_t_CEF_TFC_DELETE: cef_text_field_commands_t = 5;
pub const cef_text_field_commands_t_CEF_TFC_SELECT_ALL: cef_text_field_commands_t = 6;
#[doc = "\n Represents commands available to TextField.\n"]
pub type cef_text_field_commands_t = ::std::os::raw::c_uint;
pub const cef_chrome_toolbar_type_t_CEF_CTT_NONE: cef_chrome_toolbar_type_t = 1;
pub const cef_chrome_toolbar_type_t_CEF_CTT_NORMAL: cef_chrome_toolbar_type_t = 2;
pub const cef_chrome_toolbar_type_t_CEF_CTT_LOCATION: cef_chrome_toolbar_type_t = 3;
#[doc = "\n Chrome toolbar types.\n"]
pub type cef_chrome_toolbar_type_t = ::std::os::raw::c_uint;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_BOOKMARK_STAR:
    cef_chrome_page_action_icon_type_t = 0;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_CLICK_TO_CALL:
    cef_chrome_page_action_icon_type_t = 1;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_COOKIE_CONTROLS:
    cef_chrome_page_action_icon_type_t = 2;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_FILE_SYSTEM_ACCESS:
    cef_chrome_page_action_icon_type_t = 3;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_FIND: cef_chrome_page_action_icon_type_t = 4;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_HIGH_EFFICIENCY:
    cef_chrome_page_action_icon_type_t = 5;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_INTENT_PICKER:
    cef_chrome_page_action_icon_type_t = 6;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_LOCAL_CARD_MIGRATION:
    cef_chrome_page_action_icon_type_t = 7;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_MANAGE_PASSWORDS:
    cef_chrome_page_action_icon_type_t = 8;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_PAYMENTS_OFFER_NOTIFICATION:
    cef_chrome_page_action_icon_type_t = 9;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_PRICE_TRACKING:
    cef_chrome_page_action_icon_type_t = 10;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_PWA_INSTALL:
    cef_chrome_page_action_icon_type_t = 11;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_QR_CODE_GENERATOR:
    cef_chrome_page_action_icon_type_t = 12;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_READER_MODE:
    cef_chrome_page_action_icon_type_t = 13;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SAVE_AUTOFILL_ADDRESS:
    cef_chrome_page_action_icon_type_t = 14;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SAVE_CARD:
    cef_chrome_page_action_icon_type_t = 15;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SEND_TAB_TO_SELF:
    cef_chrome_page_action_icon_type_t = 16;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SHARING_HUB:
    cef_chrome_page_action_icon_type_t = 17;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SIDE_SEARCH:
    cef_chrome_page_action_icon_type_t = 18;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SMS_REMOTE_FETCHER:
    cef_chrome_page_action_icon_type_t = 19;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_TRANSLATE:
    cef_chrome_page_action_icon_type_t = 20;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_VIRTUAL_CARD_ENROLL:
    cef_chrome_page_action_icon_type_t = 21;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_VIRTUAL_CARD_MANUAL_FALLBACK:
    cef_chrome_page_action_icon_type_t = 22;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_ZOOM: cef_chrome_page_action_icon_type_t =
    23;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_SAVE_IBAN:
    cef_chrome_page_action_icon_type_t = 24;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_MANDATORY_REAUTH:
    cef_chrome_page_action_icon_type_t = 25;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_PRICE_INSIGHTS:
    cef_chrome_page_action_icon_type_t = 26;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_PRICE_READ_ANYTHING:
    cef_chrome_page_action_icon_type_t = 27;
pub const cef_chrome_page_action_icon_type_t_CEF_CPAIT_MAX_VALUE:
    cef_chrome_page_action_icon_type_t = 27;
#[doc = "\n Chrome page action icon types. Should be kept in sync with Chromium's\n PageActionIconType type.\n"]
pub type cef_chrome_page_action_icon_type_t = ::std::os::raw::c_uint;
pub const cef_chrome_toolbar_button_type_t_CEF_CTBT_CAST: cef_chrome_toolbar_button_type_t = 0;
pub const cef_chrome_toolbar_button_type_t_CEF_CTBT_DOWNLOAD: cef_chrome_toolbar_button_type_t = 1;
pub const cef_chrome_toolbar_button_type_t_CEF_CTBT_SEND_TAB_TO_SELF:
    cef_chrome_toolbar_button_type_t = 2;
pub const cef_chrome_toolbar_button_type_t_CEF_CTBT_SIDE_PANEL: cef_chrome_toolbar_button_type_t =
    3;
pub const cef_chrome_toolbar_button_type_t_CEF_CTBT_MAX_VALUE: cef_chrome_toolbar_button_type_t = 3;
#[doc = "\n Chrome toolbar button types. Should be kept in sync with CEF's internal\n ToolbarButtonType type.\n"]
pub type cef_chrome_toolbar_button_type_t = ::std::os::raw::c_uint;
pub const cef_docking_mode_t_CEF_DOCKING_MODE_TOP_LEFT: cef_docking_mode_t = 1;
pub const cef_docking_mode_t_CEF_DOCKING_MODE_TOP_RIGHT: cef_docking_mode_t = 2;
pub const cef_docking_mode_t_CEF_DOCKING_MODE_BOTTOM_LEFT: cef_docking_mode_t = 3;
pub const cef_docking_mode_t_CEF_DOCKING_MODE_BOTTOM_RIGHT: cef_docking_mode_t = 4;
pub const cef_docking_mode_t_CEF_DOCKING_MODE_CUSTOM: cef_docking_mode_t = 5;
#[doc = "\n Docking modes supported by CefWindow::AddOverlay.\n"]
pub type cef_docking_mode_t = ::std::os::raw::c_uint;
pub const cef_show_state_t_CEF_SHOW_STATE_NORMAL: cef_show_state_t = 1;
pub const cef_show_state_t_CEF_SHOW_STATE_MINIMIZED: cef_show_state_t = 2;
pub const cef_show_state_t_CEF_SHOW_STATE_MAXIMIZED: cef_show_state_t = 3;
pub const cef_show_state_t_CEF_SHOW_STATE_FULLSCREEN: cef_show_state_t = 4;
pub const cef_show_state_t_CEF_SHOW_STATE_HIDDEN: cef_show_state_t = 5;
#[doc = "\n Show states supported by CefWindowDelegate::GetInitialShowState.\n"]
pub type cef_show_state_t = ::std::os::raw::c_uint;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_NONE: cef_touch_handle_state_flags_t = 0;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ENABLED: cef_touch_handle_state_flags_t = 1;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ORIENTATION: cef_touch_handle_state_flags_t =
    2;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ORIGIN: cef_touch_handle_state_flags_t = 4;
pub const cef_touch_handle_state_flags_t_CEF_THS_FLAG_ALPHA: cef_touch_handle_state_flags_t = 8;
#[doc = "\n Values indicating what state of the touch handle is set.\n"]
pub type cef_touch_handle_state_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_touch_handle_state_t {
    #[doc = "\n Touch handle id. Increments for each new touch handle.\n"]
    pub touch_handle_id:   ::std::os::raw::c_int,
    #[doc = "\n Combination of cef_touch_handle_state_flags_t values indicating what state\n is set.\n"]
    pub flags:             u32,
    #[doc = "\n Enabled state. Only set if |flags| contains CEF_THS_FLAG_ENABLED.\n"]
    pub enabled:           ::std::os::raw::c_int,
    #[doc = "\n Orientation state. Only set if |flags| contains CEF_THS_FLAG_ORIENTATION.\n"]
    pub orientation:       cef_horizontal_alignment_t,
    pub mirror_vertical:   ::std::os::raw::c_int,
    pub mirror_horizontal: ::std::os::raw::c_int,
    #[doc = "\n Origin state. Only set if |flags| contains CEF_THS_FLAG_ORIGIN.\n"]
    pub origin:            cef_point_t,
    #[doc = "\n Alpha state. Only set if |flags| contains CEF_THS_FLAG_ALPHA.\n"]
    pub alpha:             f32
}
pub type cef_touch_handle_state_t = _cef_touch_handle_state_t;
#[doc = "\n No permission.\n"]
pub const cef_media_access_permission_types_t_CEF_MEDIA_PERMISSION_NONE:
    cef_media_access_permission_types_t = 0;
#[doc = "\n Device audio capture permission.\n"]
pub const cef_media_access_permission_types_t_CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE:
    cef_media_access_permission_types_t = 1;
#[doc = "\n Device video capture permission.\n"]
pub const cef_media_access_permission_types_t_CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE:
    cef_media_access_permission_types_t = 2;
#[doc = "\n Desktop audio capture permission.\n"]
pub const cef_media_access_permission_types_t_CEF_MEDIA_PERMISSION_DESKTOP_AUDIO_CAPTURE:
    cef_media_access_permission_types_t = 4;
#[doc = "\n Desktop video capture permission.\n"]
pub const cef_media_access_permission_types_t_CEF_MEDIA_PERMISSION_DESKTOP_VIDEO_CAPTURE:
    cef_media_access_permission_types_t = 8;
#[doc = "\n Media access permissions used by OnRequestMediaAccessPermission.\n"]
pub type cef_media_access_permission_types_t = ::std::os::raw::c_uint;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_NONE: cef_permission_request_types_t =
    0;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_ACCESSIBILITY_EVENTS:
    cef_permission_request_types_t = 1;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_AR_SESSION:
    cef_permission_request_types_t = 2;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_CAMERA_PAN_TILT_ZOOM:
    cef_permission_request_types_t = 4;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_CAMERA_STREAM:
    cef_permission_request_types_t = 8;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_CLIPBOARD:
    cef_permission_request_types_t = 16;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_TOP_LEVEL_STORAGE_ACCESS:
    cef_permission_request_types_t = 32;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_DISK_QUOTA:
    cef_permission_request_types_t = 64;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_LOCAL_FONTS:
    cef_permission_request_types_t = 128;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_GEOLOCATION:
    cef_permission_request_types_t = 256;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_IDLE_DETECTION:
    cef_permission_request_types_t = 512;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_MIC_STREAM:
    cef_permission_request_types_t = 1024;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_MIDI: cef_permission_request_types_t =
    2048;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_MIDI_SYSEX:
    cef_permission_request_types_t = 4096;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_MULTIPLE_DOWNLOADS:
    cef_permission_request_types_t = 8192;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_NOTIFICATIONS:
    cef_permission_request_types_t = 16384;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_PROTECTED_MEDIA_IDENTIFIER:
    cef_permission_request_types_t = 32768;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_REGISTER_PROTOCOL_HANDLER:
    cef_permission_request_types_t = 65536;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_STORAGE_ACCESS:
    cef_permission_request_types_t = 131072;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_VR_SESSION:
    cef_permission_request_types_t = 262144;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_WINDOW_MANAGEMENT:
    cef_permission_request_types_t = 524288;
pub const cef_permission_request_types_t_CEF_PERMISSION_TYPE_FILE_SYSTEM_ACCESS:
    cef_permission_request_types_t = 1048576;
#[doc = "\n Permission types used with OnShowPermissionPrompt. Some types are\n platform-specific or only supported with the Chrome runtime. Should be kept\n in sync with Chromium's permissions::RequestType type.\n"]
pub type cef_permission_request_types_t = ::std::os::raw::c_uint;
#[doc = "\n Accept the permission request as an explicit user action.\n"]
pub const cef_permission_request_result_t_CEF_PERMISSION_RESULT_ACCEPT:
    cef_permission_request_result_t = 0;
#[doc = "\n Deny the permission request as an explicit user action.\n"]
pub const cef_permission_request_result_t_CEF_PERMISSION_RESULT_DENY:
    cef_permission_request_result_t = 1;
#[doc = "\n Dismiss the permission request as an explicit user action.\n"]
pub const cef_permission_request_result_t_CEF_PERMISSION_RESULT_DISMISS:
    cef_permission_request_result_t = 2;
#[doc = "\n Ignore the permission request. If the prompt remains unhandled (e.g.\n OnShowPermissionPrompt returns false and there is no default permissions\n UI) then any related promises may remain unresolved.\n"]
pub const cef_permission_request_result_t_CEF_PERMISSION_RESULT_IGNORE:
    cef_permission_request_result_t = 3;
#[doc = "\n Permission request results.\n"]
pub type cef_permission_request_result_t = ::std::os::raw::c_uint;
#[doc = " Valid certificate using the IP (127.0.0.1). Loads the \"ok_cert.pem\" file."]
pub const cef_test_cert_type_t_CEF_TEST_CERT_OK_IP: cef_test_cert_type_t = 0;
#[doc = " Valid certificate using the domain (\"localhost\"). Loads the\n \"localhost_cert.pem\" file."]
pub const cef_test_cert_type_t_CEF_TEST_CERT_OK_DOMAIN: cef_test_cert_type_t = 1;
#[doc = " Expired certificate. Loads the \"expired_cert.pem\" file."]
pub const cef_test_cert_type_t_CEF_TEST_CERT_EXPIRED: cef_test_cert_type_t = 2;
#[doc = "\n Certificate types supported by CefTestServer::CreateAndStart. The matching\n certificate file must exist in the \"net/data/ssl/certificates\" directory.\n See CefSetDataDirectoryForTests() for related configuration.\n"]
pub type cef_test_cert_type_t = ::std::os::raw::c_uint;
#[doc = " Global preferences registered a single time at application startup."]
pub const cef_preferences_type_t_CEF_PREFERENCES_TYPE_GLOBAL: cef_preferences_type_t = 0;
#[doc = " Request context preferences registered each time a new CefRequestContext\n is created."]
pub const cef_preferences_type_t_CEF_PREFERENCES_TYPE_REQUEST_CONTEXT: cef_preferences_type_t = 1;
#[doc = "\n Preferences type passed to\n CefBrowserProcessHandler::OnRegisterCustomPreferences.\n"]
pub type cef_preferences_type_t = ::std::os::raw::c_uint;
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_NONE:
    cef_download_interrupt_reason_t = 0;
#[doc = " Generic file operation failure."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_FAILED:
    cef_download_interrupt_reason_t = 1;
#[doc = " The file cannot be accessed due to security restrictions."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_ACCESS_DENIED:
    cef_download_interrupt_reason_t = 2;
#[doc = " There is not enough room on the drive."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_NO_SPACE:
    cef_download_interrupt_reason_t = 3;
#[doc = " The directory or file name is too long."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_NAME_TOO_LONG:
    cef_download_interrupt_reason_t = 5;
#[doc = " The file is too large for the file system to handle."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_LARGE:
    cef_download_interrupt_reason_t = 6;
#[doc = " The file contains a virus."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_VIRUS_INFECTED:
    cef_download_interrupt_reason_t = 7;
#[doc = " The file was in use. Too many files are opened at once. We have run out of\n memory."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_TRANSIENT_ERROR:
    cef_download_interrupt_reason_t = 10;
#[doc = " The file was blocked due to local policy."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_BLOCKED:
    cef_download_interrupt_reason_t = 11;
#[doc = " An attempt to check the safety of the download failed due to unexpected\n reasons. See http://crbug.com/153212."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_SECURITY_CHECK_FAILED : cef_download_interrupt_reason_t = 12 ;
#[doc = " An attempt was made to seek past the end of a file in opening\n a file (as part of resuming a previously interrupted download)."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_SHORT:
    cef_download_interrupt_reason_t = 13;
#[doc = " The partial file didn't match the expected hash."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_HASH_MISMATCH:
    cef_download_interrupt_reason_t = 14;
#[doc = " The source and the target of the download were the same."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_FILE_SAME_AS_SOURCE:
    cef_download_interrupt_reason_t = 15;
#[doc = " Generic network failure."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_FAILED:
    cef_download_interrupt_reason_t = 20;
#[doc = " The network operation timed out."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_TIMEOUT:
    cef_download_interrupt_reason_t = 21;
#[doc = " The network connection has been lost."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_DISCONNECTED:
    cef_download_interrupt_reason_t = 22;
#[doc = " The server has gone down."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_SERVER_DOWN:
    cef_download_interrupt_reason_t = 23;
#[doc = " The network request was invalid. This may be due to the original URL or a\n redirected URL:\n - Having an unsupported scheme.\n - Being an invalid URL.\n - Being disallowed by policy."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_NETWORK_INVALID_REQUEST:
    cef_download_interrupt_reason_t = 24;
#[doc = " The server indicates that the operation has failed (generic)."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_FAILED:
    cef_download_interrupt_reason_t = 30;
#[doc = " The server does not support range requests.\n Internal use only:  must restart from the beginning."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_NO_RANGE:
    cef_download_interrupt_reason_t = 31;
#[doc = " The server does not have the requested data."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_BAD_CONTENT:
    cef_download_interrupt_reason_t = 33;
#[doc = " Server didn't authorize access to resource."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_UNAUTHORIZED:
    cef_download_interrupt_reason_t = 34;
#[doc = " Server certificate problem."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_CERT_PROBLEM:
    cef_download_interrupt_reason_t = 35;
#[doc = " Server access forbidden."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_FORBIDDEN:
    cef_download_interrupt_reason_t = 36;
#[doc = " Unexpected server response. This might indicate that the responding server\n may not be the intended server."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_UNREACHABLE:
    cef_download_interrupt_reason_t = 37;
#[doc = " The server sent fewer bytes than the content-length header. It may\n indicate that the connection was closed prematurely, or the Content-Length\n header was invalid. The download is only interrupted if strong validators\n are present. Otherwise, it is treated as finished."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_CONTENT_LENGTH_MISMATCH : cef_download_interrupt_reason_t = 38 ;
#[doc = " An unexpected cross-origin redirect happened."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_SERVER_CROSS_ORIGIN_REDIRECT : cef_download_interrupt_reason_t = 39 ;
#[doc = " The user canceled the download."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_USER_CANCELED:
    cef_download_interrupt_reason_t = 40;
#[doc = " The user shut down the browser.\n Internal use only:  resume pending downloads if possible."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_USER_SHUTDOWN:
    cef_download_interrupt_reason_t = 41;
#[doc = " The browser crashed.\n Internal use only:  resume pending downloads if possible."]
pub const cef_download_interrupt_reason_t_CEF_DOWNLOAD_INTERRUPT_REASON_CRASH:
    cef_download_interrupt_reason_t = 50;
#[doc = "\n Download interrupt reasons. Should be kept in sync with\n Chromium's download::DownloadInterruptReason type.\n"]
pub type cef_download_interrupt_reason_t = ::std::os::raw::c_uint;
pub const cef_gesture_command_t_CEF_GESTURE_COMMAND_BACK: cef_gesture_command_t = 0;
pub const cef_gesture_command_t_CEF_GESTURE_COMMAND_FORWARD: cef_gesture_command_t = 1;
#[doc = "\n Specifies the gesture commands.\n"]
pub type cef_gesture_command_t = ::std::os::raw::c_uint;
pub const cef_zoom_command_t_CEF_ZOOM_COMMAND_OUT: cef_zoom_command_t = 0;
pub const cef_zoom_command_t_CEF_ZOOM_COMMAND_RESET: cef_zoom_command_t = 1;
pub const cef_zoom_command_t_CEF_ZOOM_COMMAND_IN: cef_zoom_command_t = 2;
#[doc = "\n Specifies the zoom commands supported by CefBrowserHost::Zoom.\n"]
pub type cef_zoom_command_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_base_ref_counted_t {
    pub size:                 usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int
    >,
    pub has_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int
    >,
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int
    >
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_base_scoped_t {
    pub size: usize,
    pub del:  ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_scoped_t)>
}
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[doc = "\n Generic callback structure used for asynchronous continuation.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Continue processing.\n"]
    pub cont:   ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
    #[doc = "\n Cancel processing.\n"]
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>
}
#[doc = "\n Generic callback structure used for asynchronous continuation.\n"]
pub type cef_callback_t = _cef_callback_t;
#[doc = "\n Generic callback structure used for asynchronous completion.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_completion_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:        cef_base_ref_counted_t,
    #[doc = "\n Method that will be called once the task is complete.\n"]
    pub on_complete:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>
}
#[doc = "\n Generic callback structure used for asynchronous completion.\n"]
pub type cef_completion_callback_t = _cef_completion_callback_t;
#[doc = "\n Structure used for managing cookies. The functions of this structure may be\n called on any thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_manager_t {
    #[doc = "\n Base structure.\n"]
    pub base:              cef_base_ref_counted_t,
    #[doc = "\n Visit all cookies on the UI thread. The returned cookies are ordered by\n longest path, then by earliest creation date. Returns false (0) if cookies\n cannot be accessed.\n"]
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Visit a subset of cookies on the UI thread. The results are filtered by\n the given url scheme, host, domain and path. If |includeHttpOnly| is true\n (1) HTTP-only cookies will also be included in the results. The returned\n cookies are ordered by longest path, then by earliest creation date.\n Returns false (0) if cookies cannot be accessed.\n"]
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets a cookie given a valid URL and explicit user-provided cookie\n attributes. This function expects each attribute to be well-formed. It\n will check for disallowed characters (e.g. the ';' character is disallowed\n within the cookie value attribute) and fail without setting the cookie if\n such characters are found. If |callback| is non-NULL it will be executed\n asnychronously on the UI thread after the cookie has been set. Returns\n false (0) if an invalid URL is specified or if cookies cannot be accessed.\n"]
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Delete all cookies that match the specified parameters. If both |url| and\n |cookie_name| values are specified all host and domain cookies matching\n both will be deleted. If only |url| is specified all host cookies (but not\n domain cookies) irrespective of path will be deleted. If |url| is NULL all\n cookies for all hosts and domains will be deleted. If |callback| is non-\n NULL it will be executed asnychronously on the UI thread after the cookies\n have been deleted. Returns false (0) if a non-NULL invalid URL is\n specified or if cookies cannot be accessed. Cookies can alternately be\n deleted using the Visit*Cookies() functions.\n"]
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Flush the backing store (if any) to disk. If |callback| is non-NULL it\n will be executed asnychronously on the UI thread after the flush is\n complete. Returns false (0) if cookies cannot be accessed.\n"]
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure used for managing cookies. The functions of this structure may be\n called on any thread unless otherwise indicated.\n"]
pub type cef_cookie_manager_t = _cef_cookie_manager_t;
extern "C" {
    #[doc = "\n Returns the global cookie manager. By default data will be stored at\n cef_settings_t.cache_path if specified or in memory otherwise. If |callback|\n is non-NULL it will be executed asnychronously on the UI thread after the\n manager's storage has been initialized. Using this function is equivalent to\n calling cef_request_context_t::cef_request_context_get_global_context()->Get\n DefaultCookieManager().\n"]
    pub fn cef_cookie_manager_get_global_manager(
        callback: *mut _cef_completion_callback_t
    ) -> *mut cef_cookie_manager_t;
}
#[doc = "\n Structure to implement for visiting cookie values. The functions of this\n structure will always be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_visitor_t {
    #[doc = "\n Base structure.\n"]
    pub base:  cef_base_ref_counted_t,
    #[doc = "\n Method that will be called once for each cookie. |count| is the 0-based\n index for the current cookie. |total| is the total number of cookies. Set\n |deleteCookie| to true (1) to delete the cookie currently being visited.\n Return false (0) to stop visiting cookies. This function may never be\n called if no cookies are found.\n"]
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure to implement for visiting cookie values. The functions of this\n structure will always be called on the UI thread.\n"]
pub type cef_cookie_visitor_t = _cef_cookie_visitor_t;
#[doc = "\n Structure to implement to be notified of asynchronous completion via\n cef_cookie_manager_t::set_cookie().\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_set_cookie_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:        cef_base_ref_counted_t,
    #[doc = "\n Method that will be called upon completion. |success| will be true (1) if\n the cookie was set successfully.\n"]
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Structure to implement to be notified of asynchronous completion via\n cef_cookie_manager_t::set_cookie().\n"]
pub type cef_set_cookie_callback_t = _cef_set_cookie_callback_t;
#[doc = "\n Structure to implement to be notified of asynchronous completion via\n cef_cookie_manager_t::delete_cookies().\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_delete_cookies_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:        cef_base_ref_counted_t,
    #[doc = "\n Method that will be called upon completion. |num_deleted| will be the\n number of cookies that were deleted.\n"]
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Structure to implement to be notified of asynchronous completion via\n cef_cookie_manager_t::delete_cookies().\n"]
pub type cef_delete_cookies_callback_t = _cef_delete_cookies_callback_t;
#[doc = "\n Structure that wraps other data value types. Complex types (binary,\n dictionary and list) will be referenced but not owned by this object. Can be\n used on any process and thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_value_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the underlying data is valid. This will always be true\n (1) for simple types. For complex types (binary, dictionary and list) the\n underlying data may become invalid if owned by another object (e.g. list\n or dictionary) and that other object is then modified or destroyed. This\n value object can be re-used by calling Set*() even if the underlying data\n is invalid.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the underlying data is owned by another object.\n"]
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the underlying data is read-only. Some APIs may expose\n read-only objects.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have the same underlying\n data. If true (1) modifications to this object will also affect |that|\n object and vice-versa.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have an equivalent\n underlying value but are not necessarily the same object.\n"]
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a copy of this object. The underlying data will also be copied.\n"]
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    #[doc = "\n Returns the underlying value type.\n"]
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t>,
    #[doc = "\n Returns the underlying value as type bool.\n"]
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the underlying value as type int.\n"]
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the underlying value as type double.\n"]
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    #[doc = "\n Returns the underlying value as type string.\n"]
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the underlying value as type binary. The returned reference may\n become invalid if the value is owned by another object or if ownership is\n transferred to another object in the future. To maintain a reference to\n the value after assigning ownership to a dictionary or list pass this\n object to the set_value() function instead of passing the returned\n reference to set_binary().\n"]
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the underlying value as type dictionary. The returned reference\n may become invalid if the value is owned by another object or if ownership\n is transferred to another object in the future. To maintain a reference to\n the value after assigning ownership to a dictionary or list pass this\n object to the set_value() function instead of passing the returned\n reference to set_dictionary().\n"]
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t
    >,
    #[doc = "\n Returns the underlying value as type list. The returned reference may\n become invalid if the value is owned by another object or if ownership is\n transferred to another object in the future. To maintain a reference to\n the value after assigning ownership to a dictionary or list pass this\n object to the set_value() function instead of passing the returned\n reference to set_list().\n"]
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t
    >,
    #[doc = "\n Sets the underlying value as type null. Returns true (1) if the value was\n set successfully.\n"]
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type bool. Returns true (1) if the value was\n set successfully.\n"]
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type int. Returns true (1) if the value was\n set successfully.\n"]
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type double. Returns true (1) if the value\n was set successfully.\n"]
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type string. Returns true (1) if the value\n was set successfully.\n"]
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type binary. Returns true (1) if the value\n was set successfully. This object keeps a reference to |value| and\n ownership of the underlying data remains unchanged.\n"]
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type dict. Returns true (1) if the value was\n set successfully. This object keeps a reference to |value| and ownership\n of the underlying data remains unchanged.\n"]
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the underlying value as type list. Returns true (1) if the value was\n set successfully. This object keeps a reference to |value| and ownership\n of the underlying data remains unchanged.\n"]
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that wraps other data value types. Complex types (binary,\n dictionary and list) will be referenced but not owned by this object. Can be\n used on any process and thread.\n"]
pub type cef_value_t = _cef_value_t;
extern "C" {
    #[doc = "\n Creates a new object.\n"]
    pub fn cef_value_create() -> *mut cef_value_t;
}
#[doc = "\n Structure representing a binary value. Can be used on any process and\n thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_binary_value_t {
    #[doc = "\n Base structure.\n"]
    pub base:         cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. This object may become invalid\n if the underlying data is owned by another object (e.g. list or\n dictionary) and that other object is then modified or destroyed. Do not\n call any other functions if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is currently owned by another object.\n"]
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have the same underlying\n data.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have an equivalent\n underlying value but are not necessarily the same object.\n"]
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a copy of this object. The data in this object will also be\n copied.\n"]
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns a pointer to the beginning of the memory block. The returned\n pointer is valid as long as the cef_binary_value_t is alive.\n"]
    pub get_raw_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *const ::std::os::raw::c_void
    >,
    #[doc = "\n Returns the data size.\n"]
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    #[doc = "\n Read up to |buffer_size| number of bytes into |buffer|. Reading begins at\n the specified byte |data_offset|. Returns the number of bytes read.\n"]
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize
        ) -> usize
    >
}
#[doc = "\n Structure representing a binary value. Can be used on any process and\n thread.\n"]
pub type cef_binary_value_t = _cef_binary_value_t;
extern "C" {
    #[doc = "\n Creates a new object that is not owned by any other object. The specified\n |data| will be copied.\n"]
    pub fn cef_binary_value_create(
        data: *const ::std::os::raw::c_void,
        data_size: usize
    ) -> *mut cef_binary_value_t;
}
#[doc = "\n Structure representing a dictionary value. Can be used on any process and\n thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dictionary_value_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. This object may become invalid\n if the underlying data is owned by another object (e.g. list or\n dictionary) and that other object is then modified or destroyed. Do not\n call any other functions if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is currently owned by another object.\n"]
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the values of this object are read-only. Some APIs may\n expose read-only objects.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have the same underlying\n data. If true (1) modifications to this object will also affect |that|\n object and vice-versa.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have an equivalent\n underlying value but are not necessarily the same object.\n"]
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a writable copy of this object. If |exclude_NULL_children| is true\n (1) any NULL dictionaries or lists will be excluded from the copy.\n"]
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int
        ) -> *mut _cef_dictionary_value_t
    >,
    #[doc = "\n Returns the number of values.\n"]
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    #[doc = "\n Removes all values. Returns true (1) on success.\n"]
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the current dictionary has a value for the given key.\n"]
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Reads all keys for this dictionary into the specified vector.\n"]
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Removes the value at the specified key. Returns true (1) is the value was\n removed successfully.\n"]
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value type for the specified key.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> cef_value_type_t
    >,
    #[doc = "\n Returns the value at the specified key. For simple types the returned\n value will copy existing data and modifications to the value will not\n modify this object. For complex types (binary, dictionary and list) the\n returned value will reference existing data and modifications to the value\n will modify this object.\n"]
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_value_t
    >,
    #[doc = "\n Returns the value at the specified key as type bool.\n"]
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value at the specified key as type int.\n"]
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value at the specified key as type double.\n"]
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64
    >,
    #[doc = "\n Returns the value at the specified key as type string.\n"]
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the value at the specified key as type binary. The returned value\n will reference existing data.\n"]
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the value at the specified key as type dictionary. The returned\n value will reference existing data and modifications to the value will\n modify this object.\n"]
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_dictionary_value_t
    >,
    #[doc = "\n Returns the value at the specified key as type list. The returned value\n will reference existing data and modifications to the value will modify\n this object.\n"]
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> *mut _cef_list_value_t
    >,
    #[doc = "\n Sets the value at the specified key. Returns true (1) if the value was set\n successfully. If |value| represents simple data then the underlying data\n will be copied and modifications to |value| will not modify this object.\n If |value| represents complex data (binary, dictionary or list) then the\n underlying data will be referenced and modifications to |value| will\n modify this object.\n"]
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type null. Returns true (1) if the\n value was set successfully.\n"]
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type bool. Returns true (1) if the\n value was set successfully.\n"]
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type int. Returns true (1) if the\n value was set successfully.\n"]
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type double. Returns true (1) if\n the value was set successfully.\n"]
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type string. Returns true (1) if\n the value was set successfully.\n"]
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type binary. Returns true (1) if\n the value was set successfully. If |value| is currently owned by another\n object then the value will be copied and the |value| reference will not\n change. Otherwise, ownership will be transferred to this object and the\n |value| reference will be invalidated.\n"]
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type dict. Returns true (1) if the\n value was set successfully. If |value| is currently owned by another\n object then the value will be copied and the |value| reference will not\n change. Otherwise, ownership will be transferred to this object and the\n |value| reference will be invalidated.\n"]
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified key as type list. Returns true (1) if the\n value was set successfully. If |value| is currently owned by another\n object then the value will be copied and the |value| reference will not\n change. Otherwise, ownership will be transferred to this object and the\n |value| reference will be invalidated.\n"]
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure representing a dictionary value. Can be used on any process and\n thread.\n"]
pub type cef_dictionary_value_t = _cef_dictionary_value_t;
extern "C" {
    #[doc = "\n Creates a new object that is not owned by any other object.\n"]
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}
#[doc = "\n Structure representing a list value. Can be used on any process and thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_list_value_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. This object may become invalid\n if the underlying data is owned by another object (e.g. list or\n dictionary) and that other object is then modified or destroyed. Do not\n call any other functions if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is currently owned by another object.\n"]
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the values of this object are read-only. Some APIs may\n expose read-only objects.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have the same underlying\n data. If true (1) modifications to this object will also affect |that|\n object and vice-versa.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object and |that| object have an equivalent\n underlying value but are not necessarily the same object.\n"]
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a writable copy of this object.\n"]
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t
    >,
    #[doc = "\n Sets the number of values. If the number of values is expanded all new\n value slots will default to type null. Returns true (1) on success.\n"]
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the number of values.\n"]
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    #[doc = "\n Removes all values. Returns true (1) on success.\n"]
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Removes the value at the specified index.\n"]
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value type at the specified index.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t
    >,
    #[doc = "\n Returns the value at the specified index. For simple types the returned\n value will copy existing data and modifications to the value will not\n modify this object. For complex types (binary, dictionary and list) the\n returned value will reference existing data and modifications to the value\n will modify this object.\n"]
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t
    >,
    #[doc = "\n Returns the value at the specified index as type bool.\n"]
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value at the specified index as type int.\n"]
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value at the specified index as type double.\n"]
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64
    >,
    #[doc = "\n Returns the value at the specified index as type string.\n"]
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the value at the specified index as type binary. The returned\n value will reference existing data.\n"]
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize
        ) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the value at the specified index as type dictionary. The returned\n value will reference existing data and modifications to the value will\n modify this object.\n"]
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize
        ) -> *mut _cef_dictionary_value_t
    >,
    #[doc = "\n Returns the value at the specified index as type list. The returned value\n will reference existing data and modifications to the value will modify\n this object.\n"]
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t
    >,
    #[doc = "\n Sets the value at the specified index. Returns true (1) if the value was\n set successfully. If |value| represents simple data then the underlying\n data will be copied and modifications to |value| will not modify this\n object. If |value| represents complex data (binary, dictionary or list)\n then the underlying data will be referenced and modifications to |value|\n will modify this object.\n"]
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type null. Returns true (1) if\n the value was set successfully.\n"]
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type bool. Returns true (1) if\n the value was set successfully.\n"]
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type int. Returns true (1) if the\n value was set successfully.\n"]
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type double. Returns true (1) if\n the value was set successfully.\n"]
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type string. Returns true (1) if\n the value was set successfully.\n"]
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type binary. Returns true (1) if\n the value was set successfully. If |value| is currently owned by another\n object then the value will be copied and the |value| reference will not\n change. Otherwise, ownership will be transferred to this object and the\n |value| reference will be invalidated.\n"]
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type dict. Returns true (1) if\n the value was set successfully. If |value| is currently owned by another\n object then the value will be copied and the |value| reference will not\n change. Otherwise, ownership will be transferred to this object and the\n |value| reference will be invalidated.\n"]
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the value at the specified index as type list. Returns true (1) if\n the value was set successfully. If |value| is currently owned by another\n object then the value will be copied and the |value| reference will not\n change. Otherwise, ownership will be transferred to this object and the\n |value| reference will be invalidated.\n"]
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure representing a list value. Can be used on any process and thread.\n"]
pub type cef_list_value_t = _cef_list_value_t;
extern "C" {
    #[doc = "\n Creates a new object that is not owned by any other object.\n"]
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}
#[doc = "\n Object representing an extension. Methods may be called on any thread unless\n otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_extension_t {
    #[doc = "\n Base structure.\n"]
    pub base:               cef_base_ref_counted_t,
    #[doc = "\n Returns the unique extension identifier. This is calculated based on the\n extension public key, if available, or on the extension path. See\n https://developer.chrome.com/extensions/manifest/key for details.\n"]
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the absolute path to the extension directory on disk. This value\n will be prefixed with PK_DIR_RESOURCES if a relative path was passed to\n cef_request_context_t::LoadExtension.\n"]
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the extension manifest contents as a cef_dictionary_value_t\n object. See https://developer.chrome.com/extensions/manifest for details.\n"]
    pub get_manifest: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t
    >,
    #[doc = "\n Returns true (1) if this object is the same extension as |that| object.\n Extensions are considered the same if identifier, path and loader context\n match.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the handler for this extension. Will return NULL for internal\n extensions or if no handler was passed to\n cef_request_context_t::LoadExtension.\n"]
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t
    >,
    #[doc = "\n Returns the request context that loaded this extension. Will return NULL\n for internal extensions or if the extension has been unloaded. See the\n cef_request_context_t::LoadExtension documentation for more information\n about loader contexts. Must be called on the browser process UI thread.\n"]
    pub get_loader_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t
    >,
    #[doc = "\n Returns true (1) if this extension is currently loaded. Must be called on\n the browser process UI thread.\n"]
    pub is_loaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Unload this extension if it is not an internal extension and is currently\n loaded. Will result in a call to\n cef_extension_handler_t::OnExtensionUnloaded on success.\n"]
    pub unload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t)>
}
#[doc = "\n Object representing an extension. Methods may be called on any thread unless\n otherwise indicated.\n"]
pub type cef_extension_t = _cef_extension_t;
#[doc = "\n Callback structure for cef_browser_host_t::AddDevToolsMessageObserver. The\n functions of this structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dev_tools_message_observer_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Method that will be called on receipt of a DevTools protocol message.\n |browser| is the originating browser instance. |message| is a UTF8-encoded\n JSON dictionary representing either a function result or an event.\n |message| is only valid for the scope of this callback and should be\n copied if necessary. Return true (1) if the message was handled or false\n (0) if the message should be further processed and passed to the\n OnDevToolsMethodResult or OnDevToolsEvent functions as appropriate.\n\n Method result dictionaries include an \"id\" (int) value that identifies the\n orginating function call sent from\n cef_browser_host_t::SendDevToolsMessage, and optionally either a \"result\"\n (dictionary) or \"error\" (dictionary) value. The \"error\" dictionary will\n contain \"code\" (int) and \"message\" (string) values. Event dictionaries\n include a \"function\" (string) value and optionally a \"params\" (dictionary)\n value. See the DevTools protocol documentation at\n https://chromedevtools.github.io/devtools-protocol/ for details of\n supported function calls and the expected \"result\" or \"params\" dictionary\n contents. JSON dictionaries can be parsed using the CefParseJSON function\n if desired, however be aware of performance considerations when parsing\n large messages (some of which may exceed 1MB in size).\n"]
    pub on_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Method that will be called after attempted execution of a DevTools\n protocol function. |browser| is the originating browser instance.\n |message_id| is the \"id\" value that identifies the originating function\n call message. If the function succeeded |success| will be true (1) and\n |result| will be the UTF8-encoded JSON \"result\" dictionary value (which\n may be NULL). If the function failed |success| will be false (0) and\n |result| will be the UTF8-encoded JSON \"error\" dictionary value. |result|\n is only valid for the scope of this callback and should be copied if\n necessary. See the OnDevToolsMessage documentation for additional details\n on |result| contents.\n"]
    pub on_dev_tools_method_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message_id: ::std::os::raw::c_int,
            success: ::std::os::raw::c_int,
            result: *const ::std::os::raw::c_void,
            result_size: usize
        )
    >,
    #[doc = "\n Method that will be called on receipt of a DevTools protocol event.\n |browser| is the originating browser instance. |function| is the\n \"function\" value. |params| is the UTF8-encoded JSON \"params\" dictionary\n value (which may be NULL). |params| is only valid for the scope of this\n callback and should be copied if necessary. See the OnDevToolsMessage\n documentation for additional details on |params| contents.\n"]
    pub on_dev_tools_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            method: *const cef_string_t,
            params: *const ::std::os::raw::c_void,
            params_size: usize
        )
    >,
    #[doc = "\n Method that will be called when the DevTools agent has attached. |browser|\n is the originating browser instance. This will generally occur in response\n to the first message sent while the agent is detached.\n"]
    pub on_dev_tools_agent_attached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t
        )
    >,
    #[doc = "\n Method that will be called when the DevTools agent has detached. |browser|\n is the originating browser instance. Any function results that were\n pending before the agent became detached will not be delivered, and any\n active event subscriptions will be canceled.\n"]
    pub on_dev_tools_agent_detached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t
        )
    >
}
#[doc = "\n Callback structure for cef_browser_host_t::AddDevToolsMessageObserver. The\n functions of this structure will be called on the browser process UI thread.\n"]
pub type cef_dev_tools_message_observer_t = _cef_dev_tools_message_observer_t;
#[doc = "\n Container for a single image represented at different scale factors. All\n image representations should be the same size in density independent pixel\n (DIP) units. For example, if the image at scale factor 1.0 is 100x100 pixels\n then the image at scale factor 2.0 should be 200x200 pixels -- both images\n will display with a DIP size of 100x100 units. The functions of this\n structure can be called on any browser process thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_image_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this Image is NULL.\n"]
    pub is_empty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this Image and |that| Image share the same underlying\n storage. Will also return true (1) if both images are NULL.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add a bitmap image representation for |scale_factor|. Only 32-bit\n RGBA/BGRA formats are supported. |pixel_width| and |pixel_height| are the\n bitmap representation size in pixel coordinates. |pixel_data| is the array\n of pixel data and should be |pixel_width| x |pixel_height| x 4 bytes in\n size. |color_type| and |alpha_type| values specify the pixel format.\n"]
    pub add_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add a PNG image representation for |scale_factor|. |png_data| is the image\n data of size |png_data_size|. Any alpha transparency in the PNG data will\n be maintained.\n"]
    pub add_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Create a JPEG image representation for |scale_factor|. |jpeg_data| is the\n image data of size |jpeg_data_size|. The JPEG format does not support\n transparency so the alpha byte will be set to 0xFF for all pixels.\n"]
    pub add_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the image width in density independent pixel (DIP) units.\n"]
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    #[doc = "\n Returns the image height in density independent pixel (DIP) units.\n"]
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    #[doc = "\n Returns true (1) if this image contains a representation for\n |scale_factor|.\n"]
    pub has_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Removes the representation for |scale_factor|. Returns true (1) on\n success.\n"]
    pub remove_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns information for the representation that most closely matches\n |scale_factor|. |actual_scale_factor| is the actual scale factor for the\n representation. |pixel_width| and |pixel_height| are the representation\n size in pixel coordinates. Returns true (1) on success.\n"]
    pub get_representation_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the bitmap representation that most closely matches\n |scale_factor|. Only 32-bit RGBA/BGRA formats are supported. |color_type|\n and |alpha_type| values specify the desired output pixel format.\n |pixel_width| and |pixel_height| are the output representation size in\n pixel coordinates. Returns a cef_binary_value_t containing the pixel data\n on success or NULL on failure.\n"]
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the PNG representation that most closely matches |scale_factor|.\n If |with_transparency| is true (1) any alpha transparency in the image\n will be represented in the resulting PNG data. |pixel_width| and\n |pixel_height| are the output representation size in pixel coordinates.\n Returns a cef_binary_value_t containing the PNG image data on success or\n NULL on failure.\n"]
    pub get_as_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the JPEG representation that most closely matches |scale_factor|.\n |quality| determines the compression level with 0 == lowest and 100 ==\n highest. The JPEG format does not support alpha transparency and the alpha\n channel, if any, will be discarded. |pixel_width| and |pixel_height| are\n the output representation size in pixel coordinates. Returns a\n cef_binary_value_t containing the JPEG image data on success or NULL on\n failure.\n"]
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >
}
#[doc = "\n Container for a single image represented at different scale factors. All\n image representations should be the same size in density independent pixel\n (DIP) units. For example, if the image at scale factor 1.0 is 100x100 pixels\n then the image at scale factor 2.0 should be 200x200 pixels -- both images\n will display with a DIP size of 100x100 units. The functions of this\n structure can be called on any browser process thread.\n"]
pub type cef_image_t = _cef_image_t;
extern "C" {
    #[doc = "\n Create a new cef_image_t. It will initially be NULL. Use the Add*()\n functions to add representations at different scale factors.\n"]
    pub fn cef_image_create() -> *mut cef_image_t;
}
#[doc = "\n Structure the client can implement to provide a custom stream reader. The\n functions of this structure may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_read_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:      cef_base_ref_counted_t,
    #[doc = "\n Read raw binary data.\n"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_read_handler_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    #[doc = "\n Seek to the specified offset position. |whence| may be any one of\n SEEK_CUR, SEEK_END or SEEK_SET. Return zero on success and non-zero on\n failure.\n"]
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_read_handler_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the current offset position.\n"]
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> i64>,
    #[doc = "\n Return non-zero if at end of file.\n"]
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if this handler performs work like accessing the file\n system which may block. Used as a hint for determining the thread to\n access the handler from.\n"]
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure the client can implement to provide a custom stream reader. The\n functions of this structure may be called on any thread.\n"]
pub type cef_read_handler_t = _cef_read_handler_t;
#[doc = "\n Structure used to read data from a stream. The functions of this structure\n may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_stream_reader_t {
    #[doc = "\n Base structure.\n"]
    pub base:      cef_base_ref_counted_t,
    #[doc = "\n Read raw binary data.\n"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    #[doc = "\n Seek to the specified offset position. |whence| may be any one of\n SEEK_CUR, SEEK_END or SEEK_SET. Returns zero on success and non-zero on\n failure.\n"]
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the current offset position.\n"]
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> i64>,
    #[doc = "\n Return non-zero if at end of file.\n"]
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this reader performs work like accessing the file\n system which may block. Used as a hint for determining the thread to\n access the reader from.\n"]
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure used to read data from a stream. The functions of this structure\n may be called on any thread.\n"]
pub type cef_stream_reader_t = _cef_stream_reader_t;
extern "C" {
    #[doc = "\n Create a new cef_stream_reader_t object from a file.\n"]
    pub fn cef_stream_reader_create_for_file(
        fileName: *const cef_string_t
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    #[doc = "\n Create a new cef_stream_reader_t object from data.\n"]
    pub fn cef_stream_reader_create_for_data(
        data: *mut ::std::os::raw::c_void,
        size: usize
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    #[doc = "\n Create a new cef_stream_reader_t object from a custom handler.\n"]
    pub fn cef_stream_reader_create_for_handler(
        handler: *mut cef_read_handler_t
    ) -> *mut cef_stream_reader_t;
}
#[doc = "\n Structure the client can implement to provide a custom stream writer. The\n functions of this structure may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_write_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:      cef_base_ref_counted_t,
    #[doc = "\n Write raw binary data.\n"]
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_write_handler_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    #[doc = "\n Seek to the specified offset position. |whence| may be any one of\n SEEK_CUR, SEEK_END or SEEK_SET. Return zero on success and non-zero on\n failure.\n"]
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_write_handler_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the current offset position.\n"]
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> i64>,
    #[doc = "\n Flush the stream.\n"]
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if this handler performs work like accessing the file\n system which may block. Used as a hint for determining the thread to\n access the handler from.\n"]
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure the client can implement to provide a custom stream writer. The\n functions of this structure may be called on any thread.\n"]
pub type cef_write_handler_t = _cef_write_handler_t;
#[doc = "\n Structure used to write data to a stream. The functions of this structure\n may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_stream_writer_t {
    #[doc = "\n Base structure.\n"]
    pub base:      cef_base_ref_counted_t,
    #[doc = "\n Write raw binary data.\n"]
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize
        ) -> usize
    >,
    #[doc = "\n Seek to the specified offset position. |whence| may be any one of\n SEEK_CUR, SEEK_END or SEEK_SET. Returns zero on success and non-zero on\n failure.\n"]
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            offset: i64,
            whence: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the current offset position.\n"]
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> i64>,
    #[doc = "\n Flush the stream.\n"]
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this writer performs work like accessing the file\n system which may block. Used as a hint for determining the thread to\n access the writer from.\n"]
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure used to write data to a stream. The functions of this structure\n may be called on any thread.\n"]
pub type cef_stream_writer_t = _cef_stream_writer_t;
extern "C" {
    #[doc = "\n Create a new cef_stream_writer_t object for a file.\n"]
    pub fn cef_stream_writer_create_for_file(
        fileName: *const cef_string_t
    ) -> *mut cef_stream_writer_t;
}
extern "C" {
    #[doc = "\n Create a new cef_stream_writer_t object for a custom handler.\n"]
    pub fn cef_stream_writer_create_for_handler(
        handler: *mut cef_write_handler_t
    ) -> *mut cef_stream_writer_t;
}
#[doc = "\n Structure used to represent drag data. The functions of this structure may\n be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_drag_data_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n Returns a copy of the current object.\n"]
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t
    >,
    #[doc = "\n Returns true (1) if this object is read-only.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the drag data is a link.\n"]
    pub is_link: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the drag data is a text or html fragment.\n"]
    pub is_fragment: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the drag data is a file.\n"]
    pub is_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the link URL that is being dragged.\n"]
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the title associated with the link being dragged.\n"]
    pub get_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the metadata, if any, associated with the link being dragged.\n"]
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the plain text fragment that is being dragged.\n"]
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the text/html fragment that is being dragged.\n"]
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the base URL that the fragment came from. This value is used for\n resolving relative URLs and may be NULL.\n"]
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the name of the file being dragged out of the browser window.\n"]
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Write the contents of the file being dragged out of the web view into\n |writer|. Returns the number of bytes sent to |writer|. If |writer| is\n NULL this function will return the size of the file contents in bytes.\n Call get_file_name() to get a suggested name for the file.\n"]
    pub get_file_contents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t
        ) -> usize
    >,
    #[doc = "\n Retrieve the list of file names that are being dragged into the browser\n window.\n"]
    pub get_file_names: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Retrieve the list of file paths that are being dragged into the browser\n window.\n"]
    pub get_file_paths: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            paths: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the link URL that is being dragged.\n"]
    pub set_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t)
    >,
    #[doc = "\n Set the title associated with the link being dragged.\n"]
    pub set_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t)
    >,
    #[doc = "\n Set the metadata associated with the link being dragged.\n"]
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t)
    >,
    #[doc = "\n Set the plain text fragment that is being dragged.\n"]
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t)
    >,
    #[doc = "\n Set the text/html fragment that is being dragged.\n"]
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t)
    >,
    #[doc = "\n Set the base URL that the fragment came from.\n"]
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t)
    >,
    #[doc = "\n Reset the file contents. You should do this before calling\n cef_browser_host_t::DragTargetDragEnter as the web view does not allow us\n to drag in this kind of data.\n"]
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    #[doc = "\n Add a file that is being dragged into the webview.\n"]
    pub add_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t
        )
    >,
    #[doc = "\n Clear list of filenames.\n"]
    pub clear_filenames: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    #[doc = "\n Get the image representation of drag data. May return NULL if no image\n representation is available.\n"]
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t
    >,
    #[doc = "\n Get the image hotspot (drag start location relative to image dimensions).\n"]
    pub get_image_hotspot:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_point_t>,
    #[doc = "\n Returns true (1) if an image representation of drag data is available.\n"]
    pub has_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure used to represent drag data. The functions of this structure may\n be called on any thread.\n"]
pub type cef_drag_data_t = _cef_drag_data_t;
extern "C" {
    #[doc = "\n Create a new cef_drag_data_t object.\n"]
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}
#[doc = "\n Structure to implement for visiting the DOM. The functions of this structure\n will be called on the render process main thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domvisitor_t {
    #[doc = "\n Base structure.\n"]
    pub base:  cef_base_ref_counted_t,
    #[doc = "\n Method executed for visiting the DOM. The document object passed to this\n function represents a snapshot of the DOM at the time this function is\n executed. DOM objects are only valid for the scope of this function. Do\n not keep references to or attempt to access any DOM objects outside the\n scope of this function.\n"]
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domvisitor_t, document: *mut _cef_domdocument_t)
    >
}
#[doc = "\n Structure to implement for visiting the DOM. The functions of this structure\n will be called on the render process main thread.\n"]
pub type cef_domvisitor_t = _cef_domvisitor_t;
#[doc = "\n Structure used to represent a DOM document. The functions of this structure\n should only be called on the render process main thread thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domdocument_t {
    #[doc = "\n Base structure.\n"]
    pub base:                       cef_base_ref_counted_t,
    #[doc = "\n Returns the document type.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t
    >,
    #[doc = "\n Returns the root document node.\n"]
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the BODY node of an HTML document.\n"]
    pub get_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the HEAD node of an HTML document.\n"]
    pub get_head: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the title of an HTML document.\n"]
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the document element with the specified ID value.\n"]
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t
        ) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the node that currently has keyboard focus.\n"]
    pub get_focused_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns true (1) if a portion of the document is selected.\n"]
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the selection offset within the start node.\n"]
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the selection offset within the end node.\n"]
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the contents of this selection as markup.\n"]
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the contents of this selection as text.\n"]
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the base URL for the document.\n"]
    pub get_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns a complete URL based on the document base URL and the specified\n partial URL.\n"]
    pub get_complete_url: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t
        ) -> cef_string_userfree_t
    >
}
#[doc = "\n Structure used to represent a DOM document. The functions of this structure\n should only be called on the render process main thread thread.\n"]
pub type cef_domdocument_t = _cef_domdocument_t;
#[doc = "\n Structure used to represent a DOM node. The functions of this structure\n should only be called on the render process main thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domnode_t {
    #[doc = "\n Base structure.\n"]
    pub base:                          cef_base_ref_counted_t,
    #[doc = "\n Returns the type for this node.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t
    >,
    #[doc = "\n Returns true (1) if this is a text node.\n"]
    pub is_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this is an element node.\n"]
    pub is_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this is an editable node.\n"]
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this is a form control element node.\n"]
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the type of this form control element node.\n"]
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_form_control_type_t
    >,
    #[doc = "\n Returns true (1) if this object is pointing to the same handle as |that|\n object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the name of this node.\n"]
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the value of this node.\n"]
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the value of this node. Returns true (1) on success.\n"]
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the contents of this node as markup.\n"]
    pub get_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the document associated with this node.\n"]
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t
    >,
    #[doc = "\n Returns the parent node.\n"]
    pub get_parent: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the previous sibling node.\n"]
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the next sibling node.\n"]
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns true (1) if this node has child nodes.\n"]
    pub has_children: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the first child node.\n"]
    pub get_first_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the last child node.\n"]
    pub get_last_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t
    >,
    #[doc = "\n Returns the tag name of this element.\n"]
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if this element has attributes.\n"]
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this element has an attribute named |attrName|.\n"]
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the element attribute named |attrName|.\n"]
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns a map of all element attributes.\n"]
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t)
    >,
    #[doc = "\n Set the value for the element attribute named |attrName|. Returns true (1)\n on success.\n"]
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the inner text of the element.\n"]
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the bounds of the element in device pixels. Use\n \"window.devicePixelRatio\" to convert to/from CSS pixels.\n"]
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>
}
#[doc = "\n Structure used to represent a DOM node. The functions of this structure\n should only be called on the render process main thread.\n"]
pub type cef_domnode_t = _cef_domnode_t;
#[doc = "\n Structure that wraps platform-dependent share memory region mapping.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_shared_memory_region_t {
    #[doc = "\n Base structure.\n"]
    pub base:     cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the mapping is valid.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the size of the mapping in bytes. Returns 0 for invalid instances.\n"]
    pub size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> usize
    >,
    #[doc = "\n Returns the pointer to the memory. Returns nullptr for invalid instances.\n The returned pointer is only valid for the life span of this object.\n"]
    pub memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_memory_region_t
        ) -> *mut ::std::os::raw::c_void
    >
}
#[doc = "\n Structure that wraps platform-dependent share memory region mapping.\n"]
pub type cef_shared_memory_region_t = _cef_shared_memory_region_t;
#[doc = "\n Structure representing a message. Can be used on any process and thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_process_message_t {
    #[doc = "\n Base structure.\n"]
    pub base:                     cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. Do not call any other functions\n if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the values of this object are read-only. Some APIs may\n expose read-only objects.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a writable copy of this object. Returns nullptr when message\n contains a shared memory region.\n"]
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_process_message_t
    >,
    #[doc = "\n Returns the message name.\n"]
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the list of arguments. Returns nullptr when message contains a\n shared memory region.\n"]
    pub get_argument_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t
    >,
    #[doc = "\n Returns the shared memory region. Returns nullptr when message contains an\n argument list.\n"]
    pub get_shared_memory_region: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_process_message_t
        ) -> *mut _cef_shared_memory_region_t
    >
}
#[doc = "\n Structure representing a message. Can be used on any process and thread.\n"]
pub type cef_process_message_t = _cef_process_message_t;
extern "C" {
    #[doc = "\n Create a new cef_process_message_t object with the specified name.\n"]
    pub fn cef_process_message_create(name: *const cef_string_t) -> *mut cef_process_message_t;
}
#[doc = "\n Structure used to represent a web request. The functions of this structure\n may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is read-only.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Get the fully qualified URL.\n"]
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the fully qualified URL.\n"]
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)
    >,
    #[doc = "\n Get the request function type. The value will default to POST if post data\n is provided and GET otherwise.\n"]
    pub get_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the request function type.\n"]
    pub set_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t)
    >,
    #[doc = "\n Set the referrer URL and policy. If non-NULL the referrer URL must be\n fully qualified with an HTTP or HTTPS scheme component. Any username,\n password or ref component will be removed.\n"]
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t
        )
    >,
    #[doc = "\n Get the referrer URL.\n"]
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Get the referrer policy.\n"]
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t
    >,
    #[doc = "\n Get the post data.\n"]
    pub get_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t
    >,
    #[doc = "\n Set the post data.\n"]
    pub set_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t)
    >,
    #[doc = "\n Get the header values. Will not include the Referer value if any.\n"]
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)
    >,
    #[doc = "\n Set the header values. If a Referer value exists in the header map it will\n be removed and ignored.\n"]
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)
    >,
    #[doc = "\n Returns the first header value for |name| or an NULL string if not found.\n Will not return the Referer value if any. Use GetHeaderMap instead if\n |name| might have multiple values.\n"]
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the header |name| to |value|. If |overwrite| is true (1) any existing\n values will be replaced with the new value. If |overwrite| is false (0)\n any existing values will not be overwritten. The Referer value cannot be\n set using this function.\n"]
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Set all values at one time.\n"]
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t
        )
    >,
    #[doc = "\n Get the flags used in combination with cef_urlrequest_t. See\n cef_urlrequest_flags_t for supported values.\n"]
    pub get_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the flags used in combination with cef_urlrequest_t.  See\n cef_urlrequest_flags_t for supported values.\n"]
    pub set_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int)
    >,
    #[doc = "\n Get the URL to the first party for cookies used in combination with\n cef_urlrequest_t.\n"]
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the URL to the first party for cookies used in combination with\n cef_urlrequest_t.\n"]
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)
    >,
    #[doc = "\n Get the resource type for this request. Only available in the browser\n process.\n"]
    pub get_resource_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t
    >,
    #[doc = "\n Get the transition type for this request. Only available in the browser\n process and only applies to requests that represent a main frame or sub-\n frame navigation.\n"]
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t
    >,
    #[doc = "\n Returns the globally unique identifier for this request or 0 if not\n specified. Can be used by cef_resource_request_handler_t implementations\n in the browser process to track a single request across multiple\n callbacks.\n"]
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> u64>
}
#[doc = "\n Structure used to represent a web request. The functions of this structure\n may be called on any thread.\n"]
pub type cef_request_t = _cef_request_t;
extern "C" {
    #[doc = "\n Create a new cef_request_t object.\n"]
    pub fn cef_request_create() -> *mut cef_request_t;
}
#[doc = "\n Structure used to represent post data for a web request. The functions of\n this structure may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_post_data_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is read-only.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the underlying POST data includes elements that are\n not represented by this cef_post_data_t object (for example, multi-part\n file upload data). Modifying cef_post_data_t objects with excluded\n elements may result in the request failing.\n"]
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the number of existing post data elements.\n"]
    pub get_element_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    #[doc = "\n Retrieve the post data elements.\n"]
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t
        )
    >,
    #[doc = "\n Remove the specified post data element.  Returns true (1) if the removal\n succeeds.\n"]
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add the specified post data element.  Returns true (1) if the add\n succeeds.\n"]
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Remove all existing post data elements.\n"]
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>
}
#[doc = "\n Structure used to represent post data for a web request. The functions of\n this structure may be called on any thread.\n"]
pub type cef_post_data_t = _cef_post_data_t;
extern "C" {
    #[doc = "\n Create a new cef_post_data_t object.\n"]
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}
#[doc = "\n Structure used to represent a single element in the request post data. The\n functions of this structure may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_post_data_element_t {
    #[doc = "\n Base structure.\n"]
    pub base:            cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is read-only.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Remove all contents from the post data element.\n"]
    pub set_to_empty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    #[doc = "\n The post data element will represent a file.\n"]
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t)
    >,
    #[doc = "\n The post data element will represent bytes.  The bytes passed in will be\n copied.\n"]
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void
        )
    >,
    #[doc = "\n Return the type of this post data element.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_postdataelement_type_t
    >,
    #[doc = "\n Return the file name.\n"]
    pub get_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Return the number of bytes.\n"]
    pub get_bytes_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    #[doc = "\n Read up to |size| bytes into |bytes| and return the number of bytes\n actually read.\n"]
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void
        ) -> usize
    >
}
#[doc = "\n Structure used to represent a single element in the request post data. The\n functions of this structure may be called on any thread.\n"]
pub type cef_post_data_element_t = _cef_post_data_element_t;
extern "C" {
    #[doc = "\n Create a new cef_post_data_element_t object.\n"]
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}
#[doc = "\n Implement this structure to receive string values asynchronously.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_visitor_t {
    #[doc = "\n Base structure.\n"]
    pub base:  cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed.\n"]
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t)
    >
}
#[doc = "\n Implement this structure to receive string values asynchronously.\n"]
pub type cef_string_visitor_t = _cef_string_visitor_t;
#[doc = "\n Structure used to represent a frame in the browser window. When used in the\n browser process the functions of this structure may be called on any thread\n unless otherwise indicated in the comments. When used in the render process\n the functions of this structure may only be called on the main thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_frame_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_base_ref_counted_t,
    #[doc = "\n True if this object is currently attached to a valid frame.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Execute undo in this frame.\n"]
    pub undo:                 ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Execute redo in this frame.\n"]
    pub redo:                 ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Execute cut in this frame.\n"]
    pub cut:                  ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Execute copy in this frame.\n"]
    pub copy:                 ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Execute paste in this frame.\n"]
    pub paste:                ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Execute delete in this frame.\n"]
    pub del:                  ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Execute select all in this frame.\n"]
    pub select_all:           ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Save this frame's HTML source to a temporary file and open it in the\n default text viewing application. This function can only be called from\n the browser process.\n"]
    pub view_source:          ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    #[doc = "\n Retrieve this frame's HTML source as a string sent to the specified\n visitor.\n"]
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t)
    >,
    #[doc = "\n Retrieve this frame's display text as a string sent to the specified\n visitor.\n"]
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t)
    >,
    #[doc = "\n Load the request represented by the |request| object.\n\n WARNING: This function will fail with \"bad IPC message\" reason\n INVALID_INITIATOR_ORIGIN (213) unless you first navigate to the request\n origin using some other mechanism (LoadURL, link click, etc).\n"]
    pub load_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t)
    >,
    #[doc = "\n Load the specified |url|.\n"]
    pub load_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, url: *const cef_string_t)
    >,
    #[doc = "\n Execute a string of JavaScript code in this frame. The |script_url|\n parameter is the URL where the script in question can be found, if any.\n The renderer may request this URL to show the developer the source of the\n error.  The |start_line| parameter is the base line number to use for\n error reporting.\n"]
    pub execute_java_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Returns true (1) if this is the main (top-level) frame.\n"]
    pub is_main: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this is the focused frame.\n"]
    pub is_focused: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the name for this frame. If the frame has an assigned name (for\n example, set via the iframe \"name\" attribute) then that value will be\n returned. Otherwise a unique name will be constructed based on the frame\n parent hierarchy. The main (top-level) frame will always have an NULL name\n value.\n"]
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the globally unique identifier for this frame or < 0 if the\n underlying frame does not yet exist.\n"]
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> i64>,
    #[doc = "\n Returns the parent of this frame or NULL if this is the main (top-level)\n frame.\n"]
    pub get_parent:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t>,
    #[doc = "\n Returns the URL currently loaded in this frame.\n"]
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the browser that this frame belongs to.\n"]
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t
    >,
    #[doc = "\n Get the V8 context associated with the frame. This function can only be\n called from the render process.\n"]
    pub get_v8context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t
    >,
    #[doc = "\n Visit the DOM document. This function can only be called from the render\n process.\n"]
    pub visit_dom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t)
    >,
    #[doc = "\n Create a new URL request that will be treated as originating from this\n frame and the associated browser. Use cef_urlrequest_t::Create instead if\n you do not want the request to have this association, in which case it may\n be handled differently (see documentation on that function). A request\n created with this function may only originate from the browser process,\n and will behave as follows:\n   - It may be intercepted by the client via CefResourceRequestHandler or\n     CefSchemeHandlerFactory.\n   - POST data may only contain a single element of type PDE_TYPE_FILE or\n     PDE_TYPE_BYTES.\n\n The |request| object will be marked as read-only after calling this\n function.\n"]
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t
        ) -> *mut _cef_urlrequest_t
    >,
    #[doc = "\n Send a message to the specified |target_process|. Ownership of the message\n contents will be transferred and the |message| reference will be\n invalidated. Message delivery is not guaranteed in all cases (for example,\n if the browser is closing, navigating, or if the target process crashes).\n Send an ACK message back from the target process if confirmation is\n required.\n"]
    pub send_process_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t,
            message: *mut _cef_process_message_t
        )
    >
}
#[doc = "\n Structure used to represent a frame in the browser window. When used in the\n browser process the functions of this structure may be called on any thread\n unless otherwise indicated in the comments. When used in the render process\n the functions of this structure may only be called on the main thread.\n"]
pub type cef_frame_t = _cef_frame_t;
#[doc = "\n Structure representing the issuer or subject field of an X.509 certificate.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_x509cert_principal_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Returns a name that can be used to represent the issuer. It tries in this\n order: Common Name (CN), Organization Name (O) and Organizational Unit\n Name (OU) and returns the first non-NULL one found.\n"]
    pub get_display_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the common name.\n"]
    pub get_common_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the locality name.\n"]
    pub get_locality_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the state or province name.\n"]
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the country name.\n"]
    pub get_country_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Retrieve the list of organization names.\n"]
    pub get_organization_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t)
    >,
    #[doc = "\n Retrieve the list of organization unit names.\n"]
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t)
    >
}
#[doc = "\n Structure representing the issuer or subject field of an X.509 certificate.\n"]
pub type cef_x509cert_principal_t = _cef_x509cert_principal_t;
#[doc = "\n Structure representing a X.509 certificate.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_x509certificate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Returns the subject of the X.509 certificate. For HTTPS server\n certificates this represents the web server.  The common name of the\n subject should match the host name of the web server.\n"]
    pub get_subject: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t
    >,
    #[doc = "\n Returns the issuer of the X.509 certificate.\n"]
    pub get_issuer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t
    >,
    #[doc = "\n Returns the DER encoded serial number for the X.509 certificate. The value\n possibly includes a leading 00 byte.\n"]
    pub get_serial_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the date before which the X.509 certificate is invalid.\n CefBaseTime.GetTimeT() will return 0 if no date was specified.\n"]
    pub get_valid_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_basetime_t
    >,
    #[doc = "\n Returns the date after which the X.509 certificate is invalid.\n CefBaseTime.GetTimeT() will return 0 if no date was specified.\n"]
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_basetime_t
    >,
    #[doc = "\n Returns the DER encoded data for the X.509 certificate.\n"]
    pub get_derencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the PEM encoded data for the X.509 certificate.\n"]
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns the number of certificates in the issuer chain. If 0, the\n certificate is self-signed.\n"]
    pub get_issuer_chain_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> usize>,
    #[doc = "\n Returns the DER encoded data for the certificate issuer chain. If we\n failed to encode a certificate in the chain it is still present in the\n array but is an NULL string.\n"]
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t
        )
    >,
    #[doc = "\n Returns the PEM encoded data for the certificate issuer chain. If we\n failed to encode a certificate in the chain it is still present in the\n array but is an NULL string.\n"]
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t
        )
    >
}
#[doc = "\n Structure representing a X.509 certificate.\n"]
pub type cef_x509certificate_t = _cef_x509certificate_t;
#[doc = "\n Structure representing the SSL information for a navigation entry.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_sslstatus_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the status is related to a secure SSL/TLS connection.\n"]
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a bitmask containing any and all problems verifying the server\n certificate.\n"]
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t
    >,
    #[doc = "\n Returns the SSL version used for the SSL connection.\n"]
    pub get_sslversion: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t
    >,
    #[doc = "\n Returns a bitmask containing the page security content status.\n"]
    pub get_content_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t
    >,
    #[doc = "\n Returns the X.509 certificate.\n"]
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t
    >
}
#[doc = "\n Structure representing the SSL information for a navigation entry.\n"]
pub type cef_sslstatus_t = _cef_sslstatus_t;
#[doc = "\n Structure used to represent an entry in navigation history.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_navigation_entry_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. Do not call any other functions\n if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the actual URL of the page. For some pages this may be data: URL\n or similar. Use get_display_url() to return a display-friendly version.\n"]
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns a display-friendly version of the URL.\n"]
    pub get_display_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the original URL that was entered by the user before any\n redirects.\n"]
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the title set by the page. This value may be NULL.\n"]
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the transition type which indicates what the user did to move to\n this page from the previous page.\n"]
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_transition_type_t
    >,
    #[doc = "\n Returns true (1) if this navigation includes post data.\n"]
    pub has_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the time for the last known successful navigation completion. A\n navigation may be completed more than once if the page is reloaded. May be\n 0 if the navigation has not yet completed.\n"]
    pub get_completion_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_basetime_t
    >,
    #[doc = "\n Returns the HTTP status code for the last known successful navigation\n response. May be 0 if the response has not yet been received or if the\n navigation has not yet completed.\n"]
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the SSL information for this navigation entry.\n"]
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t
    >
}
#[doc = "\n Structure used to represent an entry in navigation history.\n"]
pub type cef_navigation_entry_t = _cef_navigation_entry_t;
#[doc = "\n Generic callback structure used for managing the lifespan of a registration.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_registration_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t
}
#[doc = "\n Generic callback structure used for managing the lifespan of a registration.\n"]
pub type cef_registration_t = _cef_registration_t;
#[doc = "\n Structure used to represent a browser. When used in the browser process the\n functions of this structure may be called on any thread unless otherwise\n indicated in the comments. When used in the render process the functions of\n this structure may only be called on the main thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n True if this object is currently valid. This will return false (0) after\n cef_life_span_handler_t::OnBeforeClose is called.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the browser host object. This function can only be called in the\n browser process.\n"]
    pub get_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t
    >,
    #[doc = "\n Returns true (1) if the browser can navigate backwards.\n"]
    pub can_go_back: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Navigate backwards.\n"]
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    #[doc = "\n Returns true (1) if the browser can navigate forwards.\n"]
    pub can_go_forward: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Navigate forwards.\n"]
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    #[doc = "\n Returns true (1) if the browser is currently loading.\n"]
    pub is_loading: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Reload the current page.\n"]
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    #[doc = "\n Reload the current page ignoring any cached data.\n"]
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    #[doc = "\n Stop loading the page.\n"]
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    #[doc = "\n Returns the globally unique identifier for this browser. This value is\n also used as the tabId for extension APIs.\n"]
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is pointing to the same handle as |that|\n object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the browser is a popup.\n"]
    pub is_popup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if a document has been loaded in the browser.\n"]
    pub has_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the main (top-level) frame for the browser. In the browser process\n this will return a valid object until after\n cef_life_span_handler_t::OnBeforeClose is called. In the renderer process\n this will return NULL if the main frame is hosted in a different renderer\n process (e.g. for cross-origin sub-frames). The main frame object will\n change during cross-origin navigation or re-navigation after renderer\n process termination (due to crashes, etc).\n"]
    pub get_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t
    >,
    #[doc = "\n Returns the focused frame for the browser.\n"]
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t
    >,
    #[doc = "\n Returns the frame with the specified identifier, or NULL if not found.\n"]
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, identifier: i64) -> *mut _cef_frame_t
    >,
    #[doc = "\n Returns the frame with the specified name, or NULL if not found.\n"]
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t
        ) -> *mut _cef_frame_t
    >,
    #[doc = "\n Returns the number of frames that currently exist.\n"]
    pub get_frame_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> usize>,
    #[doc = "\n Returns the identifiers of all existing frames.\n"]
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut i64
        )
    >,
    #[doc = "\n Returns the names of all existing frames.\n"]
    pub get_frame_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, names: cef_string_list_t)
    >
}
#[doc = "\n Structure used to represent a browser. When used in the browser process the\n functions of this structure may be called on any thread unless otherwise\n indicated in the comments. When used in the render process the functions of\n this structure may only be called on the main thread.\n"]
pub type cef_browser_t = _cef_browser_t;
#[doc = "\n Callback structure for cef_browser_host_t::RunFileDialog. The functions of\n this structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_file_dialog_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                     cef_base_ref_counted_t,
    #[doc = "\n Called asynchronously after the file dialog is dismissed. |file_paths|\n will be a single value or a list of values depending on the dialog mode.\n If the selection was cancelled |file_paths| will be NULL.\n"]
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            file_paths: cef_string_list_t
        )
    >
}
#[doc = "\n Callback structure for cef_browser_host_t::RunFileDialog. The functions of\n this structure will be called on the browser process UI thread.\n"]
pub type cef_run_file_dialog_callback_t = _cef_run_file_dialog_callback_t;
#[doc = "\n Callback structure for cef_browser_host_t::GetNavigationEntries. The\n functions of this structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_navigation_entry_visitor_t {
    #[doc = "\n Base structure.\n"]
    pub base:  cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed. Do not keep a reference to |entry| outside\n of this callback. Return true (1) to continue visiting entries or false\n (0) to stop. |current| is true (1) if this entry is the currently loaded\n navigation entry. |index| is the 0-based index of this entry and |total|\n is the total number of entries.\n"]
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Callback structure for cef_browser_host_t::GetNavigationEntries. The\n functions of this structure will be called on the browser process UI thread.\n"]
pub type cef_navigation_entry_visitor_t = _cef_navigation_entry_visitor_t;
#[doc = "\n Callback structure for cef_browser_host_t::PrintToPDF. The functions of this\n structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed when the PDF printing has completed. |path|\n is the output path. |ok| will be true (1) if the printing completed\n successfully or false (0) otherwise.\n"]
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Callback structure for cef_browser_host_t::PrintToPDF. The functions of this\n structure will be called on the browser process UI thread.\n"]
pub type cef_pdf_print_callback_t = _cef_pdf_print_callback_t;
#[doc = "\n Callback structure for cef_browser_host_t::DownloadImage. The functions of\n this structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_image_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                       cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed when the image download has completed.\n |image_url| is the URL that was downloaded and |http_status_code| is the\n resulting HTTP status code. |image| is the resulting image, possibly at\n multiple scale factors, or NULL if the download failed.\n"]
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t
        )
    >
}
#[doc = "\n Callback structure for cef_browser_host_t::DownloadImage. The functions of\n this structure will be called on the browser process UI thread.\n"]
pub type cef_download_image_callback_t = _cef_download_image_callback_t;
#[doc = "\n Structure used to represent the browser process aspects of a browser. The\n functions of this structure can only be called in the browser process. They\n may be called on any thread in that process unless otherwise indicated in\n the comments.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_host_t {
    #[doc = "\n Base structure.\n"]
    pub base:                           cef_base_ref_counted_t,
    #[doc = "\n Returns the hosted browser object.\n"]
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t
    >,
    #[doc = "\n Request that the browser close. The JavaScript 'onbeforeunload' event will\n be fired. If |force_close| is false (0) the event handler, if any, will be\n allowed to prompt the user and the user can optionally cancel the close.\n If |force_close| is true (1) the prompt will not be displayed and the\n close will proceed. Results in a call to\n cef_life_span_handler_t::do_close() if the event handler allows the close\n or if |force_close| is true (1). See cef_life_span_handler_t::do_close()\n documentation for additional usage information.\n"]
    pub close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, force_close: ::std::os::raw::c_int)
    >,
    #[doc = "\n Helper for closing a browser. Call this function from the top-level window\n close handler (if any). Internally this calls CloseBrowser(false (0)) if\n the close has not yet been initiated. This function returns false (0)\n while the close is pending and true (1) after the close has completed. See\n close_browser() and cef_life_span_handler_t::do_close() documentation for\n additional usage information. This function must be called on the browser\n process UI thread.\n"]
    pub try_close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set whether the browser is focused.\n"]
    pub set_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int)
    >,
    #[doc = "\n Retrieve the window handle (if any) for this browser. If this browser is\n wrapped in a cef_browser_view_t this function should be called on the\n browser process UI thread and it will return the handle for the top-level\n native window.\n"]
    pub get_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut ::std::os::raw::c_void
    >,
    #[doc = "\n Retrieve the window handle (if any) of the browser that opened this\n browser. Will return NULL for non-popup browsers or if this browser is\n wrapped in a cef_browser_view_t. This function can be used in combination\n with custom handling of modal windows.\n"]
    pub get_opener_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut ::std::os::raw::c_void
    >,
    #[doc = "\n Returns true (1) if this browser is wrapped in a cef_browser_view_t.\n"]
    pub has_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the client for this browser.\n"]
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t
    >,
    #[doc = "\n Returns the request context for this browser.\n"]
    pub get_request_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t
    >,
    #[doc = "\n Returns true (1) if this browser can execute the specified zoom command.\n This function can only be called on the UI thread.\n"]
    pub can_zoom: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            command: cef_zoom_command_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Execute a zoom command in this browser. If called on the UI thread the\n change will be applied immediately. Otherwise, the change will be applied\n asynchronously on the UI thread.\n"]
    pub zoom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, command: cef_zoom_command_t)
    >,
    #[doc = "\n Get the default zoom level. This value will be 0.0 by default but can be\n configured with the Chrome runtime. This function can only be called on\n the UI thread.\n"]
    pub get_default_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    #[doc = "\n Get the current zoom level. This function can only be called on the UI\n thread.\n"]
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    #[doc = "\n Change the zoom level to the specified value. Specify 0.0 to reset the\n zoom level to the default. If called on the UI thread the change will be\n applied immediately. Otherwise, the change will be applied asynchronously\n on the UI thread.\n"]
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64)
    >,
    #[doc = "\n Call to run a file chooser dialog. Only a single file chooser dialog may\n be pending at any given time. |mode| represents the type of dialog to\n display. |title| to the title to be used for the dialog and may be NULL to\n show the default title (\"Open\" or \"Save\" depending on the mode).\n |default_file_path| is the path with optional directory and/or file name\n component that will be initially selected in the dialog. |accept_filters|\n are used to restrict the selectable file types and may any combination of\n (a) valid lower-cased MIME types (e.g. \"text/*\" or \"image/*\"), (b)\n individual file extensions (e.g. \".txt\" or \".png\"), or (c) combined\n description and file extension delimited using \"|\" and \";\" (e.g. \"Image\n Types|.png;.gif;.jpg\"). |callback| will be executed after the dialog is\n dismissed or immediately if another dialog is already pending. The dialog\n will be initiated asynchronously on the UI thread.\n"]
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            callback: *mut _cef_run_file_dialog_callback_t
        )
    >,
    #[doc = "\n Download the file at |url| using cef_download_handler_t.\n"]
    pub start_download: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t)
    >,
    #[doc = "\n Download |image_url| and execute |callback| on completion with the images\n received from the renderer. If |is_favicon| is true (1) then cookies are\n not sent and not accepted during download. Images with density independent\n pixel (DIP) sizes larger than |max_image_size| are filtered out from the\n image results. Versions of the image at different scale factors may be\n downloaded up to the maximum scale factor supported by the system. If\n there are no image results <= |max_image_size| then the smallest image is\n resized to |max_image_size| and is the only result. A |max_image_size| of\n 0 means unlimited. If |bypass_cache| is true (1) then |image_url| is\n requested from the server even if it is present in the browser cache.\n"]
    pub download_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: u32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t
        )
    >,
    #[doc = "\n Print the current browser contents.\n"]
    pub print: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Print the current browser contents to the PDF file specified by |path| and\n execute |callback| on completion. The caller is responsible for deleting\n |path| when done. For PDF printing to work on Linux you must implement the\n cef_print_handler_t::GetPdfPaperSize function.\n"]
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t
        )
    >,
    #[doc = "\n Search for |searchText|. |forward| indicates whether to search forward or\n backward within the page. |matchCase| indicates whether the search should\n be case-sensitive. |findNext| indicates whether this is the first request\n or a follow-up. The search will be restarted if |searchText| or\n |matchCase| change. The search will be stopped if |searchText| is NULL.\n The cef_find_handler_t instance, if any, returned via\n cef_client_t::GetFindHandler will be called to report find results.\n"]
    pub find: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Cancel all searches that are currently going on.\n"]
    pub stop_finding: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Open developer tools (DevTools) in its own browser. The DevTools browser\n will remain associated with this browser. If the DevTools browser is\n already open then it will be focused, in which case the |windowInfo|,\n |client| and |settings| parameters will be ignored. If\n |inspect_element_at| is non-NULL then the element at the specified (x,y)\n location will be inspected. The |windowInfo| parameter will be ignored if\n this browser is wrapped in a cef_browser_view_t.\n"]
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t
        )
    >,
    #[doc = "\n Explicitly close the associated DevTools browser, if any.\n"]
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Returns true (1) if this browser currently has an associated DevTools\n browser. Must be called on the browser process UI thread.\n"]
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Send a function call message over the DevTools protocol. |message| must be\n a UTF8-encoded JSON dictionary that contains \"id\" (int), \"function\"\n (string) and \"params\" (dictionary, optional) values. See the DevTools\n protocol documentation at https://chromedevtools.github.io/devtools-\n protocol/ for details of supported functions and the expected \"params\"\n dictionary contents. |message| will be copied if necessary. This function\n will return true (1) if called on the UI thread and the message was\n successfully submitted for validation, otherwise false (0). Validation\n will be applied asynchronously and any messages that fail due to\n formatting errors or missing parameters may be discarded without\n notification. Prefer ExecuteDevToolsMethod if a more structured approach\n to message formatting is desired.\n\n Every valid function call will result in an asynchronous function result\n or error message that references the sent message \"id\". Event messages are\n received while notifications are enabled (for example, between function\n calls for \"Page.enable\" and \"Page.disable\"). All received messages will be\n delivered to the observer(s) registered with AddDevToolsMessageObserver.\n See cef_dev_tools_message_observer_t::OnDevToolsMessage documentation for\n details of received message contents.\n\n Usage of the SendDevToolsMessage, ExecuteDevToolsMethod and\n AddDevToolsMessageObserver functions does not require an active DevTools\n front-end or remote-debugging session. Other active DevTools sessions will\n continue to function independently. However, any modification of global\n browser state by one session may not be reflected in the UI of other\n sessions.\n\n Communication with the DevTools front-end (when displayed) can be logged\n for development purposes by passing the `--devtools-protocol-log-\n file=<path>` command-line flag.\n"]
    pub send_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Execute a function call over the DevTools protocol. This is a more\n structured version of SendDevToolsMessage. |message_id| is an incremental\n number that uniquely identifies the message (pass 0 to have the next\n number assigned automatically based on previous values). |function| is the\n function name. |params| are the function parameters, which may be NULL.\n See the DevTools protocol documentation (linked above) for details of\n supported functions and the expected |params| dictionary contents. This\n function will return the assigned message ID if called on the UI thread\n and the message was successfully submitted for validation, otherwise 0.\n See the SendDevToolsMessage documentation for additional usage\n information.\n"]
    pub execute_dev_tools_method: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message_id: ::std::os::raw::c_int,
            method: *const cef_string_t,
            params: *mut _cef_dictionary_value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add an observer for DevTools protocol messages (function results and\n events). The observer will remain registered until the returned\n Registration object is destroyed. See the SendDevToolsMessage\n documentation for additional usage information.\n"]
    pub add_dev_tools_message_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            observer: *mut _cef_dev_tools_message_observer_t
        ) -> *mut _cef_registration_t
    >,
    #[doc = "\n Retrieve a snapshot of current navigation entries as values sent to the\n specified visitor. If |current_only| is true (1) only the current\n navigation entry will be sent, otherwise all navigation entries will be\n sent.\n"]
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n If a misspelled word is currently selected in an editable node calling\n this function will replace it with the specified |word|.\n"]
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t)
    >,
    #[doc = "\n Add the specified |word| to the spelling dictionary.\n"]
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t)
    >,
    #[doc = "\n Returns true (1) if window rendering is disabled.\n"]
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Notify the browser that the widget has been resized. The browser will\n first call cef_render_handler_t::GetViewRect to get the new size and then\n call cef_render_handler_t::OnPaint asynchronously with the updated\n regions. This function is only used when window rendering is disabled.\n"]
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Notify the browser that it has been hidden or shown. Layouting and\n cef_render_handler_t::OnPaint notification will stop when the browser is\n hidden. This function is only used when window rendering is disabled.\n"]
    pub was_hidden: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int)
    >,
    #[doc = "\n Send a notification to the browser that the screen info has changed. The\n browser will then call cef_render_handler_t::GetScreenInfo to update the\n screen information with the new values. This simulates moving the webview\n window from one display to another, or changing the properties of the\n current display. This function is only used when window rendering is\n disabled.\n"]
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Invalidate the view. The browser will call cef_render_handler_t::OnPaint\n asynchronously. This function is only used when window rendering is\n disabled.\n"]
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, type_: cef_paint_element_type_t)
    >,
    #[doc = "\n Issue a BeginFrame request to Chromium.  Only valid when\n cef_window_tInfo::external_begin_frame_enabled is set to true (1).\n"]
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Send a key event to the browser.\n"]
    pub send_key_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_key_event_t)
    >,
    #[doc = "\n Send a mouse click event to the browser. The |x| and |y| coordinates are\n relative to the upper-left corner of the view.\n"]
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            type_: cef_mouse_button_type_t,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Send a mouse move event to the browser. The |x| and |y| coordinates are\n relative to the upper-left corner of the view.\n"]
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Send a mouse wheel event to the browser. The |x| and |y| coordinates are\n relative to the upper-left corner of the view. The |deltaX| and |deltaY|\n values represent the movement delta in the X and Y directions\n respectively. In order to scroll inside select popups with window\n rendering disabled cef_render_handler_t::GetScreenPoint should be\n implemented properly.\n"]
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Send a touch event to the browser for a windowless browser.\n"]
    pub send_touch_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_touch_event_t)
    >,
    #[doc = "\n Send a capture lost event to the browser.\n"]
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Notify the browser that the window hosting it is about to be moved or\n resized. This function is only used on Windows and Linux.\n"]
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Returns the maximum rate in frames per second (fps) that\n cef_render_handler_t::OnPaint will be called for a windowless browser. The\n actual fps may be lower if the browser cannot generate frames at the\n requested rate. The minimum value is 1 and the maximum value is 60\n (default 30). This function can only be called on the UI thread.\n"]
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the maximum rate in frames per second (fps) that\n cef_render_handler_t:: OnPaint will be called for a windowless browser.\n The actual fps may be lower if the browser cannot generate frames at the\n requested rate. The minimum value is 1 and the maximum value is 60\n (default 30). Can also be set at browser creation via\n cef_browser_tSettings.windowless_frame_rate.\n"]
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, frame_rate: ::std::os::raw::c_int)
    >,
    #[doc = "\n Begins a new composition or updates the existing composition. Blink has a\n special node (a composition node) that allows the input function to change\n text without affecting other DOM nodes. |text| is the optional text that\n will be inserted into the composition node. |underlines| is an optional\n set of ranges that will be underlined in the resulting text.\n |replacement_range| is an optional range of the existing text that will be\n replaced. |selection_range| is an optional range of the resulting text\n that will be selected after insertion or replacement. The\n |replacement_range| value is only used on OS X.\n\n This function may be called multiple times as the composition changes.\n When the client is done making changes the composition should either be\n canceled or completed. To cancel the composition call\n ImeCancelComposition. To complete the composition call either\n ImeCommitText or ImeFinishComposingText. Completion is usually signaled\n when:\n\n 1. The client receives a WM_IME_COMPOSITION message with a GCS_RESULTSTR\n    flag (on Windows), or;\n 2. The client receives a \"commit\" signal of GtkIMContext (on Linux), or;\n 3. insertText of NSTextInput is called (on Mac).\n\n This function is only used when window rendering is disabled.\n"]
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t
        )
    >,
    #[doc = "\n Completes the existing composition by optionally inserting the specified\n |text| into the composition node. |replacement_range| is an optional range\n of the existing text that will be replaced. |relative_cursor_pos| is where\n the cursor will be positioned relative to the current cursor position. See\n comments on ImeSetComposition for usage. The |replacement_range| and\n |relative_cursor_pos| values are only used on OS X. This function is only\n used when window rendering is disabled.\n"]
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Completes the existing composition by applying the current composition\n node contents. If |keep_selection| is false (0) the current selection, if\n any, will be discarded. See comments on ImeSetComposition for usage. This\n function is only used when window rendering is disabled.\n"]
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Cancels the existing composition and discards the composition node\n contents without applying them. See comments on ImeSetComposition for\n usage. This function is only used when window rendering is disabled.\n"]
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Call this function when the user drags the mouse into the web view (before\n calling DragTargetDragOver/DragTargetLeave/DragTargetDrop). |drag_data|\n should not contain file contents as this type of data is not allowed to be\n dragged into the web view. File contents can be removed using\n cef_drag_data_t::ResetFileContents (for example, if |drag_data| comes from\n cef_render_handler_t::StartDragging). This function is only used when\n window rendering is disabled.\n"]
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t
        )
    >,
    #[doc = "\n Call this function each time the mouse is moved across the web view during\n a drag operation (after calling DragTargetDragEnter and before calling\n DragTargetDragLeave/DragTargetDrop). This function is only used when\n window rendering is disabled.\n"]
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t
        )
    >,
    #[doc = "\n Call this function when the user drags the mouse out of the web view\n (after calling DragTargetDragEnter). This function is only used when\n window rendering is disabled.\n"]
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Call this function when the user completes the drag operation by dropping\n the object onto the web view (after calling DragTargetDragEnter). The\n object being dropped is |drag_data|, given as an argument to the previous\n DragTargetDragEnter call. This function is only used when window rendering\n is disabled.\n"]
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_mouse_event_t)
    >,
    #[doc = "\n Call this function when the drag operation started by a\n cef_render_handler_t::StartDragging call has ended either in a drop or by\n being cancelled. |x| and |y| are mouse coordinates relative to the upper-\n left corner of the view. If the web view is both the drag source and the\n drag target then all DragTarget* functions should be called before\n DragSource* mthods. This function is only used when window rendering is\n disabled.\n"]
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t
        )
    >,
    #[doc = "\n Call this function when the drag operation started by a\n cef_render_handler_t::StartDragging call has completed. This function may\n be called immediately without first calling DragSourceEndedAt to cancel a\n drag operation. If the web view is both the drag source and the drag\n target then all DragTarget* functions should be called before DragSource*\n mthods. This function is only used when window rendering is disabled.\n"]
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = "\n Returns the current visible navigation entry for this browser. This\n function can only be called on the UI thread.\n"]
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t
    >,
    #[doc = "\n Set accessibility state for all frames. |accessibility_state| may be\n default, enabled or disabled. If |accessibility_state| is STATE_DEFAULT\n then accessibility will be disabled by default and the state may be\n further controlled with the \"force-renderer-accessibility\" and \"disable-\n renderer-accessibility\" command-line switches. If |accessibility_state| is\n STATE_ENABLED then accessibility will be enabled. If |accessibility_state|\n is STATE_DISABLED then accessibility will be completely disabled.\n\n For windowed browsers accessibility will be enabled in Complete mode\n (which corresponds to kAccessibilityModeComplete in Chromium). In this\n mode all platform accessibility objects will be created and managed by\n Chromium's internal implementation. The client needs only to detect the\n screen reader and call this function appropriately. For example, on macOS\n the client can handle the @\"AXEnhancedUserStructure\" accessibility\n attribute to detect VoiceOver state changes and on Windows the client can\n handle WM_GETOBJECT with OBJID_CLIENT to detect accessibility readers.\n\n For windowless browsers accessibility will be enabled in TreeOnly mode\n (which corresponds to kAccessibilityModeWebContentsOnly in Chromium). In\n this mode renderer accessibility is enabled, the full tree is computed,\n and events are passed to CefAccessibiltyHandler, but platform\n accessibility objects are not created. The client may implement platform\n accessibility objects using CefAccessibiltyHandler callbacks if desired.\n"]
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, accessibility_state: cef_state_t)
    >,
    #[doc = "\n Enable notifications of auto resize via\n cef_display_handler_t::OnAutoResize. Notifications are disabled by\n default. |min_size| and |max_size| define the range of allowed sizes.\n"]
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t
        )
    >,
    #[doc = "\n Returns the extension hosted in this browser or NULL if no extension is\n hosted. See cef_request_context_t::LoadExtension for details.\n"]
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t
    >,
    #[doc = "\n Returns true (1) if this browser is hosting an extension background\n script. Background hosts do not have a window and are not displayable. See\n cef_request_context_t::LoadExtension for details.\n"]
    pub is_background_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set whether the browser's audio is muted.\n"]
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if the browser's audio is muted.  This function can only\n be called on the UI thread.\n"]
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the renderer is currently in browser fullscreen. This\n differs from window fullscreen in that browser fullscreen is entered using\n the JavaScript Fullscreen API and modifies CSS attributes such as the\n ::backdrop pseudo-element and :fullscreen pseudo-structure. This function\n can only be called on the UI thread.\n"]
    pub is_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Requests the renderer to exit browser fullscreen. In most cases exiting\n window fullscreen should also exit browser fullscreen. With the Alloy\n runtime this function should be called in response to a user action such\n as clicking the green traffic light button on MacOS\n (cef_window_delegate_t::OnWindowFullscreenTransition callback) or pressing\n the \"ESC\" key (cef_keyboard_handler_t::OnPreKeyEvent callback). With the\n Chrome runtime these standard exit actions are handled internally but\n new/additional user actions can use this function. Set |will_cause_resize|\n to true (1) if exiting browser fullscreen will cause a view resize.\n"]
    pub exit_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            will_cause_resize: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Returns true (1) if a Chrome command is supported and enabled. Values for\n |command_id| can be found in the cef_command_ids.h file. This function can\n only be called on the UI thread. Only used with the Chrome runtime.\n"]
    pub can_execute_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Execute a Chrome command. Values for |command_id| can be found in the\n cef_command_ids.h file. |disposition| provides information about the\n intended command target. Only used with the Chrome runtime.\n"]
    pub execute_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            command_id: ::std::os::raw::c_int,
            disposition: cef_window_open_disposition_t
        )
    >
}
#[doc = "\n Structure used to represent the browser process aspects of a browser. The\n functions of this structure can only be called in the browser process. They\n may be called on any thread in that process unless otherwise indicated in\n the comments.\n"]
pub type cef_browser_host_t = _cef_browser_host_t;
extern "C" {
    #[doc = "\n Create a new browser using the window parameters specified by |windowInfo|.\n All values will be copied internally and the actual window (if any) will be\n created on the UI thread. If |request_context| is NULL the global request\n context will be used. This function can be called on any browser process\n thread and will not block. The optional |extra_info| parameter provides an\n opportunity to specify extra information specific to the created browser\n that will be passed to cef_render_process_handler_t::on_browser_created() in\n the render process.\n"]
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Create a new browser using the window parameters specified by |windowInfo|.\n If |request_context| is NULL the global request context will be used. This\n function can only be called on the browser process UI thread. The optional\n |extra_info| parameter provides an opportunity to specify extra information\n specific to the created browser that will be passed to\n cef_render_process_handler_t::on_browser_created() in the render process.\n"]
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t
    ) -> *mut cef_browser_t;
}
#[doc = "\n Callback structure used for asynchronous continuation of\n cef_extension_handler_t::GetExtensionResource.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_get_extension_resource_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Continue the request. Read the resource contents from |stream|.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t
        )
    >,
    #[doc = "\n Cancel the request.\n"]
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t)
    >
}
#[doc = "\n Callback structure used for asynchronous continuation of\n cef_extension_handler_t::GetExtensionResource.\n"]
pub type cef_get_extension_resource_callback_t = _cef_get_extension_resource_callback_t;
#[doc = "\n Implement this structure to handle events related to browser extensions. The\n functions of this structure will be called on the UI thread. See\n cef_request_context_t::LoadExtension for information about extension\n loading.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_extension_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                         cef_base_ref_counted_t,
    #[doc = "\n Called if the cef_request_context_t::LoadExtension request fails. |result|\n will be the error code.\n"]
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, result: cef_errorcode_t)
    >,
    #[doc = "\n Called if the cef_request_context_t::LoadExtension request succeeds.\n |extension| is the loaded extension.\n"]
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t
        )
    >,
    #[doc = "\n Called after the cef_extension_t::Unload request has completed.\n"]
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t
        )
    >,
    #[doc = "\n Called when an extension needs a browser to host a background script\n specified via the \"background\" manifest key. The browser will have no\n visible window and cannot be displayed. |extension| is the extension that\n is loading the background script. |url| is an internally generated\n reference to an HTML page that will be used to load the background script\n via a \"<script>\" src attribute. To allow creation of the browser\n optionally modify |client| and |settings| and return false (0). To cancel\n creation of the browser (and consequently cancel load of the background\n script) return true (1). Successful creation will be indicated by a call\n to cef_life_span_handler_t::OnAfterCreated, and\n cef_browser_host_t::IsBackgroundHost will return true (1) for the\n resulting browser. See https://developer.chrome.com/extensions/event_pages\n for more information about extension background script usage.\n"]
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when an extension API (e.g. chrome.tabs.create) requests creation\n of a new browser. |extension| and |browser| are the source of the API\n call. |active_browser| may optionally be specified via the windowId\n property or returned via the get_active_browser() callback and provides\n the default |client| and |settings| values for the new browser. |index| is\n the position value optionally specified via the index property. |url| is\n the URL that will be loaded in the browser. |active| is true (1) if the\n new browser should be active when opened.  To allow creation of the\n browser optionally modify |windowInfo|, |client| and |settings| and return\n false (0). To cancel creation of the browser return true (1). Successful\n creation will be indicated by a call to\n cef_life_span_handler_t::OnAfterCreated. Any modifications to |windowInfo|\n will be ignored if |active_browser| is wrapped in a cef_browser_view_t.\n"]
    pub on_before_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when no tabId is specified to an extension API call that accepts a\n tabId parameter (e.g. chrome.tabs.*). |extension| and |browser| are the\n source of the API call. Return the browser that will be acted on by the\n API call or return NULL to act on |browser|. The returned browser must\n share the same cef_request_context_t as |browser|. Incognito browsers\n should not be considered unless the source extension has incognito access\n enabled, in which case |include_incognito| will be true (1).\n"]
    pub get_active_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int
        ) -> *mut _cef_browser_t
    >,
    #[doc = "\n Called when the tabId associated with |target_browser| is specified to an\n extension API call that accepts a tabId parameter (e.g. chrome.tabs.*).\n |extension| and |browser| are the source of the API call. Return true (1)\n to allow access of false (0) to deny access. Access to incognito browsers\n should not be allowed unless the source extension has incognito access\n enabled, in which case |include_incognito| will be true (1).\n"]
    pub can_access_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to retrieve an extension resource that would normally be loaded\n from disk (e.g. if a file parameter is specified to\n chrome.tabs.executeScript). |extension| and |browser| are the source of\n the resource request. |file| is the requested relative file path. To\n handle the resource request return true (1) and execute |callback| either\n synchronously or asynchronously. For the default behavior which reads the\n resource from the extension directory on disk return false (0).\n Localization substitutions will not be applied to resources handled via\n this function.\n"]
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle events related to browser extensions. The\n functions of this structure will be called on the UI thread. See\n cef_request_context_t::LoadExtension for information about extension\n loading.\n"]
pub type cef_extension_handler_t = _cef_extension_handler_t;
#[doc = "\n Supports discovery of and communication with media devices on the local\n network via the Cast and DIAL protocols. The functions of this structure may\n be called on any browser process thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_router_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n Add an observer for MediaRouter events. The observer will remain\n registered until the returned Registration object is destroyed.\n"]
    pub add_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            observer: *mut _cef_media_observer_t
        ) -> *mut _cef_registration_t
    >,
    #[doc = "\n Returns a MediaSource object for the specified media source URN. Supported\n URN schemes include \"cast:\" and \"dial:\", and will be already known by the\n client application (e.g. \"cast:<appId>?clientId=<clientId>\").\n"]
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            urn: *const cef_string_t
        ) -> *mut _cef_media_source_t
    >,
    #[doc = "\n Trigger an asynchronous call to cef_media_observer_t::OnSinks on all\n registered observers.\n"]
    pub notify_current_sinks:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
    #[doc = "\n Create a new route between |source| and |sink|. Source and sink must be\n valid, compatible (as reported by cef_media_sink_t::IsCompatibleWith), and\n a route between them must not already exist. |callback| will be executed\n on success or failure. If route creation succeeds it will also trigger an\n asynchronous call to cef_media_observer_t::OnRoutes on all registered\n observers.\n"]
    pub create_route: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            source: *mut _cef_media_source_t,
            sink: *mut _cef_media_sink_t,
            callback: *mut _cef_media_route_create_callback_t
        )
    >,
    #[doc = "\n Trigger an asynchronous call to cef_media_observer_t::OnRoutes on all\n registered observers.\n"]
    pub notify_current_routes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>
}
#[doc = "\n Supports discovery of and communication with media devices on the local\n network via the Cast and DIAL protocols. The functions of this structure may\n be called on any browser process thread unless otherwise indicated.\n"]
pub type cef_media_router_t = _cef_media_router_t;
extern "C" {
    #[doc = "\n Returns the MediaRouter object associated with the global request context.\n If |callback| is non-NULL it will be executed asnychronously on the UI\n thread after the manager's storage has been initialized. Equivalent to\n calling cef_request_context_t::cef_request_context_get_global_context()->get\n _media_router().\n"]
    pub fn cef_media_router_get_global(
        callback: *mut _cef_completion_callback_t
    ) -> *mut cef_media_router_t;
}
#[doc = "\n Implemented by the client to observe MediaRouter events and registered via\n cef_media_router_t::AddObserver. The functions of this structure will be\n called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_observer_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n The list of available media sinks has changed or\n cef_media_router_t::NotifyCurrentSinks was called.\n"]
    pub on_sinks: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            sinksCount: usize,
            sinks: *const *mut _cef_media_sink_t
        )
    >,
    #[doc = "\n The list of available media routes has changed or\n cef_media_router_t::NotifyCurrentRoutes was called.\n"]
    pub on_routes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            routesCount: usize,
            routes: *const *mut _cef_media_route_t
        )
    >,
    #[doc = "\n The connection state of |route| has changed.\n"]
    pub on_route_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            state: cef_media_route_connection_state_t
        )
    >,
    #[doc = "\n A message was received over |route|. |message| is only valid for the scope\n of this callback and should be copied if necessary.\n"]
    pub on_route_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        )
    >
}
#[doc = "\n Implemented by the client to observe MediaRouter events and registered via\n cef_media_router_t::AddObserver. The functions of this structure will be\n called on the browser process UI thread.\n"]
pub type cef_media_observer_t = _cef_media_observer_t;
#[doc = "\n Represents the route between a media source and sink. Instances of this\n object are created via cef_media_router_t::CreateRoute and retrieved via\n cef_media_observer_t::OnRoutes. Contains the status and metadata of a\n routing operation. The functions of this structure may be called on any\n browser process thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_route_t {
    #[doc = "\n Base structure.\n"]
    pub base:               cef_base_ref_counted_t,
    #[doc = "\n Returns the ID for this route.\n"]
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the source associated with this route.\n"]
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_source_t
    >,
    #[doc = "\n Returns the sink associated with this route.\n"]
    pub get_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_sink_t
    >,
    #[doc = "\n Send a message over this route. |message| will be copied if necessary.\n"]
    pub send_route_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize
        )
    >,
    #[doc = "\n Terminate this route. Will result in an asynchronous call to\n cef_media_observer_t::OnRoutes on all registered observers.\n"]
    pub terminate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t)>
}
#[doc = "\n Represents the route between a media source and sink. Instances of this\n object are created via cef_media_router_t::CreateRoute and retrieved via\n cef_media_observer_t::OnRoutes. Contains the status and metadata of a\n routing operation. The functions of this structure may be called on any\n browser process thread unless otherwise indicated.\n"]
pub type cef_media_route_t = _cef_media_route_t;
#[doc = "\n Callback structure for cef_media_router_t::CreateRoute. The functions of\n this structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_route_create_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                           cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed when the route creation has finished.\n |result| will be CEF_MRCR_OK if the route creation succeeded. |error| will\n be a description of the error if the route creation failed. |route| is the\n resulting route, or NULL if the route creation failed.\n"]
    pub on_media_route_create_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_create_callback_t,
            result: cef_media_route_create_result_t,
            error: *const cef_string_t,
            route: *mut _cef_media_route_t
        )
    >
}
#[doc = "\n Callback structure for cef_media_router_t::CreateRoute. The functions of\n this structure will be called on the browser process UI thread.\n"]
pub type cef_media_route_create_callback_t = _cef_media_route_create_callback_t;
#[doc = "\n Represents a sink to which media can be routed. Instances of this object are\n retrieved via cef_media_observer_t::OnSinks. The functions of this structure\n may be called on any browser process thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_t {
    #[doc = "\n Base structure.\n"]
    pub base:               cef_base_ref_counted_t,
    #[doc = "\n Returns the ID for this sink.\n"]
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the name of this sink.\n"]
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the icon type for this sink.\n"]
    pub get_icon_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_media_sink_icon_type_t
    >,
    #[doc = "\n Asynchronously retrieves device info.\n"]
    pub get_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_t,
            callback: *mut _cef_media_sink_device_info_callback_t
        )
    >,
    #[doc = "\n Returns true (1) if this sink accepts content via Cast.\n"]
    pub is_cast_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this sink accepts content via DIAL.\n"]
    pub is_dial_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this sink is compatible with |source|.\n"]
    pub is_compatible_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_t,
            source: *mut _cef_media_source_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Represents a sink to which media can be routed. Instances of this object are\n retrieved via cef_media_observer_t::OnSinks. The functions of this structure\n may be called on any browser process thread unless otherwise indicated.\n"]
pub type cef_media_sink_t = _cef_media_sink_t;
#[doc = "\n Callback structure for cef_media_sink_t::GetDeviceInfo. The functions of\n this structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed asyncronously once device information has\n been retrieved.\n"]
    pub on_media_sink_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_device_info_callback_t,
            device_info: *const _cef_media_sink_device_info_t
        )
    >
}
#[doc = "\n Callback structure for cef_media_sink_t::GetDeviceInfo. The functions of\n this structure will be called on the browser process UI thread.\n"]
pub type cef_media_sink_device_info_callback_t = _cef_media_sink_device_info_callback_t;
#[doc = "\n Represents a source from which media can be routed. Instances of this object\n are retrieved via cef_media_router_t::GetSource. The functions of this\n structure may be called on any browser process thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_source_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Returns the ID (media source URN or URL) for this source.\n"]
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if this source outputs its content via Cast.\n"]
    pub is_cast_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this source outputs its content via DIAL.\n"]
    pub is_dial_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Represents a source from which media can be routed. Instances of this object\n are retrieved via cef_media_router_t::GetSource. The functions of this\n structure may be called on any browser process thread unless otherwise\n indicated.\n"]
pub type cef_media_source_t = _cef_media_source_t;
#[doc = "\n Structure that manages custom preference registrations.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_preference_registrar_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_scoped_t,
    #[doc = "\n Register a preference with the specified |name| and |default_value|. To\n avoid conflicts with built-in preferences the |name| value should contain\n an application-specific prefix followed by a period (e.g. \"myapp.value\").\n The contents of |default_value| will be copied. The data type for the\n preference will be inferred from |default_value|'s type and cannot be\n changed after registration. Returns true (1) on success. Returns false (0)\n if |name| is already registered or if |default_value| has an invalid type.\n This function must be called from within the scope of the\n cef_browser_process_handler_t::OnRegisterCustomPreferences callback.\n"]
    pub add_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_registrar_t,
            name: *const cef_string_t,
            default_value: *mut _cef_value_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that manages custom preference registrations.\n"]
pub type cef_preference_registrar_t = _cef_preference_registrar_t;
#[doc = "\n Manage access to preferences. Many built-in preferences are registered by\n Chromium. Custom preferences can be registered in\n cef_browser_process_handler_t::OnRegisterCustomPreferences.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_preference_manager_t {
    #[doc = "\n Base structure.\n"]
    pub base:                cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if a preference with the specified |name| exists. This\n function must be called on the browser process UI thread.\n"]
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value for the preference with the specified |name|. Returns\n NULL if the preference does not exist. The returned object contains a copy\n of the underlying preference value and modifications to the returned\n object will not modify the underlying preference value. This function must\n be called on the browser process UI thread.\n"]
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t
        ) -> *mut _cef_value_t
    >,
    #[doc = "\n Returns all preferences as a dictionary. If |include_defaults| is true (1)\n then preferences currently at their default value will be included. The\n returned object contains a copy of the underlying preference values and\n modifications to the returned object will not modify the underlying\n preference values. This function must be called on the browser process UI\n thread.\n"]
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            include_defaults: ::std::os::raw::c_int
        ) -> *mut _cef_dictionary_value_t
    >,
    #[doc = "\n Returns true (1) if the preference with the specified |name| can be\n modified using SetPreference. As one example preferences set via the\n command-line usually cannot be modified. This function must be called on\n the browser process UI thread.\n"]
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the |value| associated with preference |name|. Returns true (1) if the\n value is set successfully and false (0) otherwise. If |value| is NULL the\n preference will be restored to its default value. If setting the\n preference fails then |error| will be populated with a detailed\n description of the problem. This function must be called on the browser\n process UI thread.\n"]
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Manage access to preferences. Many built-in preferences are registered by\n Chromium. Custom preferences can be registered in\n cef_browser_process_handler_t::OnRegisterCustomPreferences.\n"]
pub type cef_preference_manager_t = _cef_preference_manager_t;
extern "C" {
    #[doc = "\n Returns the global preference manager object.\n"]
    pub fn cef_preference_manager_get_global() -> *mut cef_preference_manager_t;
}
#[doc = "\n Callback structure for cef_request_context_t::ResolveHost.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resolve_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_base_ref_counted_t,
    #[doc = "\n Called on the UI thread after the ResolveHost request has completed.\n |result| will be the result code. |resolved_ips| will be the list of\n resolved IP addresses or NULL if the resolution failed.\n"]
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t,
            resolved_ips: cef_string_list_t
        )
    >
}
#[doc = "\n Callback structure for cef_request_context_t::ResolveHost.\n"]
pub type cef_resolve_callback_t = _cef_resolve_callback_t;
#[doc = "\n A request context provides request handling for a set of related browser or\n URL request objects. A request context can be specified when creating a new\n browser via the cef_browser_host_t static factory functions or when creating\n a new URL request via the cef_urlrequest_t static factory functions. Browser\n objects with different request contexts will never be hosted in the same\n render process. Browser objects with the same request context may or may not\n be hosted in the same render process depending on the process model. Browser\n objects created indirectly via the JavaScript window.open function or\n targeted links will share the same render process and the same request\n context as the source browser. When running in single-process mode there is\n only a single render process (the main process) and so all browsers created\n in single-process mode will share the same request context. This will be the\n first request context passed into a cef_browser_host_t static factory\n function and all other request context objects will be ignored.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_t {
    #[doc = "\n Base structure.\n"]
    pub base:                            cef_preference_manager_t,
    #[doc = "\n Returns true (1) if this object is pointing to the same context as |that|\n object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is sharing the same storage as |that|\n object.\n"]
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is the global context. The global context\n is used by default when creating a browser or URL request with a NULL\n context argument.\n"]
    pub is_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the handler for this context if any.\n"]
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t
        ) -> *mut _cef_request_context_handler_t
    >,
    #[doc = "\n Returns the cache path for this object. If NULL an \"incognito mode\" in-\n memory cache is being used.\n"]
    pub get_cache_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the cookie manager for this object. If |callback| is non-NULL it\n will be executed asnychronously on the UI thread after the manager's\n storage has been initialized.\n"]
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        ) -> *mut _cef_cookie_manager_t
    >,
    #[doc = "\n Register a scheme handler factory for the specified |scheme_name| and\n optional |domain_name|. An NULL |domain_name| value for a standard scheme\n will cause the factory to match all domain names. The |domain_name| value\n will be ignored for non-standard schemes. If |scheme_name| is a built-in\n scheme and no handler is returned by |factory| then the built-in scheme\n handler factory will be called. If |scheme_name| is a custom scheme then\n you must also implement the cef_app_t::on_register_custom_schemes()\n function in all processes. This function may be called multiple times to\n change or remove the factory that matches the specified |scheme_name| and\n optional |domain_name|. Returns false (0) if an error occurs. This\n function may be called on any thread in the browser process.\n"]
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Clear all registered scheme handler factories. Returns false (0) on error.\n This function may be called on any thread in the browser process.\n"]
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Clears all certificate exceptions that were added as part of handling\n cef_request_handler_t::on_certificate_error(). If you call this it is\n recommended that you also call close_all_connections() or you risk not\n being prompted again for server certificates if you reconnect quickly. If\n |callback| is non-NULL it will be executed on the UI thread after\n completion.\n"]
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        )
    >,
    #[doc = "\n Clears all HTTP authentication credentials that were added as part of\n handling GetAuthCredentials. If |callback| is non-NULL it will be executed\n on the UI thread after completion.\n"]
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        )
    >,
    #[doc = "\n Clears all active and idle connections that Chromium currently has. This\n is only recommended if you have released all other CEF objects but don't\n yet want to call cef_shutdown(). If |callback| is non-NULL it will be\n executed on the UI thread after completion.\n"]
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        )
    >,
    #[doc = "\n Attempts to resolve |origin| to a list of associated IP addresses.\n |callback| will be executed on the UI thread after completion.\n"]
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t
        )
    >,
    #[doc = "\n Load an extension.\n\n If extension resources will be read from disk using the default load\n implementation then |root_directory| should be the absolute path to the\n extension resources directory and |manifest| should be NULL. If extension\n resources will be provided by the client (e.g. via cef_request_handler_t\n and/or cef_extension_handler_t) then |root_directory| should be a path\n component unique to the extension (if not absolute this will be internally\n prefixed with the PK_DIR_RESOURCES path) and |manifest| should contain the\n contents that would otherwise be read from the \"manifest.json\" file on\n disk.\n\n The loaded extension will be accessible in all contexts sharing the same\n storage (HasExtension returns true (1)). However, only the context on\n which this function was called is considered the loader (DidLoadExtension\n returns true (1)) and only the loader will receive\n cef_request_context_handler_t callbacks for the extension.\n\n cef_extension_handler_t::OnExtensionLoaded will be called on load success\n or cef_extension_handler_t::OnExtensionLoadFailed will be called on load\n failure.\n\n If the extension specifies a background script via the \"background\"\n manifest key then cef_extension_handler_t::OnBeforeBackgroundBrowser will\n be called to create the background browser. See that function for\n additional information about background scripts.\n\n For visible extension views the client application should evaluate the\n manifest to determine the correct extension URL to load and then pass that\n URL to the cef_browser_host_t::CreateBrowser* function after the extension\n has loaded. For example, the client can look for the \"browser_action\"\n manifest key as documented at\n https://developer.chrome.com/extensions/browserAction. Extension URLs take\n the form \"chrome-extension://<extension_id>/<path>\".\n\n Browsers that host extensions differ from normal browsers as follows:\n  - Can access chrome.* JavaScript APIs if allowed by the manifest. Visit\n    chrome://extensions-support for the list of extension APIs currently\n    supported by CEF.\n  - Main frame navigation to non-extension content is blocked.\n  - Pinch-zooming is disabled.\n  - CefBrowserHost::GetExtension returns the hosted extension.\n  - CefBrowserHost::IsBackgroundHost returns true for background hosts.\n\n See https://developer.chrome.com/extensions for extension implementation\n and usage documentation.\n"]
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t
        )
    >,
    #[doc = "\n Returns true (1) if this context was used to load the extension identified\n by |extension_id|. Other contexts sharing the same storage will also have\n access to the extension (see HasExtension). This function must be called\n on the browser process UI thread.\n"]
    pub did_load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this context has access to the extension identified by\n |extension_id|. This may not be the context that was used to load the\n extension (see DidLoadExtension). This function must be called on the\n browser process UI thread.\n"]
    pub has_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Retrieve the list of all extensions that this context has access to (see\n HasExtension). |extension_ids| will be populated with the list of\n extension ID values. Returns true (1) on success. This function must be\n called on the browser process UI thread.\n"]
    pub get_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the extension matching |extension_id| or NULL if no matching\n extension is accessible in this context (see HasExtension). This function\n must be called on the browser process UI thread.\n"]
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t
        ) -> *mut _cef_extension_t
    >,
    #[doc = "\n Returns the MediaRouter object associated with this context.  If\n |callback| is non-NULL it will be executed asnychronously on the UI thread\n after the manager's context has been initialized.\n"]
    pub get_media_router: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t
        ) -> *mut _cef_media_router_t
    >,
    #[doc = "\n Returns the current value for |content_type| that applies for the\n specified URLs. If both URLs are NULL the default value will be returned.\n Returns nullptr if no value is configured. Must be called on the browser\n process UI thread.\n"]
    pub get_website_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t
        ) -> *mut _cef_value_t
    >,
    #[doc = "\n Sets the current value for |content_type| for the specified URLs in the\n default scope. If both URLs are NULL, and the context is not incognito,\n the default value will be set. Pass nullptr for |value| to remove the\n default value for this content type.\n\n WARNING: Incorrect usage of this function may cause instability or\n security issues in Chromium. Make sure that you first understand the\n potential impact of any changes to |content_type| by reviewing the related\n source code in Chromium. For example, if you plan to modify\n CEF_CONTENT_SETTING_TYPE_POPUPS, first review and understand the usage of\n ContentSettingsType::POPUPS in Chromium:\n https://source.chromium.org/search?q=ContentSettingsType::POPUPS\n"]
    pub set_website_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
            value: *mut _cef_value_t
        )
    >,
    #[doc = "\n Returns the current value for |content_type| that applies for the\n specified URLs. If both URLs are NULL the default value will be returned.\n Returns CEF_CONTENT_SETTING_VALUE_DEFAULT if no value is configured. Must\n be called on the browser process UI thread.\n"]
    pub get_content_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t
        ) -> cef_content_setting_values_t
    >,
    #[doc = "\n Sets the current value for |content_type| for the specified URLs in the\n default scope. If both URLs are NULL, and the context is not incognito,\n the default value will be set. Pass CEF_CONTENT_SETTING_VALUE_DEFAULT for\n |value| to use the default value for this content type.\n\n WARNING: Incorrect usage of this function may cause instability or\n security issues in Chromium. Make sure that you first understand the\n potential impact of any changes to |content_type| by reviewing the related\n source code in Chromium. For example, if you plan to modify\n CEF_CONTENT_SETTING_TYPE_POPUPS, first review and understand the usage of\n ContentSettingsType::POPUPS in Chromium:\n https://source.chromium.org/search?q=ContentSettingsType::POPUPS\n"]
    pub set_content_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
            value: cef_content_setting_values_t
        )
    >
}
#[doc = "\n A request context provides request handling for a set of related browser or\n URL request objects. A request context can be specified when creating a new\n browser via the cef_browser_host_t static factory functions or when creating\n a new URL request via the cef_urlrequest_t static factory functions. Browser\n objects with different request contexts will never be hosted in the same\n render process. Browser objects with the same request context may or may not\n be hosted in the same render process depending on the process model. Browser\n objects created indirectly via the JavaScript window.open function or\n targeted links will share the same render process and the same request\n context as the source browser. When running in single-process mode there is\n only a single render process (the main process) and so all browsers created\n in single-process mode will share the same request context. This will be the\n first request context passed into a cef_browser_host_t static factory\n function and all other request context objects will be ignored.\n"]
pub type cef_request_context_t = _cef_request_context_t;
extern "C" {
    #[doc = "\n Returns the global context object.\n"]
    pub fn cef_request_context_get_global_context() -> *mut cef_request_context_t;
}
extern "C" {
    #[doc = "\n Creates a new context object with the specified |settings| and optional\n |handler|.\n"]
    pub fn cef_request_context_create_context(
        settings: *const _cef_request_context_settings_t,
        handler: *mut _cef_request_context_handler_t
    ) -> *mut cef_request_context_t;
}
extern "C" {
    #[doc = "\n Creates a new context object that shares storage with |other| and uses an\n optional |handler|.\n"]
    pub fn cef_create_context_shared(
        other: *mut cef_request_context_t,
        handler: *mut _cef_request_context_handler_t
    ) -> *mut cef_request_context_t;
}
#[doc = "\n Structure used to represent a web response. The functions of this structure\n may be called on any thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_response_t {
    #[doc = "\n Base structure.\n"]
    pub base:               cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is read-only.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Get the response error code. Returns ERR_NONE if there was no error.\n"]
    pub get_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t>,
    #[doc = "\n Set the response error code. This can be used by custom scheme handlers to\n return errors during initial request processing.\n"]
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t)
    >,
    #[doc = "\n Get the response status code.\n"]
    pub get_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the response status code.\n"]
    pub set_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int)
    >,
    #[doc = "\n Get the response status text.\n"]
    pub get_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the response status text.\n"]
    pub set_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t)
    >,
    #[doc = "\n Get the response mime type.\n"]
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the response mime type.\n"]
    pub set_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t)
    >,
    #[doc = "\n Get the response charset.\n"]
    pub get_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the response charset.\n"]
    pub set_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t)
    >,
    #[doc = "\n Get the value for the specified response header field.\n"]
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the header |name| to |value|. If |overwrite| is true (1) any existing\n values will be replaced with the new value. If |overwrite| is false (0)\n any existing values will not be overwritten.\n"]
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Get all response header fields.\n"]
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)
    >,
    #[doc = "\n Set all response header fields.\n"]
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)
    >,
    #[doc = "\n Get the resolved URL after redirects or changed as a result of HSTS.\n"]
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the resolved URL after redirects or changed as a result of HSTS.\n"]
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t)
    >
}
#[doc = "\n Structure used to represent a web response. The functions of this structure\n may be called on any thread.\n"]
pub type cef_response_t = _cef_response_t;
extern "C" {
    #[doc = "\n Create a new cef_response_t object.\n"]
    pub fn cef_response_create() -> *mut cef_response_t;
}
#[doc = "\n Callback structure for asynchronous continuation of file dialog requests.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_file_dialog_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Continue the file selection. |file_paths| should be a single value or a\n list of values depending on the dialog mode. An NULL |file_paths| value is\n treated the same as calling cancel().\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_file_dialog_callback_t,
            file_paths: cef_string_list_t
        )
    >,
    #[doc = "\n Cancel the file selection.\n"]
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_file_dialog_callback_t)>
}
#[doc = "\n Callback structure for asynchronous continuation of file dialog requests.\n"]
pub type cef_file_dialog_callback_t = _cef_file_dialog_callback_t;
#[doc = "\n Implement this structure to handle dialog events. The functions of this\n structure will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dialog_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Called to run a file chooser dialog. |mode| represents the type of dialog\n to display. |title| to the title to be used for the dialog and may be NULL\n to show the default title (\"Open\" or \"Save\" depending on the mode).\n |default_file_path| is the path with optional directory and/or file name\n component that should be initially selected in the dialog.\n |accept_filters| are used to restrict the selectable file types and may\n any combination of (a) valid lower-cased MIME types (e.g. \"text/*\" or\n \"image/*\"), (b) individual file extensions (e.g. \".txt\" or \".png\"), or (c)\n combined description and file extension delimited using \"|\" and \";\" (e.g.\n \"Image Types|.png;.gif;.jpg\"). To display a custom dialog return true (1)\n and execute |callback| either inline or at a later time. To display the\n default dialog return false (0).\n"]
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            callback: *mut _cef_file_dialog_callback_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle dialog events. The functions of this\n structure will be called on the browser process UI thread.\n"]
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[doc = "\n Structure that supports the reading of XML data via the libxml streaming\n API. The functions of this structure should only be called on the thread\n that creates the object.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_xml_reader_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n Moves the cursor to the next node in the document. This function must be\n called at least once to set the current cursor position. Returns true (1)\n if the cursor position was set successfully.\n"]
    pub move_to_next_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Close the document. This should be called directly to ensure that cleanup\n occurs on the correct thread.\n"]
    pub close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if an error has been reported by the XML parser.\n"]
    pub has_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the error string.\n"]
    pub get_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the node type.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_xml_node_type_t
    >,
    #[doc = "\n Returns the node depth. Depth starts at 0 for the root node.\n"]
    pub get_depth: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the local name. See http://www.w3.org/TR/REC-xml-names/#NT-\n LocalPart for additional details.\n"]
    pub get_local_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the namespace prefix. See http://www.w3.org/TR/REC-xml-names/ for\n additional details.\n"]
    pub get_prefix: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the qualified name, equal to (Prefix:)LocalName. See\n http://www.w3.org/TR/REC-xml-names/#ns-qualnames for additional details.\n"]
    pub get_qualified_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the URI defining the namespace associated with the node. See\n http://www.w3.org/TR/REC-xml-names/ for additional details.\n"]
    pub get_namespace_uri: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the base URI of the node. See http://www.w3.org/TR/xmlbase/ for\n additional details.\n"]
    pub get_base_uri: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the xml:lang scope within which the node resides. See\n http://www.w3.org/TR/REC-xml/#sec-lang-tag for additional details.\n"]
    pub get_xml_lang: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if the node represents an NULL element. \"<a/>\" is\n considered NULL but \"<a></a>\" is not.\n"]
    pub is_empty_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the node has a text value.\n"]
    pub has_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the text value.\n"]
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if the node has attributes.\n"]
    pub has_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the number of attributes.\n"]
    pub get_attribute_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> usize>,
    #[doc = "\n Returns the value of the attribute at the specified 0-based index.\n"]
    pub get_attribute_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            index: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the value of the attribute with the specified qualified name.\n"]
    pub get_attribute_byqname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            qualifiedName: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the value of the attribute with the specified local name and\n namespace URI.\n"]
    pub get_attribute_bylname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            localName: *const cef_string_t,
            namespaceURI: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns an XML representation of the current node's children.\n"]
    pub get_inner_xml: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns an XML representation of the current node including its children.\n"]
    pub get_outer_xml: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the line number for the current node.\n"]
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the attribute at the specified 0-based index. Returns\n true (1) if the cursor position was set successfully.\n"]
    pub move_to_attribute_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            index: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the attribute with the specified qualified name.\n Returns true (1) if the cursor position was set successfully.\n"]
    pub move_to_attribute_byqname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            qualifiedName: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the attribute with the specified local name and\n namespace URI. Returns true (1) if the cursor position was set\n successfully.\n"]
    pub move_to_attribute_bylname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_xml_reader_t,
            localName: *const cef_string_t,
            namespaceURI: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the first attribute in the current element. Returns\n true (1) if the cursor position was set successfully.\n"]
    pub move_to_first_attribute: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the next attribute in the current element. Returns\n true (1) if the cursor position was set successfully.\n"]
    pub move_to_next_attribute: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor back to the carrying element. Returns true (1) if the\n cursor position was set successfully.\n"]
    pub move_to_carrying_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_xml_reader_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that supports the reading of XML data via the libxml streaming\n API. The functions of this structure should only be called on the thread\n that creates the object.\n"]
pub type cef_xml_reader_t = _cef_xml_reader_t;
extern "C" {
    #[doc = "\n Create a new cef_xml_reader_t object. The returned object's functions can\n only be called from the thread that created the object.\n"]
    pub fn cef_xml_reader_create(
        stream: *mut _cef_stream_reader_t,
        encodingType: cef_xml_encoding_type_t,
        URI: *const cef_string_t
    ) -> *mut cef_xml_reader_t;
}
#[doc = "\n Structure that builds a cef_process_message_t containing a shared memory\n region. This structure is not thread-safe but may be used exclusively on a\n different thread from the one which constructed it.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_shared_process_message_builder_t {
    #[doc = "\n Base structure.\n"]
    pub base:     cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the builder is valid.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_process_message_builder_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the size of the shared memory region in bytes. Returns 0 for\n invalid instances.\n"]
    pub size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_process_message_builder_t) -> usize
    >,
    #[doc = "\n Returns the pointer to the writable memory. Returns nullptr for invalid\n instances. The returned pointer is only valid for the life span of this\n object.\n"]
    pub memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_process_message_builder_t
        ) -> *mut ::std::os::raw::c_void
    >,
    #[doc = "\n Creates a new cef_process_message_t from the data provided to the builder.\n Returns nullptr for invalid instances. Invalidates the builder instance.\n"]
    pub build: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_shared_process_message_builder_t
        ) -> *mut _cef_process_message_t
    >
}
#[doc = "\n Structure that builds a cef_process_message_t containing a shared memory\n region. This structure is not thread-safe but may be used exclusively on a\n different thread from the one which constructed it.\n"]
pub type cef_shared_process_message_builder_t = _cef_shared_process_message_builder_t;
extern "C" {
    #[doc = "\n Creates a new cef_shared_process_message_builder_t with the specified |name|\n and shared memory region of specified |byte_size|.\n"]
    pub fn cef_shared_process_message_builder_create(
        name: *const cef_string_t,
        byte_size: usize
    ) -> *mut cef_shared_process_message_builder_t;
}
#[doc = "\n WaitableEvent is a thread synchronization tool that allows one thread to\n wait for another thread to finish some work. This is equivalent to using a\n Lock+ConditionVariable to protect a simple boolean value. However, using\n WaitableEvent in conjunction with a Lock to wait for a more complex state\n change (e.g., for an item to be added to a queue) is not recommended. In\n that case consider using a ConditionVariable instead of a WaitableEvent. It\n is safe to create and/or signal a WaitableEvent from any thread. Blocking on\n a WaitableEvent by calling the *wait() functions is not allowed on the\n browser process UI or IO threads.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_waitable_event_t {
    #[doc = "\n Base structure.\n"]
    pub base:        cef_base_ref_counted_t,
    #[doc = "\n Put the event in the un-signaled state.\n"]
    pub reset:       ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_waitable_event_t)>,
    #[doc = "\n Put the event in the signaled state. This causes any thread blocked on\n Wait to be woken up.\n"]
    pub signal:      ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_waitable_event_t)>,
    #[doc = "\n Returns true (1) if the event is in the signaled state, else false (0). If\n the event was created with |automatic_reset| set to true (1) then calling\n this function will also cause a reset.\n"]
    pub is_signaled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_waitable_event_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Wait indefinitely for the event to be signaled. This function will not\n return until after the call to signal() has completed. This function\n cannot be called on the browser process UI or IO threads.\n"]
    pub wait:        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_waitable_event_t)>,
    #[doc = "\n Wait up to |max_ms| milliseconds for the event to be signaled. Returns\n true (1) if the event was signaled. A return value of false (0) does not\n necessarily mean that |max_ms| was exceeded. This function will not return\n until after the call to signal() has completed. This function cannot be\n called on the browser process UI or IO threads.\n"]
    pub timed_wait: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_waitable_event_t,
            max_ms: i64
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n WaitableEvent is a thread synchronization tool that allows one thread to\n wait for another thread to finish some work. This is equivalent to using a\n Lock+ConditionVariable to protect a simple boolean value. However, using\n WaitableEvent in conjunction with a Lock to wait for a more complex state\n change (e.g., for an item to be added to a queue) is not recommended. In\n that case consider using a ConditionVariable instead of a WaitableEvent. It\n is safe to create and/or signal a WaitableEvent from any thread. Blocking on\n a WaitableEvent by calling the *wait() functions is not allowed on the\n browser process UI or IO threads.\n"]
pub type cef_waitable_event_t = _cef_waitable_event_t;
extern "C" {
    #[doc = "\n Create a new waitable event. If |automatic_reset| is true (1) then the event\n state is automatically reset to un-signaled after a single waiting thread\n has been released; otherwise, the state remains signaled until reset() is\n called manually. If |initially_signaled| is true (1) then the event will\n start in the signaled state.\n"]
    pub fn cef_waitable_event_create(
        automatic_reset: ::std::os::raw::c_int,
        initially_signaled: ::std::os::raw::c_int
    ) -> *mut cef_waitable_event_t;
}
#[doc = "\n Implement this structure to handle audio events.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Called on the UI thread to allow configuration of audio stream parameters.\n Return true (1) to proceed with audio stream capture, or false (0) to\n cancel it. All members of |params| can optionally be configured here, but\n they are also pre-filled with some sensible defaults.\n"]
    pub get_audio_parameters: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *mut cef_audio_parameters_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on a browser audio capture thread when the browser starts streaming\n audio. OnAudioStreamStopped will always be called after\n OnAudioStreamStarted; both functions may be called multiple times for the\n same browser. |params| contains the audio parameters like sample rate and\n channel layout. |channels| is the number of channels.\n"]
    pub on_audio_stream_started: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *const cef_audio_parameters_t,
            channels: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called on the audio stream thread when a PCM packet is received for the\n stream. |data| is an array representing the raw PCM data as a floating\n point type, i.e. 4-byte value(s). |frames| is the number of frames in the\n PCM packet. |pts| is the presentation timestamp (in milliseconds since the\n Unix Epoch) and represents the time at which the decompressed packet\n should be presented to the user. Based on |frames| and the\n |channel_layout| value passed to OnAudioStreamStarted you can calculate\n the size of the |data| array in bytes.\n"]
    pub on_audio_stream_packet: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            data: *mut *const f32,
            frames: ::std::os::raw::c_int,
            pts: i64
        )
    >,
    #[doc = "\n Called on the UI thread when the stream has stopped. OnAudioSteamStopped\n will always be called after OnAudioStreamStarted; both functions may be\n called multiple times for the same stream.\n"]
    pub on_audio_stream_stopped: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_audio_handler_t, browser: *mut _cef_browser_t)
    >,
    #[doc = "\n Called on the UI or audio stream thread when an error occurred. During the\n stream creation phase this callback will be called on the UI thread while\n in the capturing phase it will be called on the audio stream thread. The\n stream will be stopped immediately.\n"]
    pub on_audio_stream_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            message: *const cef_string_t
        )
    >
}
#[doc = "\n Implement this structure to handle audio events.\n"]
pub type cef_audio_handler_t = _cef_audio_handler_t;
#[doc = "\n Implement this structure to handle events related to commands. The functions\n of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_command_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                               cef_base_ref_counted_t,
    #[doc = "\n Called to execute a Chrome command triggered via menu selection or\n keyboard shortcut. Values for |command_id| can be found in the\n cef_command_ids.h file. |disposition| provides information about the\n intended command target. Return true (1) if the command was handled or\n false (0) for the default implementation. For context menu commands this\n will be called after cef_context_menu_handler_t::OnContextMenuCommand.\n Only used with the Chrome runtime.\n"]
    pub on_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int,
            disposition: cef_window_open_disposition_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to check if a Chrome app menu item should be visible. Values for\n |command_id| can be found in the cef_command_ids.h file. Only called for\n menu items that would be visible by default. Only used with the Chrome\n runtime.\n"]
    pub is_chrome_app_menu_item_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to check if a Chrome app menu item should be enabled. Values for\n |command_id| can be found in the cef_command_ids.h file. Only called for\n menu items that would be enabled by default. Only used with the Chrome\n runtime.\n"]
    pub is_chrome_app_menu_item_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called during browser creation to check if a Chrome page action icon\n should be visible. Only called for icons that would be visible by default.\n Only used with the Chrome runtime.\n"]
    pub is_chrome_page_action_icon_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            icon_type: cef_chrome_page_action_icon_type_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called during browser creation to check if a Chrome toolbar button should\n be visible. Only called for buttons that would be visible by default. Only\n used with the Chrome runtime.\n"]
    pub is_chrome_toolbar_button_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            button_type: cef_chrome_toolbar_button_type_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle events related to commands. The functions\n of this structure will be called on the UI thread.\n"]
pub type cef_command_handler_t = _cef_command_handler_t;
#[doc = "\n Implement this structure to handle menu model events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_model_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Perform the action associated with the specified |command_id| and optional\n |event_flags|.\n"]
    pub execute_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        )
    >,
    #[doc = "\n Called when the user moves the mouse outside the menu and over the owning\n window.\n"]
    pub mouse_outside_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t
        )
    >,
    #[doc = "\n Called on unhandled open submenu keyboard commands. |is_rtl| will be true\n (1) if the menu is displaying a right-to-left language.\n"]
    pub unhandled_open_submenu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called on unhandled close submenu keyboard commands. |is_rtl| will be true\n (1) if the menu is displaying a right-to-left language.\n"]
    pub unhandled_close_submenu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n The menu is about to show.\n"]
    pub menu_will_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t
        )
    >,
    #[doc = "\n The menu has closed.\n"]
    pub menu_closed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t
        )
    >,
    #[doc = "\n Optionally modify a menu item label. Return true (1) if |label| was\n modified.\n"]
    pub format_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            label: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle menu model events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_menu_model_delegate_t = _cef_menu_model_delegate_t;
#[doc = "\n Supports creation and modification of menus. See cef_menu_id_t for the\n command ids that have default implementations. All user-defined command ids\n should be between MENU_ID_USER_FIRST and MENU_ID_USER_LAST. The functions of\n this structure can only be accessed on the browser process the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_model_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this menu is a submenu.\n"]
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Clears the menu. Returns true (1) on success.\n"]
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the number of items in this menu.\n"]
    pub get_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> usize>,
    #[doc = "\n Add a separator to the menu. Returns true (1) on success.\n"]
    pub add_separator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add an item to the menu. Returns true (1) on success.\n"]
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add a check item to the menu. Returns true (1) on success.\n"]
    pub add_check_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add a radio item to the menu. Only a single item with the specified\n |group_id| can be checked at a time. Returns true (1) on success.\n"]
    pub add_radio_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Add a sub-menu to the menu. The new sub-menu is returned.\n"]
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> *mut _cef_menu_model_t
    >,
    #[doc = "\n Insert a separator in the menu at the specified |index|. Returns true (1)\n on success.\n"]
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Insert an item in the menu at the specified |index|. Returns true (1) on\n success.\n"]
    pub insert_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Insert a check item in the menu at the specified |index|. Returns true (1)\n on success.\n"]
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Insert a radio item in the menu at the specified |index|. Only a single\n item with the specified |group_id| can be checked at a time. Returns true\n (1) on success.\n"]
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Insert a sub-menu in the menu at the specified |index|. The new sub-menu\n is returned.\n"]
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> *mut _cef_menu_model_t
    >,
    #[doc = "\n Removes the item with the specified |command_id|. Returns true (1) on\n success.\n"]
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Removes the item at the specified |index|. Returns true (1) on success.\n"]
    pub remove_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the index associated with the specified |command_id| or -1 if not\n found due to the command id not existing in the menu.\n"]
    pub get_index_of: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the command id at the specified |index| or -1 if not found due to\n invalid range or the index being a separator.\n"]
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the command id at the specified |index|. Returns true (1) on success.\n"]
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the label for the specified |command_id| or NULL if not found.\n"]
    pub get_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the label at the specified |index| or NULL if not found due to\n invalid range or the index being a separator.\n"]
    pub get_label_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> cef_string_userfree_t
    >,
    #[doc = "\n Sets the label for the specified |command_id|. Returns true (1) on\n success.\n"]
    pub set_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the label at the specified |index|. Returns true (1) on success.\n"]
    pub set_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            label: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the item type for the specified |command_id|.\n"]
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> cef_menu_item_type_t
    >,
    #[doc = "\n Returns the item type at the specified |index|.\n"]
    pub get_type_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> cef_menu_item_type_t
    >,
    #[doc = "\n Returns the group id for the specified |command_id| or -1 if invalid.\n"]
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the group id at the specified |index| or -1 if invalid.\n"]
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the group id for the specified |command_id|. Returns true (1) on\n success.\n"]
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the group id at the specified |index|. Returns true (1) on success.\n"]
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            group_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the submenu for the specified |command_id| or NULL if invalid.\n"]
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> *mut _cef_menu_model_t
    >,
    #[doc = "\n Returns the submenu at the specified |index| or NULL if invalid.\n"]
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> *mut _cef_menu_model_t
    >,
    #[doc = "\n Returns true (1) if the specified |command_id| is visible.\n"]
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |index| is visible.\n"]
    pub is_visible_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Change the visibility of the specified |command_id|. Returns true (1) on\n success.\n"]
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Change the visibility at the specified |index|. Returns true (1) on\n success.\n"]
    pub set_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            visible: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |command_id| is enabled.\n"]
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |index| is enabled.\n"]
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Change the enabled status of the specified |command_id|. Returns true (1)\n on success.\n"]
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Change the enabled status at the specified |index|. Returns true (1) on\n success.\n"]
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            enabled: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |command_id| is checked. Only applies to\n check and radio items.\n"]
    pub is_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |index| is checked. Only applies to\n check and radio items.\n"]
    pub is_checked_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Check the specified |command_id|. Only applies to check and radio items.\n Returns true (1) on success.\n"]
    pub set_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Check the specified |index|. Only applies to check and radio items.\n Returns true (1) on success.\n"]
    pub set_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            checked: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |command_id| has a keyboard accelerator\n assigned.\n"]
    pub has_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the specified |index| has a keyboard accelerator\n assigned.\n"]
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the keyboard accelerator for the specified |command_id|. |key_code|\n can be any virtual key or character value. Returns true (1) on success.\n"]
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the keyboard accelerator at the specified |index|. |key_code| can be\n any virtual key or character value. Returns true (1) on success.\n"]
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Remove the keyboard accelerator for the specified |command_id|. Returns\n true (1) on success.\n"]
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Remove the keyboard accelerator at the specified |index|. Returns true (1)\n on success.\n"]
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t, index: usize) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Retrieves the keyboard accelerator for the specified |command_id|. Returns\n true (1) on success.\n"]
    pub get_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Retrieves the keyboard accelerator for the specified |index|. Returns true\n (1) on success.\n"]
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: usize,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the explicit color for |command_id| and |color_type| to |color|.\n Specify a |color| value of 0 to remove the explicit color. If no explicit\n color or default color is set for |color_type| then the system color will\n be used. Returns true (1) on success.\n"]
    pub set_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the explicit color for |command_id| and |index| to |color|. Specify a\n |color| value of 0 to remove the explicit color. Specify an |index| value\n of -1 to set the default color for items that do not have an explicit\n color set. If no explicit color or default color is set for |color_type|\n then the system color will be used. Returns true (1) on success.\n"]
    pub set_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns in |color| the color that was explicitly set for |command_id| and\n |color_type|. If a color was not set then 0 will be returned in |color|.\n Returns true (1) on success.\n"]
    pub get_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns in |color| the color that was explicitly set for |command_id| and\n |color_type|. Specify an |index| value of -1 to return the default color\n in |color|. If a color was not set then 0 will be returned in |color|.\n Returns true (1) on success.\n"]
    pub get_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the font list for the specified |command_id|. If |font_list| is NULL\n the system font will be used. Returns true (1) on success. The format is\n \"<FONT_FAMILY_LIST>,[STYLES] <SIZE>\", where:\n - FONT_FAMILY_LIST is a comma-separated list of font family names,\n - STYLES is an optional space-separated list of style names (case-\n   sensitive \"Bold\" and \"Italic\" are supported), and\n - SIZE is an integer font size in pixels with the suffix \"px\".\n\n Here are examples of valid font description strings:\n - \"Arial, Helvetica, Bold Italic 14px\"\n - \"Arial, 14px\"\n"]
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the font list for the specified |index|. Specify an |index| value of\n - 1 to set the default font. If |font_list| is NULL the system font will\n - FONT_FAMILY_LIST is a comma-separated list of font family names,\n - STYLES is an optional space-separated list of style names (case-\n   sensitive \"Bold\" and \"Italic\" are supported), and\n - SIZE is an integer font size in pixels with the suffix \"px\".\n\n Here are examples of valid font description strings:\n - \"Arial, Helvetica, Bold Italic 14px\"\n - \"Arial, 14px\"\n"]
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Supports creation and modification of menus. See cef_menu_id_t for the\n command ids that have default implementations. All user-defined command ids\n should be between MENU_ID_USER_FIRST and MENU_ID_USER_LAST. The functions of\n this structure can only be accessed on the browser process the UI thread.\n"]
pub type cef_menu_model_t = _cef_menu_model_t;
extern "C" {
    #[doc = "\n Create a new MenuModel with the specified |delegate|.\n"]
    pub fn cef_menu_model_create(
        delegate: *mut _cef_menu_model_delegate_t
    ) -> *mut cef_menu_model_t;
}
#[doc = "\n Callback structure used for continuation of custom context menu display.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_context_menu_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Complete context menu display by selecting the specified |command_id| and\n |event_flags|.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        )
    >,
    #[doc = "\n Cancel context menu display.\n"]
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_context_menu_callback_t)>
}
#[doc = "\n Callback structure used for continuation of custom context menu display.\n"]
pub type cef_run_context_menu_callback_t = _cef_run_context_menu_callback_t;
#[doc = "\n Callback structure used for continuation of custom quick menu display.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_quick_menu_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Complete quick menu display by selecting the specified |command_id| and\n |event_flags|.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_quick_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        )
    >,
    #[doc = "\n Cancel quick menu display.\n"]
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_quick_menu_callback_t)>
}
#[doc = "\n Callback structure used for continuation of custom quick menu display.\n"]
pub type cef_run_quick_menu_callback_t = _cef_run_quick_menu_callback_t;
#[doc = "\n Implement this structure to handle context menu events. The functions of\n this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_context_menu_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n Called before a context menu is displayed. |params| provides information\n about the context menu state. |model| initially contains the default\n context menu. The |model| can be cleared to show no context menu or\n modified to show a custom menu. Do not keep references to |params| or\n |model| outside of this callback.\n"]
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t
        )
    >,
    #[doc = "\n Called to allow custom display of the context menu. |params| provides\n information about the context menu state. |model| contains the context\n menu model resulting from OnBeforeContextMenu. For custom display return\n true (1) and execute |callback| either synchronously or asynchronously\n with the selected command ID. For default display return false (0). Do not\n keep references to |params| or |model| outside of this callback.\n"]
    pub run_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to execute a command selected from the context menu. Return true\n (1) if the command was handled or false (0) for the default\n implementation. See cef_menu_id_t for the command ids that have default\n implementations. All user-defined command ids should be between\n MENU_ID_USER_FIRST and MENU_ID_USER_LAST. |params| will have the same\n values as what was passed to on_before_context_menu(). Do not keep a\n reference to |params| outside of this callback.\n"]
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the context menu is dismissed irregardless of whether the menu\n was canceled or a command was selected.\n"]
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >,
    #[doc = "\n Called to allow custom display of the quick menu for a windowless browser.\n |location| is the top left corner of the selected region. |size| is the\n size of the selected region. |edit_state_flags| is a combination of flags\n that represent the state of the quick menu. Return true (1) if the menu\n will be handled and execute |callback| either synchronously or\n asynchronously with the selected command ID. Return false (0) to cancel\n the menu.\n"]
    pub run_quick_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            location: *const cef_point_t,
            size: *const cef_size_t,
            edit_state_flags: cef_quick_menu_edit_state_flags_t,
            callback: *mut _cef_run_quick_menu_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to execute a command selected from the quick menu for a windowless\n browser. Return true (1) if the command was handled or false (0) for the\n default implementation. See cef_menu_id_t for command IDs that have\n default implementations.\n"]
    pub on_quick_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the quick menu for a windowless browser is dismissed\n irregardless of whether the menu was canceled or a command was selected.\n"]
    pub on_quick_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >
}
#[doc = "\n Implement this structure to handle context menu events. The functions of\n this structure will be called on the UI thread.\n"]
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[doc = "\n Provides information about the context menu state. The functions of this\n structure can only be accessed on browser process the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_context_menu_params_t {
    #[doc = "\n Base structure.\n"]
    pub base:                       cef_base_ref_counted_t,
    #[doc = "\n Returns the X coordinate of the mouse where the context menu was invoked.\n Coords are relative to the associated RenderView's origin.\n"]
    pub get_xcoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the Y coordinate of the mouse where the context menu was invoked.\n Coords are relative to the associated RenderView's origin.\n"]
    pub get_ycoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns flags representing the type of node that the context menu was\n invoked on.\n"]
    pub get_type_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_type_flags_t
    >,
    #[doc = "\n Returns the URL of the link, if any, that encloses the node that the\n context menu was invoked on.\n"]
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the link URL, if any, to be used ONLY for \"copy link address\". We\n don't validate this field in the frontend process.\n"]
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the source URL, if any, for the element that the context menu was\n invoked on. Example of elements with source URLs are img, audio, and\n video.\n"]
    pub get_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if the context menu was invoked on an image which has\n non-NULL contents.\n"]
    pub has_image_contents: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the title text or the alt text if the context menu was invoked on\n an image.\n"]
    pub get_title_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the URL of the top level page that the context menu was invoked\n on.\n"]
    pub get_page_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the URL of the subframe that the context menu was invoked on.\n"]
    pub get_frame_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the character encoding of the subframe that the context menu was\n invoked on.\n"]
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the type of context node that the context menu was invoked on.\n"]
    pub get_media_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_media_type_t
    >,
    #[doc = "\n Returns flags representing the actions supported by the media element, if\n any, that the context menu was invoked on.\n"]
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_media_state_flags_t
    >,
    #[doc = "\n Returns the text of the selection, if any, that the context menu was\n invoked on.\n"]
    pub get_selection_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the text of the misspelled word, if any, that the context menu was\n invoked on.\n"]
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if suggestions exist, false (0) otherwise. Fills in\n |suggestions| from the spell check service for the misspelled word if\n there is one.\n"]
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the context menu was invoked on an editable node.\n"]
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the context menu was invoked on an editable node where\n spell-check is enabled.\n"]
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns flags representing the actions supported by the editable node, if\n any, that the context menu was invoked on.\n"]
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t
        ) -> cef_context_menu_edit_state_flags_t
    >,
    #[doc = "\n Returns true (1) if the context menu contains items specified by the\n renderer process.\n"]
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Provides information about the context menu state. The functions of this\n structure can only be accessed on browser process the UI thread.\n"]
pub type cef_context_menu_params_t = _cef_context_menu_params_t;
#[doc = "\n Implement this structure to handle events related to browser display state.\n The functions of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_display_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                       cef_base_ref_counted_t,
    #[doc = "\n Called when a frame's address has changed.\n"]
    pub on_address_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t
        )
    >,
    #[doc = "\n Called when the page title changes.\n"]
    pub on_title_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t
        )
    >,
    #[doc = "\n Called when the page icon changes.\n"]
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t
        )
    >,
    #[doc = "\n Called when web content in the page has toggled fullscreen mode. If\n |fullscreen| is true (1) the content will automatically be sized to fill\n the browser content area. If |fullscreen| is false (0) the content will\n automatically return to its original size and position. With the Alloy\n runtime the client is responsible for triggering the fullscreen transition\n (for example, by calling cef_window_t::SetFullscreen when using Views).\n With the Chrome runtime the fullscreen transition will be triggered\n automatically. The cef_window_delegate_t::OnWindowFullscreenTransition\n function will be called during the fullscreen transition for notification\n purposes.\n"]
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when the browser is about to display a tooltip. |text| contains the\n text that will be displayed in the tooltip. To handle the display of the\n tooltip yourself return true (1). Otherwise, you can optionally modify\n |text| and then return false (0) to allow the browser to display the\n tooltip. When window rendering is disabled the application is responsible\n for drawing tooltips and the return value is ignored.\n"]
    pub on_tooltip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the browser receives a status message. |value| contains the\n text that will be displayed in the status message.\n"]
    pub on_status_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t
        )
    >,
    #[doc = "\n Called to display a console message. Return true (1) to stop the message\n from being output to the console.\n"]
    pub on_console_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when auto-resize is enabled via\n cef_browser_host_t::SetAutoResizeEnabled and the contents have auto-\n resized. |new_size| will be the desired size in view coordinates. Return\n true (1) if the resize was handled or false (0) for default handling.\n"]
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the overall page loading progress has changed. |progress|\n ranges from 0.0 to 1.0.\n"]
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64
        )
    >,
    #[doc = "\n Called when the browser's cursor has changed. If |type| is CT_CUSTOM then\n |custom_cursor_info| will be populated with the custom cursor information.\n Return true (1) if the cursor change was handled or false (0) for default\n handling.\n"]
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            cursor: *mut ::std::os::raw::c_void,
            type_: cef_cursor_type_t,
            custom_cursor_info: *const cef_cursor_info_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the browser's access to an audio and/or video source has\n changed.\n"]
    pub on_media_access_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            has_video_access: ::std::os::raw::c_int,
            has_audio_access: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Implement this structure to handle events related to browser display state.\n The functions of this structure will be called on the UI thread.\n"]
pub type cef_display_handler_t = _cef_display_handler_t;
#[doc = "\n Structure used to represent a download item.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_item_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. Do not call any other functions\n if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the download is in progress.\n"]
    pub is_in_progress: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the download is complete.\n"]
    pub is_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the download has been canceled.\n"]
    pub is_canceled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the download has been interrupted.\n"]
    pub is_interrupted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the most recent interrupt reason.\n"]
    pub get_interrupt_reason: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_download_interrupt_reason_t
    >,
    #[doc = "\n Returns a simple speed estimate in bytes/s.\n"]
    pub get_current_speed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> i64>,
    #[doc = "\n Returns the rough percent complete or -1 if the receive total size is\n unknown.\n"]
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the total number of bytes.\n"]
    pub get_total_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> i64>,
    #[doc = "\n Returns the number of received bytes.\n"]
    pub get_received_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> i64>,
    #[doc = "\n Returns the time that the download started.\n"]
    pub get_start_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_basetime_t
    >,
    #[doc = "\n Returns the time that the download ended.\n"]
    pub get_end_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_basetime_t
    >,
    #[doc = "\n Returns the full path to the downloaded or downloading file.\n"]
    pub get_full_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the unique identifier for this download.\n"]
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> u32>,
    #[doc = "\n Returns the URL.\n"]
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the original URL before any redirections.\n"]
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the suggested file name.\n"]
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the content disposition.\n"]
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the mime type.\n"]
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t
    >
}
#[doc = "\n Structure used to represent a download item.\n"]
pub type cef_download_item_t = _cef_download_item_t;
#[doc = "\n Callback structure used to asynchronously continue a download.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_before_download_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Call to continue the download. Set |download_path| to the full file path\n for the download including the file name or leave blank to use the\n suggested name and the default temp directory. Set |show_dialog| to true\n (1) if you do wish to show the default \"Save As\" dialog.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Callback structure used to asynchronously continue a download.\n"]
pub type cef_before_download_callback_t = _cef_before_download_callback_t;
#[doc = "\n Callback structure used to asynchronously cancel a download.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_item_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Call to cancel the download.\n"]
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    #[doc = "\n Call to pause the download.\n"]
    pub pause:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    #[doc = "\n Call to resume the download.\n"]
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>
}
#[doc = "\n Callback structure used to asynchronously cancel a download.\n"]
pub type cef_download_item_callback_t = _cef_download_item_callback_t;
#[doc = "\n Structure used to handle file downloads. The functions of this structure\n will called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                cef_base_ref_counted_t,
    #[doc = "\n Called before a download begins in response to a user-initiated action\n (e.g. alt + link click or link click that returns a `Content-Disposition:\n attachment` response from the server). |url| is the target download URL\n and |request_function| is the target function (GET, POST, etc). Return\n true (1) to proceed with the download or false (0) to cancel the download.\n"]
    pub can_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            url: *const cef_string_t,
            request_method: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called before a download begins. |suggested_name| is the suggested name\n for the download file. By default the download will be canceled. Execute\n |callback| either asynchronously or in this function to continue the\n download if desired. Do not keep a reference to |download_item| outside of\n this function.\n"]
    pub on_before_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t
        )
    >,
    #[doc = "\n Called when a download's status or progress information has been updated.\n This may be called multiple times before and after on_before_download().\n Execute |callback| either asynchronously or in this function to cancel the\n download if desired. Do not keep a reference to |download_item| outside of\n this function.\n"]
    pub on_download_updated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t
        )
    >
}
#[doc = "\n Structure used to handle file downloads. The functions of this structure\n will called on the browser process UI thread.\n"]
pub type cef_download_handler_t = _cef_download_handler_t;
#[doc = "\n Implement this structure to handle events related to dragging. The functions\n of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_drag_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                         cef_base_ref_counted_t,
    #[doc = "\n Called when an external drag event enters the browser window. |dragData|\n contains the drag event data and |mask| represents the type of drag\n operation. Return false (0) for default drag handling behavior or true (1)\n to cancel the drag event.\n"]
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called whenever draggable regions for the browser window change. These can\n be specified using the '-webkit-app-region: drag/no-drag' CSS-property. If\n draggable regions are never defined in a document this function will also\n never be called. If the last draggable region is removed from a document\n this function will be called with an NULL vector.\n"]
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t
        )
    >
}
#[doc = "\n Implement this structure to handle events related to dragging. The functions\n of this structure will be called on the UI thread.\n"]
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[doc = "\n Implement this structure to handle events related to find results. The\n functions of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_find_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Called to report find results returned by cef_browser_host_t::find().\n |identifer| is a unique incremental identifier for the currently active\n search, |count| is the number of matches currently identified,\n |selectionRect| is the location of where the match was found (in window\n coordinates), |activeMatchOrdinal| is the current position in the search\n results, and |finalUpdate| is true (1) if this is the last find\n notification.\n"]
    pub on_find_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Implement this structure to handle events related to find results. The\n functions of this structure will be called on the UI thread.\n"]
pub type cef_find_handler_t = _cef_find_handler_t;
#[doc = "\n Implement this structure to handle events related to focus. The functions of\n this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_focus_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:          cef_base_ref_counted_t,
    #[doc = "\n Called when the browser component is about to loose focus. For instance,\n if focus was on the last HTML element and the user pressed the TAB key.\n |next| will be true (1) if the browser is giving focus to the next\n component and false (0) if the browser is giving focus to the previous\n component.\n"]
    pub on_take_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when the browser component is requesting focus. |source| indicates\n where the focus request is originating from. Return false (0) to allow the\n focus to be set or true (1) to cancel setting the focus.\n"]
    pub on_set_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the browser component has received focus.\n"]
    pub on_got_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t)
    >
}
#[doc = "\n Implement this structure to handle events related to focus. The functions of\n this structure will be called on the UI thread.\n"]
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[doc = "\n Implement this structure to handle events related to cef_frame_t life span.\n The order of callbacks is:\n\n (1) During initial cef_browser_host_t creation and navigation of the main\n frame:\n - cef_frame_handler_t::OnFrameCreated => The initial main frame object has\n   been created. Any commands will be queued until the frame is attached.\n - cef_frame_handler_t::OnMainFrameChanged => The initial main frame object\n   has been assigned to the browser.\n - cef_life_span_handler_t::OnAfterCreated => The browser is now valid and\n   can be used.\n - cef_frame_handler_t::OnFrameAttached => The initial main frame object is\n   now connected to its peer in the renderer process. Commands can be routed.\n\n (2) During further cef_browser_host_t navigation/loading of the main frame\n     and/or sub-frames:\n - cef_frame_handler_t::OnFrameCreated => A new main frame or sub-frame\n   object has been created. Any commands will be queued until the frame is\n   attached.\n - cef_frame_handler_t::OnFrameAttached => A new main frame or sub-frame\n   object is now connected to its peer in the renderer process. Commands can\n   be routed.\n - cef_frame_handler_t::OnFrameDetached => An existing main frame or sub-\n   frame object has lost its connection to the renderer process. If multiple\n   objects are detached at the same time then notifications will be sent for\n   any sub-frame objects before the main frame object. Commands can no longer\n   be routed and will be discarded.\n - cef_frame_handler_t::OnMainFrameChanged => A new main frame object has\n   been assigned to the browser. This will only occur with cross-origin\n   navigation or re-navigation after renderer process termination (due to\n   crashes, etc).\n\n (3) During final cef_browser_host_t destruction of the main frame:\n - cef_frame_handler_t::OnFrameDetached => Any sub-frame objects have lost\n   their connection to the renderer process. Commands can no longer be routed\n   and will be discarded.\n - cef_life_span_handler_t::OnBeforeClose => The browser has been destroyed.\n - cef_frame_handler_t::OnFrameDetached => The main frame object have lost\n   its connection to the renderer process. Notifications will be sent for any\n   sub-frame objects before the main frame object. Commands can no longer be\n   routed and will be discarded.\n - cef_frame_handler_t::OnMainFrameChanged => The final main frame object has\n   been removed from the browser.\n\n Cross-origin navigation and/or loading receives special handling.\n\n When the main frame navigates to a different origin the OnMainFrameChanged\n callback (2) will be executed with the old and new main frame objects.\n\n When a new sub-frame is loaded in, or an existing sub-frame is navigated to,\n a different origin from the parent frame, a temporary sub-frame object will\n first be created in the parent's renderer process. That temporary sub-frame\n will then be discarded after the real cross-origin sub-frame is created in\n the new/target renderer process. The client will receive cross-origin\n navigation callbacks (2) for the transition from the temporary sub-frame to\n the real sub-frame. The temporary sub-frame will not receive or execute\n commands during this transitional period (any sent commands will be\n discarded).\n\n When a new popup browser is created in a different origin from the parent\n browser, a temporary main frame object for the popup will first be created\n in the parent's renderer process. That temporary main frame will then be\n discarded after the real cross-origin main frame is created in the\n new/target renderer process. The client will receive creation and initial\n navigation callbacks (1) for the temporary main frame, followed by cross-\n origin navigation callbacks (2) for the transition from the temporary main\n frame to the real main frame. The temporary main frame may receive and\n execute commands during this transitional period (any sent commands may be\n executed, but the behavior is potentially undesirable since they execute in\n the parent browser's renderer process and not the new/target renderer\n process).\n\n Callbacks will not be executed for placeholders that may be created during\n pre-commit navigation for sub-frames that do not yet exist in the renderer\n process. Placeholders will have cef_frame_t::get_identifier() == -4.\n\n The functions of this structure will be called on the UI thread unless\n otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_frame_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                  cef_base_ref_counted_t,
    #[doc = "\n Called when a new frame is created. This will be the first notification\n that references |frame|. Any commands that require transport to the\n associated renderer process (LoadRequest, SendProcessMessage, GetSource,\n etc.) will be queued until OnFrameAttached is called for |frame|.\n"]
    pub on_frame_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >,
    #[doc = "\n Called when a frame can begin routing commands to/from the associated\n renderer process. |reattached| will be true (1) if the frame was re-\n attached after exiting the BackForwardCache. Any commands that were queued\n have now been dispatched.\n"]
    pub on_frame_attached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            reattached: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when a frame loses its connection to the renderer process and will\n be destroyed. Any pending or future commands will be discarded and\n cef_frame_t::is_valid() will now return false (0) for |frame|. If called\n after cef_life_span_handler_t::on_before_close() during browser\n destruction then cef_browser_t::is_valid() will return false (0) for\n |browser|.\n"]
    pub on_frame_detached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t
        )
    >,
    #[doc = "\n Called when the main frame changes due to (a) initial browser creation,\n (b) final browser destruction, (c) cross-origin navigation or (d) re-\n navigation after renderer process termination (due to crashes, etc).\n |old_frame| will be NULL and |new_frame| will be non-NULL when a main\n frame is assigned to |browser| for the first time. |old_frame| will be\n non-NULL and |new_frame| will be NULL and  when a main frame is removed\n from |browser| for the last time. Both |old_frame| and |new_frame| will be\n non-NULL for cross-origin navigations or re-navigation after renderer\n process termination. This function will be called after on_frame_created()\n for |new_frame| and/or after on_frame_detached() for |old_frame|. If\n called after cef_life_span_handler_t::on_before_close() during browser\n destruction then cef_browser_t::is_valid() will return false (0) for\n |browser|.\n"]
    pub on_main_frame_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            old_frame: *mut _cef_frame_t,
            new_frame: *mut _cef_frame_t
        )
    >
}
#[doc = "\n Implement this structure to handle events related to cef_frame_t life span.\n The order of callbacks is:\n\n (1) During initial cef_browser_host_t creation and navigation of the main\n frame:\n - cef_frame_handler_t::OnFrameCreated => The initial main frame object has\n   been created. Any commands will be queued until the frame is attached.\n - cef_frame_handler_t::OnMainFrameChanged => The initial main frame object\n   has been assigned to the browser.\n - cef_life_span_handler_t::OnAfterCreated => The browser is now valid and\n   can be used.\n - cef_frame_handler_t::OnFrameAttached => The initial main frame object is\n   now connected to its peer in the renderer process. Commands can be routed.\n\n (2) During further cef_browser_host_t navigation/loading of the main frame\n     and/or sub-frames:\n - cef_frame_handler_t::OnFrameCreated => A new main frame or sub-frame\n   object has been created. Any commands will be queued until the frame is\n   attached.\n - cef_frame_handler_t::OnFrameAttached => A new main frame or sub-frame\n   object is now connected to its peer in the renderer process. Commands can\n   be routed.\n - cef_frame_handler_t::OnFrameDetached => An existing main frame or sub-\n   frame object has lost its connection to the renderer process. If multiple\n   objects are detached at the same time then notifications will be sent for\n   any sub-frame objects before the main frame object. Commands can no longer\n   be routed and will be discarded.\n - cef_frame_handler_t::OnMainFrameChanged => A new main frame object has\n   been assigned to the browser. This will only occur with cross-origin\n   navigation or re-navigation after renderer process termination (due to\n   crashes, etc).\n\n (3) During final cef_browser_host_t destruction of the main frame:\n - cef_frame_handler_t::OnFrameDetached => Any sub-frame objects have lost\n   their connection to the renderer process. Commands can no longer be routed\n   and will be discarded.\n - cef_life_span_handler_t::OnBeforeClose => The browser has been destroyed.\n - cef_frame_handler_t::OnFrameDetached => The main frame object have lost\n   its connection to the renderer process. Notifications will be sent for any\n   sub-frame objects before the main frame object. Commands can no longer be\n   routed and will be discarded.\n - cef_frame_handler_t::OnMainFrameChanged => The final main frame object has\n   been removed from the browser.\n\n Cross-origin navigation and/or loading receives special handling.\n\n When the main frame navigates to a different origin the OnMainFrameChanged\n callback (2) will be executed with the old and new main frame objects.\n\n When a new sub-frame is loaded in, or an existing sub-frame is navigated to,\n a different origin from the parent frame, a temporary sub-frame object will\n first be created in the parent's renderer process. That temporary sub-frame\n will then be discarded after the real cross-origin sub-frame is created in\n the new/target renderer process. The client will receive cross-origin\n navigation callbacks (2) for the transition from the temporary sub-frame to\n the real sub-frame. The temporary sub-frame will not receive or execute\n commands during this transitional period (any sent commands will be\n discarded).\n\n When a new popup browser is created in a different origin from the parent\n browser, a temporary main frame object for the popup will first be created\n in the parent's renderer process. That temporary main frame will then be\n discarded after the real cross-origin main frame is created in the\n new/target renderer process. The client will receive creation and initial\n navigation callbacks (1) for the temporary main frame, followed by cross-\n origin navigation callbacks (2) for the transition from the temporary main\n frame to the real main frame. The temporary main frame may receive and\n execute commands during this transitional period (any sent commands may be\n executed, but the behavior is potentially undesirable since they execute in\n the parent browser's renderer process and not the new/target renderer\n process).\n\n Callbacks will not be executed for placeholders that may be created during\n pre-commit navigation for sub-frames that do not yet exist in the renderer\n process. Placeholders will have cef_frame_t::get_identifier() == -4.\n\n The functions of this structure will be called on the UI thread unless\n otherwise indicated.\n"]
pub type cef_frame_handler_t = _cef_frame_handler_t;
#[doc = "\n Callback structure used for asynchronous continuation of JavaScript dialog\n requests.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_jsdialog_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Continue the JS dialog request. Set |success| to true (1) if the OK button\n was pressed. The |user_input| value should be specified for prompt\n dialogs.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t
        )
    >
}
#[doc = "\n Callback structure used for asynchronous continuation of JavaScript dialog\n requests.\n"]
pub type cef_jsdialog_callback_t = _cef_jsdialog_callback_t;
#[doc = "\n Implement this structure to handle events related to JavaScript dialogs. The\n functions of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_jsdialog_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Called to run a JavaScript dialog. If |origin_url| is non-NULL it can be\n passed to the CefFormatUrlForSecurityDisplay function to retrieve a secure\n and user-friendly display string. The |default_prompt_text| value will be\n specified for prompt dialogs only. Set |suppress_message| to true (1) and\n return false (0) to suppress the message (suppressing messages is\n preferable to immediately executing the callback as this is used to detect\n presumably malicious behavior like spamming alert messages in\n onbeforeunload). Set |suppress_message| to false (0) and return false (0)\n to use the default implementation (the default implementation will show\n one modal dialog at a time and suppress any additional dialog requests\n until the displayed dialog is dismissed). Return true (1) if the\n application will use a custom dialog or if the callback has been executed\n immediately. Custom dialogs may be either modal or modeless. If a custom\n dialog is used the application must execute |callback| once the custom\n dialog is dismissed.\n"]
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to run a dialog asking the user if they want to leave a page.\n Return false (0) to use the default dialog implementation. Return true (1)\n if the application will use a custom dialog or if the callback has been\n executed immediately. Custom dialogs may be either modal or modeless. If a\n custom dialog is used the application must execute |callback| once the\n custom dialog is dismissed.\n"]
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to cancel any pending dialogs and reset any saved dialog state.\n Will be called due to events like page navigation irregardless of whether\n any dialogs are currently pending.\n"]
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t)
    >,
    #[doc = "\n Called when the dialog is closed.\n"]
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t)
    >
}
#[doc = "\n Implement this structure to handle events related to JavaScript dialogs. The\n functions of this structure will be called on the UI thread.\n"]
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[doc = "\n Implement this structure to handle events related to keyboard input. The\n functions of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_keyboard_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:             cef_base_ref_counted_t,
    #[doc = "\n Called before a keyboard event is sent to the renderer. |event| contains\n information about the keyboard event. |os_event| is the operating system\n event message, if any. Return true (1) if the event was handled or false\n (0) otherwise. If the event will be handled in on_key_event() as a\n keyboard shortcut set |is_keyboard_shortcut| to true (1) and return false\n (0).\n"]
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const cef_key_event_t,
            os_event: *mut ::std::os::raw::c_void,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called after the renderer and JavaScript in the page has had a chance to\n handle the event. |event| contains information about the keyboard event.\n |os_event| is the operating system event message, if any. Return true (1)\n if the keyboard event was handled or false (0) otherwise.\n"]
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const cef_key_event_t,
            os_event: *mut ::std::os::raw::c_void
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle events related to keyboard input. The\n functions of this structure will be called on the UI thread.\n"]
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[doc = "\n Implement this structure to handle events related to browser life span. The\n functions of this structure will be called on the UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_life_span_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n Called on the UI thread before a new popup browser is created. The\n |browser| and |frame| values represent the source of the popup request.\n The |target_url| and |target_frame_name| values indicate where the popup\n browser should navigate and may be NULL if not specified with the request.\n The |target_disposition| value indicates where the user intended to open\n the popup (e.g. current tab, new tab, etc). The |user_gesture| value will\n be true (1) if the popup was opened via explicit user gesture (e.g.\n clicking a link) or false (0) if the popup opened automatically (e.g. via\n the DomContentLoaded event). The |popupFeatures| structure contains\n additional information about the requested popup window. To allow creation\n of the popup browser optionally modify |windowInfo|, |client|, |settings|\n and |no_javascript_access| and return false (0). To cancel creation of the\n popup browser return true (1). The |client| and |settings| values will\n default to the source browser's values. If the |no_javascript_access|\n value is set to false (0) the new browser will not be scriptable and may\n not be hosted in the same renderer process as the source browser. Any\n modifications to |windowInfo| will be ignored if the parent browser is\n wrapped in a cef_browser_view_t. Popup browser creation will be canceled\n if the parent browser is destroyed before the popup browser creation\n completes (indicated by a call to OnAfterCreated for the popup browser).\n The |extra_info| parameter provides an opportunity to specify extra\n information specific to the created popup browser that will be passed to\n cef_render_process_handler_t::on_browser_created() in the render process.\n"]
    pub on_before_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the UI thread before a new DevTools popup browser is created.\n The |browser| value represents the source of the popup request. Optionally\n modify |windowInfo|, |client|, |settings| and |extra_info| values. The\n |client|, |settings| and |extra_info| values will default to the source\n browser's values. Any modifications to |windowInfo| will be ignored if the\n parent browser is Views-hosted (wrapped in a cef_browser_view_t).\n\n The |extra_info| parameter provides an opportunity to specify extra\n information specific to the created popup browser that will be passed to\n cef_render_process_handler_t::on_browser_created() in the render process.\n The existing |extra_info| object, if any, will be read-only but may be\n replaced with a new object.\n\n Views-hosted source browsers will create Views-hosted DevTools popups\n unless |use_default_window| is set to to true (1). DevTools popups can be\n blocked by returning true (1) from cef_command_handler_t::OnChromeCommand\n for IDC_DEV_TOOLS. Only used with the Chrome runtime.\n"]
    pub on_before_dev_tools_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            use_default_window: *mut ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called after a new browser is created. It is now safe to begin performing\n actions with |browser|. cef_frame_handler_t callbacks related to initial\n main frame creation will arrive before this callback. See\n cef_frame_handler_t documentation for additional usage information.\n"]
    pub on_after_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t)
    >,
    #[doc = "\n Called when a browser has received a request to close. This may result\n directly from a call to cef_browser_host_t::*close_browser() or indirectly\n if the browser is parented to a top-level window created by CEF and the\n user attempts to close that window (by clicking the 'X', for example). The\n do_close() function will be called after the JavaScript 'onunload' event\n has been fired.\n\n An application should handle top-level owner window close notifications by\n calling cef_browser_host_t::try_close_browser() or\n cef_browser_host_t::CloseBrowser(false (0)) instead of allowing the window\n to close immediately (see the examples below). This gives CEF an\n opportunity to process the 'onbeforeunload' event and optionally cancel\n the close before do_close() is called.\n\n When windowed rendering is enabled CEF will internally create a window or\n view to host the browser. In that case returning false (0) from do_close()\n will send the standard close notification to the browser's top-level owner\n window (e.g. WM_CLOSE on Windows, performClose: on OS X, \"delete_event\" on\n Linux or cef_window_delegate_t::can_close() callback from Views). If the\n browser's host window/view has already been destroyed (via view hierarchy\n tear-down, for example) then do_close() will not be called for that\n browser since is no longer possible to cancel the close.\n\n When windowed rendering is disabled returning false (0) from do_close()\n will cause the browser object to be destroyed immediately.\n\n If the browser's top-level owner window requires a non-standard close\n notification then send that notification from do_close() and return true\n (1).\n\n The cef_life_span_handler_t::on_before_close() function will be called\n after do_close() (if do_close() is called) and immediately before the\n browser object is destroyed. The application should only exit after\n on_before_close() has been called for all existing browsers.\n\n The below examples describe what should happen during window close when\n the browser is parented to an application-provided top-level window.\n\n Example 1: Using cef_browser_host_t::try_close_browser(). This is\n recommended for clients using standard close handling and windows created\n on the browser process UI thread. 1.  User clicks the window close button\n which sends a close notification\n     to the application's top-level window.\n 2.  Application's top-level window receives the close notification and\n     calls TryCloseBrowser() (which internally calls CloseBrowser(false)).\n     TryCloseBrowser() returns false so the client cancels the window\n     close.\n 3.  JavaScript 'onbeforeunload' handler executes and shows the close\n     confirmation dialog (which can be overridden via\n     CefJSDialogHandler::OnBeforeUnloadDialog()).\n 4.  User approves the close. 5.  JavaScript 'onunload' handler executes.\n 6.  CEF sends a close notification to the application's top-level window\n     (because DoClose() returned false by default).\n 7.  Application's top-level window receives the close notification and\n     calls TryCloseBrowser(). TryCloseBrowser() returns true so the client\n     allows the window close.\n 8.  Application's top-level window is destroyed. 9.  Application's\n on_before_close() handler is called and the browser object\n     is destroyed.\n 10. Application exits by calling cef_quit_message_loop() if no other\n browsers\n     exist.\n\n Example 2: Using cef_browser_host_t::CloseBrowser(false (0)) and\n implementing the do_close() callback. This is recommended for clients\n using non-standard close handling or windows that were not created on the\n browser process UI thread. 1.  User clicks the window close button which\n sends a close notification\n     to the application's top-level window.\n 2.  Application's top-level window receives the close notification and:\n     A. Calls CefBrowserHost::CloseBrowser(false).\n     B. Cancels the window close.\n 3.  JavaScript 'onbeforeunload' handler executes and shows the close\n     confirmation dialog (which can be overridden via\n     CefJSDialogHandler::OnBeforeUnloadDialog()).\n 4.  User approves the close. 5.  JavaScript 'onunload' handler executes.\n 6.  Application's do_close() handler is called. Application will:\n     A. Set a flag to indicate that the next close attempt will be allowed.\n     B. Return false.\n 7.  CEF sends an close notification to the application's top-level window.\n 8.  Application's top-level window receives the close notification and\n     allows the window to close based on the flag from #6B.\n 9.  Application's top-level window is destroyed. 10. Application's\n on_before_close() handler is called and the browser object\n     is destroyed.\n 11. Application exits by calling cef_quit_message_loop() if no other\n browsers\n     exist.\n"]
    pub do_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called just before a browser is destroyed. Release all references to the\n browser object and do not attempt to execute any functions on the browser\n object (other than IsValid, GetIdentifier or IsSame) after this callback\n returns. cef_frame_handler_t callbacks related to final main frame\n destruction will arrive after this callback and cef_browser_t::IsValid\n will return false (0) at that time. Any in-progress network requests\n associated with |browser| will be aborted when the browser is destroyed,\n and cef_resource_request_handler_t callbacks related to those requests may\n still arrive on the IO thread after this callback. See cef_frame_handler_t\n and do_close() documentation for additional usage information.\n"]
    pub on_before_close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t)
    >
}
#[doc = "\n Implement this structure to handle events related to browser life span. The\n functions of this structure will be called on the UI thread unless otherwise\n indicated.\n"]
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
#[doc = "\n Implement this structure to handle events related to browser load status.\n The functions of this structure will be called on the browser process UI\n thread or render process main thread (TID_RENDERER).\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_load_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Called when the loading state has changed. This callback will be executed\n twice -- once when loading is initiated either programmatically or by user\n action, and once when loading is terminated due to completion,\n cancellation of failure. It will be called before any calls to OnLoadStart\n and after all calls to OnLoadError and/or OnLoadEnd.\n"]
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called after a navigation has been committed and before the browser begins\n loading contents in the frame. The |frame| value will never be NULL --\n call the is_main() function to check if this frame is the main frame.\n |transition_type| provides information about the source of the navigation\n and an accurate value is only available in the browser process. Multiple\n frames may be loading at the same time. Sub-frames may start or continue\n loading after the main frame load has ended. This function will not be\n called for same page navigations (fragments, history state, etc.) or for\n navigations that fail or are canceled before commit. For notification of\n overall browser load status use OnLoadingStateChange instead.\n"]
    pub on_load_start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t
        )
    >,
    #[doc = "\n Called when the browser is done loading a frame. The |frame| value will\n never be NULL -- call the is_main() function to check if this frame is the\n main frame. Multiple frames may be loading at the same time. Sub-frames\n may start or continue loading after the main frame load has ended. This\n function will not be called for same page navigations (fragments, history\n state, etc.) or for navigations that fail or are canceled before commit.\n For notification of overall browser load status use OnLoadingStateChange\n instead.\n"]
    pub on_load_end: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when a navigation fails or is canceled. This function may be called\n by itself if before commit or in combination with OnLoadStart/OnLoadEnd if\n after commit. |errorCode| is the error code number, |errorText| is the\n error text and |failedUrl| is the URL that failed to load. See\n net\\base\\net_error_list.h for complete descriptions of the error codes.\n"]
    pub on_load_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t
        )
    >
}
#[doc = "\n Implement this structure to handle events related to browser load status.\n The functions of this structure will be called on the browser process UI\n thread or render process main thread (TID_RENDERER).\n"]
pub type cef_load_handler_t = _cef_load_handler_t;
#[doc = "\n Callback structure used for asynchronous continuation of media access\n permission requests.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_access_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Call to allow or deny media access. If this callback was initiated in\n response to a getUserMedia (indicated by\n CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE and/or\n CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE being set) then\n |allowed_permissions| must match |required_permissions| passed to\n OnRequestMediaAccessPermission.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_access_callback_t, allowed_permissions: u32)
    >,
    #[doc = "\n Cancel the media access request.\n"]
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_access_callback_t)>
}
#[doc = "\n Callback structure used for asynchronous continuation of media access\n permission requests.\n"]
pub type cef_media_access_callback_t = _cef_media_access_callback_t;
#[doc = "\n Callback structure used for asynchronous continuation of permission prompts.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_permission_prompt_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Complete the permissions request with the specified |result|.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_prompt_callback_t,
            result: cef_permission_request_result_t
        )
    >
}
#[doc = "\n Callback structure used for asynchronous continuation of permission prompts.\n"]
pub type cef_permission_prompt_callback_t = _cef_permission_prompt_callback_t;
#[doc = "\n Implement this structure to handle events related to permission requests.\n The functions of this structure will be called on the browser process UI\n thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_permission_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                               cef_base_ref_counted_t,
    #[doc = "\n Called when a page requests permission to access media.\n |requesting_origin| is the URL origin requesting permission.\n |requested_permissions| is a combination of values from\n cef_media_access_permission_types_t that represent the requested\n permissions. Return true (1) and call cef_media_access_callback_t\n functions either in this function or at a later time to continue or cancel\n the request. Return false (0) to proceed with default handling. With the\n Chrome runtime, default handling will display the permission request UI.\n With the Alloy runtime, default handling will deny the request. This\n function will not be called if the \"--enable-media-stream\" command-line\n switch is used to grant all permissions.\n"]
    pub on_request_media_access_permission: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            requesting_origin: *const cef_string_t,
            requested_permissions: u32,
            callback: *mut _cef_media_access_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when a page should show a permission prompt. |prompt_id| uniquely\n identifies the prompt. |requesting_origin| is the URL origin requesting\n permission. |requested_permissions| is a combination of values from\n cef_permission_request_types_t that represent the requested permissions.\n Return true (1) and call cef_permission_prompt_callback_t::Continue either\n in this function or at a later time to continue or cancel the request.\n Return false (0) to proceed with default handling. With the Chrome\n runtime, default handling will display the permission prompt UI. With the\n Alloy runtime, default handling is CEF_PERMISSION_RESULT_IGNORE.\n"]
    pub on_show_permission_prompt: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_handler_t,
            browser: *mut _cef_browser_t,
            prompt_id: u64,
            requesting_origin: *const cef_string_t,
            requested_permissions: u32,
            callback: *mut _cef_permission_prompt_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when a permission prompt handled via OnShowPermissionPrompt is\n dismissed. |prompt_id| will match the value that was passed to\n OnShowPermissionPrompt. |result| will be the value passed to\n cef_permission_prompt_callback_t::Continue or CEF_PERMISSION_RESULT_IGNORE\n if the dialog was dismissed for other reasons such as navigation, browser\n closure, etc. This function will not be called if OnShowPermissionPrompt\n returned false (0) for |prompt_id|.\n"]
    pub on_dismiss_permission_prompt: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_permission_handler_t,
            browser: *mut _cef_browser_t,
            prompt_id: u64,
            result: cef_permission_request_result_t
        )
    >
}
#[doc = "\n Implement this structure to handle events related to permission requests.\n The functions of this structure will be called on the browser process UI\n thread.\n"]
pub type cef_permission_handler_t = _cef_permission_handler_t;
#[doc = "\n Structure representing print settings.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_settings_t {
    #[doc = "\n Base structure.\n"]
    pub base:                       cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. Do not call any other functions\n if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the values of this object are read-only. Some APIs may\n expose read-only objects.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the page orientation.\n"]
    pub set_orientation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, landscape: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if the orientation is landscape.\n"]
    pub is_landscape: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the printer printable area in device units. Some platforms already\n provide flipped area. Set |landscape_needs_flip| to false (0) on those\n platforms to avoid double flipping.\n"]
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Set the device name.\n"]
    pub set_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t)
    >,
    #[doc = "\n Get the device name.\n"]
    pub get_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the DPI (dots per inch).\n"]
    pub set_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int)
    >,
    #[doc = "\n Get the DPI (dots per inch).\n"]
    pub get_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the page ranges.\n"]
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t
        )
    >,
    #[doc = "\n Returns the number of page ranges that currently exist.\n"]
    pub get_page_ranges_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> usize>,
    #[doc = "\n Retrieve the page ranges.\n"]
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t
        )
    >,
    #[doc = "\n Set whether only the selection will be printed.\n"]
    pub set_selection_only: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Returns true (1) if only the selection will be printed.\n"]
    pub is_selection_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set whether pages will be collated.\n"]
    pub set_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, collate: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if pages will be collated.\n"]
    pub will_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the color model.\n"]
    pub set_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, model: cef_color_model_t)
    >,
    #[doc = "\n Get the color model.\n"]
    pub get_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t
    >,
    #[doc = "\n Set the number of copies.\n"]
    pub set_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, copies: ::std::os::raw::c_int)
    >,
    #[doc = "\n Get the number of copies.\n"]
    pub get_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the duplex mode.\n"]
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, mode: cef_duplex_mode_t)
    >,
    #[doc = "\n Get the duplex mode.\n"]
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t
    >
}
#[doc = "\n Structure representing print settings.\n"]
pub type cef_print_settings_t = _cef_print_settings_t;
extern "C" {
    #[doc = "\n Create a new cef_print_settings_t object.\n"]
    pub fn cef_print_settings_create() -> *mut cef_print_settings_t;
}
#[doc = "\n Callback structure for asynchronous continuation of print dialog requests.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_dialog_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Continue printing with the specified |settings|.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t
        )
    >,
    #[doc = "\n Cancel the printing.\n"]
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_dialog_callback_t)>
}
#[doc = "\n Callback structure for asynchronous continuation of print dialog requests.\n"]
pub type cef_print_dialog_callback_t = _cef_print_dialog_callback_t;
#[doc = "\n Callback structure for asynchronous continuation of print job requests.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_job_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Indicate completion of the print job.\n"]
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_job_callback_t)>
}
#[doc = "\n Callback structure for asynchronous continuation of print job requests.\n"]
pub type cef_print_job_callback_t = _cef_print_job_callback_t;
#[doc = "\n Implement this structure to handle printing on Linux. Each browser will have\n only one print job in progress at a time. The functions of this structure\n will be called on the browser process UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:               cef_base_ref_counted_t,
    #[doc = "\n Called when printing has started for the specified |browser|. This\n function will be called before the other OnPrint*() functions and\n irrespective of how printing was initiated (e.g.\n cef_browser_host_t::print(), JavaScript window.print() or PDF extension\n print button).\n"]
    pub on_print_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t)
    >,
    #[doc = "\n Synchronize |settings| with client state. If |get_defaults| is true (1)\n then populate |settings| with the default print settings. Do not keep a\n reference to |settings| outside of this callback.\n"]
    pub on_print_settings: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Show the print dialog. Execute |callback| once the dialog is dismissed.\n Return true (1) if the dialog will be displayed or false (0) to cancel the\n printing immediately.\n"]
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Send the print job to the printer. Execute |callback| once the job is\n completed. Return true (1) if the job will proceed or false (0) to cancel\n the job immediately.\n"]
    pub on_print_job: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Reset client state related to printing.\n"]
    pub on_print_reset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t)
    >,
    #[doc = "\n Return the PDF paper size in device units. Used in combination with\n cef_browser_host_t::print_to_pdf().\n"]
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            device_units_per_inch: ::std::os::raw::c_int
        ) -> cef_size_t
    >
}
#[doc = "\n Implement this structure to handle printing on Linux. Each browser will have\n only one print job in progress at a time. The functions of this structure\n will be called on the browser process UI thread.\n"]
pub type cef_print_handler_t = _cef_print_handler_t;
#[doc = "\n Implement this structure to receive accessibility notification when\n accessibility events have been registered. The functions of this structure\n will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_accessibility_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                             cef_base_ref_counted_t,
    #[doc = "\n Called after renderer process sends accessibility tree changes to the\n browser process.\n"]
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t)
    >,
    #[doc = "\n Called after renderer process sends accessibility location changes to the\n browser process.\n"]
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t)
    >
}
#[doc = "\n Implement this structure to receive accessibility notification when\n accessibility events have been registered. The functions of this structure\n will be called on the UI thread.\n"]
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[doc = "\n Implement this structure to handle events when window rendering is disabled.\n The functions of this structure will be called on the UI thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_render_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                             cef_base_ref_counted_t,
    #[doc = "\n Return the handler for accessibility notifications. If no handler is\n provided the default implementation will be used.\n"]
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t
        ) -> *mut _cef_accessibility_handler_t
    >,
    #[doc = "\n Called to retrieve the root window rectangle in screen DIP coordinates.\n Return true (1) if the rectangle was provided. If this function returns\n false (0) the rectangle from GetViewRect will be used.\n"]
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to retrieve the view rectangle in screen DIP coordinates. This\n function must always provide a non-NULL rectangle.\n"]
    pub get_view_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t
        )
    >,
    #[doc = "\n Called to retrieve the translation from view DIP coordinates to screen\n coordinates. Windows/Linux should provide screen device (pixel)\n coordinates and MacOS should provide screen DIP coordinates. Return true\n (1) if the requested coordinates were provided.\n"]
    pub get_screen_point: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to allow the client to fill in the CefScreenInfo object with\n appropriate values. Return true (1) if the |screen_info| structure has\n been modified.\n\n If the screen info rectangle is left NULL the rectangle from GetViewRect\n will be used. If the rectangle is still NULL or invalid popups may not be\n drawn correctly.\n"]
    pub get_screen_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut cef_screen_info_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the browser wants to show or hide the popup widget. The popup\n should be shown if |show| is true (1) and hidden if |show| is false (0).\n"]
    pub on_popup_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when the browser wants to move or resize the popup widget. |rect|\n contains the new location and size in view coordinates.\n"]
    pub on_popup_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t
        )
    >,
    #[doc = "\n Called when an element should be painted. Pixel values passed to this\n function are scaled relative to view coordinates based on the value of\n CefScreenInfo.device_scale_factor returned from GetScreenInfo. |type|\n indicates whether the element is the view or the popup widget. |buffer|\n contains the pixel data for the whole image. |dirtyRects| contains the set\n of rectangles in pixel coordinates that need to be repainted. |buffer|\n will be |width|*|height|*4 bytes in size and represents a BGRA image with\n an upper-left origin. This function is only called when\n cef_window_tInfo::shared_texture_enabled is set to false (0).\n"]
    pub on_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when an element has been rendered to the shared texture handle.\n |type| indicates whether the element is the view or the popup widget.\n |dirtyRects| contains the set of rectangles in pixel coordinates that need\n to be repainted. |shared_handle| is the handle for a D3D11 Texture2D that\n can be accessed via ID3D11Device using the OpenSharedResource function.\n This function is only called when cef_window_tInfo::shared_texture_enabled\n is set to true (1), and is currently only supported on Windows.\n"]
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void
        )
    >,
    #[doc = "\n Called to retrieve the size of the touch handle for the specified\n |orientation|.\n"]
    pub get_touch_handle_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            orientation: cef_horizontal_alignment_t,
            size: *mut cef_size_t
        )
    >,
    #[doc = "\n Called when touch handle state is updated. The client is responsible for\n rendering the touch handles.\n"]
    pub on_touch_handle_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            state: *const cef_touch_handle_state_t
        )
    >,
    #[doc = "\n Called when the user starts dragging content in the web view. Contextual\n information about the dragged content is supplied by |drag_data|. (|x|,\n |y|) is the drag start location in screen coordinates. OS APIs that run a\n system message loop may be used within the StartDragging call.\n\n Return false (0) to abort the drag operation. Don't call any of\n cef_browser_host_t::DragSource*Ended* functions after returning false (0).\n\n Return true (1) to handle the drag operation. Call\n cef_browser_host_t::DragSourceEndedAt and DragSourceSystemDragEnded either\n synchronously or asynchronously to inform the web view that the drag\n operation has ended.\n"]
    pub start_dragging: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the web view wants to update the mouse cursor during a drag &\n drop operation. |operation| describes the allowed operation (none, move,\n copy, link).\n"]
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t
        )
    >,
    #[doc = "\n Called when the scroll offset has changed.\n"]
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64
        )
    >,
    #[doc = "\n Called when the IME composition range has changed. |selected_range| is the\n range of characters that have been selected. |character_bounds| is the\n bounds of each character in view coordinates.\n"]
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t
        )
    >,
    #[doc = "\n Called when text selection has changed for the specified |browser|.\n |selected_text| is the currently selected text and |selected_range| is the\n character range.\n"]
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t
        )
    >,
    #[doc = "\n Called when an on-screen keyboard should be shown or hidden for the\n specified |browser|. |input_mode| specifies what kind of keyboard should\n be opened. If |input_mode| is CEF_TEXT_INPUT_MODE_NONE, any existing\n keyboard for this browser should be hidden.\n"]
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t
        )
    >
}
#[doc = "\n Implement this structure to handle events when window rendering is disabled.\n The functions of this structure will be called on the UI thread.\n"]
pub type cef_render_handler_t = _cef_render_handler_t;
#[doc = "\n Callback structure used for asynchronous continuation of authentication\n requests.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_auth_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Continue the authentication request.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t
        )
    >,
    #[doc = "\n Cancel the authentication request.\n"]
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>
}
#[doc = "\n Callback structure used for asynchronous continuation of authentication\n requests.\n"]
pub type cef_auth_callback_t = _cef_auth_callback_t;
#[doc = "\n Callback for asynchronous continuation of cef_resource_handler_t::skip().\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_skip_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Callback for asynchronous continuation of skip(). If |bytes_skipped| > 0\n then either skip() will be called again until the requested number of\n bytes have been skipped or the request will proceed. If |bytes_skipped| <=\n 0 the request will fail with ERR_REQUEST_RANGE_NOT_SATISFIABLE.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: i64)
    >
}
#[doc = "\n Callback for asynchronous continuation of cef_resource_handler_t::skip().\n"]
pub type cef_resource_skip_callback_t = _cef_resource_skip_callback_t;
#[doc = "\n Callback for asynchronous continuation of cef_resource_handler_t::read().\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_read_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Callback for asynchronous continuation of read(). If |bytes_read| == 0 the\n response will be considered complete. If |bytes_read| > 0 then read() will\n be called again until the request is complete (based on either the result\n or the expected content length). If |bytes_read| < 0 then the request will\n fail and the |bytes_read| value will be treated as the error code.\n"]
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Callback for asynchronous continuation of cef_resource_handler_t::read().\n"]
pub type cef_resource_read_callback_t = _cef_resource_read_callback_t;
#[doc = "\n Structure used to implement a custom request handler structure. The\n functions of this structure will be called on the IO thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_base_ref_counted_t,
    #[doc = "\n Open the response stream. To handle the request immediately set\n |handle_request| to true (1) and return true (1). To decide at a later\n time set |handle_request| to false (0), return true (1), and execute\n |callback| to continue or cancel the request. To cancel the request\n immediately set |handle_request| to true (1) and return false (0). This\n function will be called in sequence but not from a dedicated thread. For\n backwards compatibility set |handle_request| to false (0) and return false\n (0) and the ProcessRequest function will be called.\n"]
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Begin processing the request. To handle the request return true (1) and\n call cef_callback_t::cont() once the response header information is\n available (cef_callback_t::cont() can also be called from inside this\n function if header information is available immediately). To cancel the\n request return false (0).\n\n WARNING: This function is deprecated. Use Open instead.\n"]
    pub process_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Retrieve response header information. If the response length is not known\n set |response_length| to -1 and read_response() will be called until it\n returns false (0). If the response length is known set |response_length|\n to a positive value and read_response() will be called until it returns\n false (0) or the specified number of bytes have been read. Use the\n |response| object to set the mime type, http status code and other\n optional header values. To redirect the request to a new URL set\n |redirectUrl| to the new URL. |redirectUrl| can be either a relative or\n fully qualified URL. It is also possible to set |response| to a redirect\n http status code and pass the new URL via a Location header. Likewise with\n |redirectUrl| it is valid to set a relative or fully qualified URL as the\n Location header value. If an error occured while setting up the request\n you can call set_error() on |response| to indicate the error condition.\n"]
    pub get_response_headers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut i64,
            redirectUrl: *mut cef_string_t
        )
    >,
    #[doc = "\n Skip response data when requested by a Range header. Skip over and discard\n |bytes_to_skip| bytes of response data. If data is available immediately\n set |bytes_skipped| to the number of bytes skipped and return true (1). To\n read the data at a later time set |bytes_skipped| to 0, return true (1)\n and execute |callback| when the data is available. To indicate failure set\n |bytes_skipped| to < 0 (e.g. -2 for ERR_FAILED) and return false (0). This\n function will be called in sequence but not from a dedicated thread.\n"]
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: i64,
            bytes_skipped: *mut i64,
            callback: *mut _cef_resource_skip_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Read response data. If data is available immediately copy up to\n |bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of\n bytes copied, and return true (1). To read the data at a later time keep a\n pointer to |data_out|, set |bytes_read| to 0, return true (1) and execute\n |callback| when the data is available (|data_out| will remain valid until\n the callback is executed). To indicate response completion set\n |bytes_read| to 0 and return false (0). To indicate failure set\n |bytes_read| to < 0 (e.g. -2 for ERR_FAILED) and return false (0). This\n function will be called in sequence but not from a dedicated thread. For\n backwards compatibility set |bytes_read| to -1 and return false (0) and\n the ReadResponse function will be called.\n"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Read response data. If data is available immediately copy up to\n |bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of\n bytes copied, and return true (1). To read the data at a later time set\n |bytes_read| to 0, return true (1) and call cef_callback_t::cont() when\n the data is available. To indicate response completion return false (0).\n\n WARNING: This function is deprecated. Use Skip and Read instead.\n"]
    pub read_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Request processing has been canceled.\n"]
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_resource_handler_t)>
}
#[doc = "\n Structure used to implement a custom request handler structure. The\n functions of this structure will be called on the IO thread unless otherwise\n indicated.\n"]
pub type cef_resource_handler_t = _cef_resource_handler_t;
#[doc = "\n Implement this structure to filter resource response content. The functions\n of this structure will be called on the browser process IO thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_response_filter_t {
    #[doc = "\n Base structure.\n"]
    pub base:        cef_base_ref_counted_t,
    #[doc = "\n Initialize the response filter. Will only be called a single time. The\n filter will not be installed if this function returns false (0).\n"]
    pub init_filter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to filter a chunk of data. Expected usage is as follows:\n\n  1. Read input data from |data_in| and set |data_in_read| to the number of\n     bytes that were read up to a maximum of |data_in_size|. |data_in| will\n     be NULL if |data_in_size| is zero.\n  2. Write filtered output data to |data_out| and set |data_out_written| to\n     the number of bytes that were written up to a maximum of\n     |data_out_size|. If no output data was written then all data must be\n     read from |data_in| (user must set |data_in_read| = |data_in_size|).\n  3. Return RESPONSE_FILTER_DONE if all output data was written or\n     RESPONSE_FILTER_NEED_MORE_DATA if output data is still pending.\n\n This function will be called repeatedly until the input buffer has been\n fully read (user sets |data_in_read| = |data_in_size|) and there is no\n more input data to filter (the resource response is complete). This\n function may then be called an additional time with an NULL input buffer\n if the user filled the output buffer (set |data_out_written| =\n |data_out_size|) and returned RESPONSE_FILTER_NEED_MORE_DATA to indicate\n that output data is still pending.\n\n Calls to this function will stop when one of the following conditions is\n met:\n\n  1. There is no more input data to filter (the resource response is\n     complete) and the user sets |data_out_written| = 0 or returns\n     RESPONSE_FILTER_DONE to indicate that all data has been written, or;\n  2. The user returns RESPONSE_FILTER_ERROR to indicate an error.\n\n Do not keep a reference to the buffers passed to this function.\n"]
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize
        ) -> cef_response_filter_status_t
    >
}
#[doc = "\n Implement this structure to filter resource response content. The functions\n of this structure will be called on the browser process IO thread.\n"]
pub type cef_response_filter_t = _cef_response_filter_t;
#[doc = "\n Implement this structure to handle events related to browser requests. The\n functions of this structure will be called on the IO thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_request_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                         cef_base_ref_counted_t,
    #[doc = "\n Called on the IO thread before a resource request is loaded. The |browser|\n and |frame| values represent the source of the request, and may be NULL\n for requests originating from service workers or cef_urlrequest_t. To\n optionally filter cookies for the request return a\n cef_cookie_access_filter_t object. The |request| object cannot not be\n modified in this callback.\n"]
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t
        ) -> *mut _cef_cookie_access_filter_t
    >,
    #[doc = "\n Called on the IO thread before a resource request is loaded. The |browser|\n and |frame| values represent the source of the request, and may be NULL\n for requests originating from service workers or cef_urlrequest_t. To\n redirect or change the resource load optionally modify |request|.\n Modification of the request URL will be treated as a redirect. Return\n RV_CONTINUE to continue the request immediately. Return RV_CONTINUE_ASYNC\n and call cef_callback_t functions at a later time to continue or cancel\n the request asynchronously. Return RV_CANCEL to cancel the request\n immediately.\n"]
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t
        ) -> cef_return_value_t
    >,
    #[doc = "\n Called on the IO thread before a resource is loaded. The |browser| and\n |frame| values represent the source of the request, and may be NULL for\n requests originating from service workers or cef_urlrequest_t. To allow\n the resource to load using the default network loader return NULL. To\n specify a handler for the resource return a cef_resource_handler_t object.\n The |request| object cannot not be modified in this callback.\n"]
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t
        ) -> *mut _cef_resource_handler_t
    >,
    #[doc = "\n Called on the IO thread when a resource load is redirected. The |browser|\n and |frame| values represent the source of the request, and may be NULL\n for requests originating from service workers or cef_urlrequest_t. The\n |request| parameter will contain the old URL and other request-related\n information. The |response| parameter will contain the response that\n resulted in the redirect. The |new_url| parameter will contain the new URL\n and can be changed if desired. The |request| and |response| objects cannot\n be modified in this callback.\n"]
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t
        )
    >,
    #[doc = "\n Called on the IO thread when a resource response is received. The\n |browser| and |frame| values represent the source of the request, and may\n be NULL for requests originating from service workers or cef_urlrequest_t.\n To allow the resource load to proceed without modification return false\n (0). To redirect or retry the resource load optionally modify |request|\n and return true (1). Modification of the request URL will be treated as a\n redirect. Requests handled using the default network loader cannot be\n redirected in this callback. The |response| object cannot be modified in\n this callback.\n\n WARNING: Redirecting using this function is deprecated. Use\n OnBeforeResourceLoad or GetResourceHandler to perform redirects.\n"]
    pub on_resource_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the IO thread to optionally filter resource response content.\n The |browser| and |frame| values represent the source of the request, and\n may be NULL for requests originating from service workers or\n cef_urlrequest_t. |request| and |response| represent the request and\n response respectively and cannot be modified in this callback.\n"]
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t
        ) -> *mut _cef_response_filter_t
    >,
    #[doc = "\n Called on the IO thread when a resource load has completed. The |browser|\n and |frame| values represent the source of the request, and may be NULL\n for requests originating from service workers or cef_urlrequest_t.\n |request| and |response| represent the request and response respectively\n and cannot be modified in this callback. |status| indicates the load\n completion status. |received_content_length| is the number of response\n bytes actually read. This function will be called for all requests,\n including requests that are aborted due to CEF shutdown or destruction of\n the associated browser. In cases where the associated browser is destroyed\n this callback may arrive after the cef_life_span_handler_t::OnBeforeClose\n callback for that browser. The cef_frame_t::IsValid function can be used\n to test for this situation, and care should be taken not to call |browser|\n or |frame| functions that modify state (like LoadURL, SendProcessMessage,\n etc.) if the frame is invalid.\n"]
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t,
            received_content_length: i64
        )
    >,
    #[doc = "\n Called on the IO thread to handle requests for URLs with an unknown\n protocol component. The |browser| and |frame| values represent the source\n of the request, and may be NULL for requests originating from service\n workers or cef_urlrequest_t. |request| cannot be modified in this\n callback. Set |allow_os_execution| to true (1) to attempt execution via\n the registered OS protocol handler, if any. SECURITY WARNING: YOU SHOULD\n USE THIS METHOD TO ENFORCE RESTRICTIONS BASED ON SCHEME, HOST OR OTHER URL\n ANALYSIS BEFORE ALLOWING OS EXECUTION.\n"]
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int
        )
    >
}
#[doc = "\n Implement this structure to handle events related to browser requests. The\n functions of this structure will be called on the IO thread unless otherwise\n indicated.\n"]
pub type cef_resource_request_handler_t = _cef_resource_request_handler_t;
#[doc = "\n Implement this structure to filter cookies that may be sent or received from\n resource requests. The functions of this structure will be called on the IO\n thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_access_filter_t {
    #[doc = "\n Base structure.\n"]
    pub base:            cef_base_ref_counted_t,
    #[doc = "\n Called on the IO thread before a resource request is sent. The |browser|\n and |frame| values represent the source of the request, and may be NULL\n for requests originating from service workers or cef_urlrequest_t.\n |request| cannot be modified in this callback. Return true (1) if the\n specified cookie can be sent with the request or false (0) otherwise.\n"]
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the IO thread after a resource response is received. The\n |browser| and |frame| values represent the source of the request, and may\n be NULL for requests originating from service workers or cef_urlrequest_t.\n |request| cannot be modified in this callback. Return true (1) if the\n specified cookie returned with the response can be saved or false (0)\n otherwise.\n"]
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to filter cookies that may be sent or received from\n resource requests. The functions of this structure will be called on the IO\n thread unless otherwise indicated.\n"]
pub type cef_cookie_access_filter_t = _cef_cookie_access_filter_t;
#[doc = "\n Structure representing SSL information.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_sslinfo_t {
    #[doc = "\n Base structure.\n"]
    pub base:                cef_base_ref_counted_t,
    #[doc = "\n Returns a bitmask containing any and all problems verifying the server\n certificate.\n"]
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t
    >,
    #[doc = "\n Returns the X.509 certificate.\n"]
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t
    >
}
#[doc = "\n Structure representing SSL information.\n"]
pub type cef_sslinfo_t = _cef_sslinfo_t;
extern "C" {
    #[doc = "\n Returns true (1) if the certificate status represents an error.\n"]
    pub fn cef_is_cert_status_error(status: cef_cert_status_t) -> ::std::os::raw::c_int;
}
#[doc = "\n Callback structure used to select a client certificate for authentication.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_select_client_certificate_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Chooses the specified certificate for client certificate authentication.\n NULL value means that no client certificate should be used.\n"]
    pub select: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t
        )
    >
}
#[doc = "\n Callback structure used to select a client certificate for authentication.\n"]
pub type cef_select_client_certificate_callback_t = _cef_select_client_certificate_callback_t;
#[doc = "\n Implement this structure to handle events related to browser requests. The\n functions of this structure will be called on the thread indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                                cef_base_ref_counted_t,
    #[doc = "\n Called on the UI thread before browser navigation. Return true (1) to\n cancel the navigation or false (0) to allow the navigation to proceed. The\n |request| object cannot be modified in this callback.\n cef_load_handler_t::OnLoadingStateChange will be called twice in all\n cases. If the navigation is allowed cef_load_handler_t::OnLoadStart and\n cef_load_handler_t::OnLoadEnd will be called. If the navigation is\n canceled cef_load_handler_t::OnLoadError will be called with an\n |errorCode| value of ERR_ABORTED. The |user_gesture| value will be true\n (1) if the browser navigated via explicit user gesture (e.g. clicking a\n link) or false (0) if it navigated automatically (e.g. via the\n DomContentLoaded event).\n"]
    pub on_before_browse: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the UI thread before OnBeforeBrowse in certain limited cases\n where navigating a new or different browser might be desirable. This\n includes user-initiated navigation that might open in a special way (e.g.\n links clicked via middle-click or ctrl + left-click) and certain types of\n cross-origin navigation initiated from the renderer process (e.g.\n navigating the top-level frame to/from a file URL). The |browser| and\n |frame| values represent the source of the navigation. The\n |target_disposition| value indicates where the user intended to navigate\n the browser based on standard Chromium behaviors (e.g. current tab, new\n tab, etc). The |user_gesture| value will be true (1) if the browser\n navigated via explicit user gesture (e.g. clicking a link) or false (0) if\n it navigated automatically (e.g. via the DomContentLoaded event). Return\n true (1) to cancel the navigation or false (0) to allow the navigation to\n proceed in the source browser's top-level frame.\n"]
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the browser process IO thread before a resource request is\n initiated. The |browser| and |frame| values represent the source of the\n request. |request| represents the request contents and cannot be modified\n in this callback. |is_navigation| will be true (1) if the resource request\n is a navigation. |is_download| will be true (1) if the resource request is\n a download. |request_initiator| is the origin (scheme + domain) of the\n page that initiated the request. Set |disable_default_handling| to true\n (1) to disable default handling of the request, in which case it will need\n to be handled via cef_resource_request_handler_t::GetResourceHandler or it\n will be canceled. To allow the resource load to proceed with default\n handling return NULL. To specify a handler for the resource return a\n cef_resource_request_handler_t object. If this callback returns NULL the\n same function will be called on the associated\n cef_request_context_handler_t, if any.\n"]
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int
        ) -> *mut _cef_resource_request_handler_t
    >,
    #[doc = "\n Called on the IO thread when the browser needs credentials from the user.\n |origin_url| is the origin making this authentication request. |isProxy|\n indicates whether the host is a proxy server. |host| contains the hostname\n and |port| contains the port number. |realm| is the realm of the challenge\n and may be NULL. |scheme| is the authentication scheme used, such as\n \"basic\" or \"digest\", and will be NULL if the source of the request is an\n FTP server. Return true (1) to continue the request and call\n cef_auth_callback_t::cont() either in this function or at a later time\n when the authentication information is available. Return false (0) to\n cancel the request immediately.\n"]
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the UI thread to handle requests for URLs with an invalid SSL\n certificate. Return true (1) and call cef_callback_t functions either in\n this function or at a later time to continue or cancel the request. Return\n false (0) to cancel the request immediately. If\n cef_settings_t.ignore_certificate_errors is set all invalid certificates\n will be accepted without calling this function.\n"]
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the UI thread when a client certificate is being requested for\n authentication. Return false (0) to use the default behavior and\n automatically select the first certificate available. Return true (1) and\n call cef_select_client_certificate_callback_t::Select either in this\n function or at a later time to select a certificate. Do not call Select or\n call it with NULL to continue without using any certificate. |isProxy|\n indicates whether the host is an HTTPS proxy or the origin server. |host|\n and |port| contains the hostname and port of the SSL server.\n |certificates| is the list of certificates to choose from; this list has\n already been pruned by Chromium so that it only contains certificates from\n issuers that the server trusts.\n"]
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called on the browser process UI thread when the render view associated\n with |browser| is ready to receive/handle IPC messages in the render\n process.\n"]
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t)
    >,
    #[doc = "\n Called on the browser process UI thread when the render process terminates\n unexpectedly. |status| indicates how the process terminated.\n"]
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t
        )
    >,
    #[doc = "\n Called on the browser process UI thread when the window.document object of\n the main frame has been created.\n"]
    pub on_document_available_in_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t)
    >
}
#[doc = "\n Implement this structure to handle events related to browser requests. The\n functions of this structure will be called on the thread indicated.\n"]
pub type cef_request_handler_t = _cef_request_handler_t;
#[doc = "\n Implement this structure to provide handler implementations.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_client_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Return the handler for audio rendering events.\n"]
    pub get_audio_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_audio_handler_t
    >,
    #[doc = "\n Return the handler for commands. If no handler is provided the default\n implementation will be used.\n"]
    pub get_command_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_command_handler_t
    >,
    #[doc = "\n Return the handler for context menus. If no handler is provided the\n default implementation will be used.\n"]
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t
    >,
    #[doc = "\n Return the handler for dialogs. If no handler is provided the default\n implementation will be used.\n"]
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t
    >,
    #[doc = "\n Return the handler for browser display state events.\n"]
    pub get_display_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t
    >,
    #[doc = "\n Return the handler for download events. If no handler is returned\n downloads will not be allowed.\n"]
    pub get_download_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t
    >,
    #[doc = "\n Return the handler for drag events.\n"]
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t
    >,
    #[doc = "\n Return the handler for find result events.\n"]
    pub get_find_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t
    >,
    #[doc = "\n Return the handler for focus events.\n"]
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t
    >,
    #[doc = "\n Return the handler for events related to cef_frame_t lifespan. This\n function will be called once during cef_browser_t creation and the result\n will be cached for performance reasons.\n"]
    pub get_frame_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_frame_handler_t
    >,
    #[doc = "\n Return the handler for permission requests.\n"]
    pub get_permission_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_permission_handler_t
    >,
    #[doc = "\n Return the handler for JavaScript dialogs. If no handler is provided the\n default implementation will be used.\n"]
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t
    >,
    #[doc = "\n Return the handler for keyboard events.\n"]
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t
    >,
    #[doc = "\n Return the handler for browser life span events.\n"]
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t
    >,
    #[doc = "\n Return the handler for browser load status events.\n"]
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t
    >,
    #[doc = "\n Return the handler for printing on Linux. If a print handler is not\n provided then printing will not be supported on the Linux platform.\n"]
    pub get_print_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_print_handler_t
    >,
    #[doc = "\n Return the handler for off-screen rendering events.\n"]
    pub get_render_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t
    >,
    #[doc = "\n Return the handler for browser request events.\n"]
    pub get_request_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t
    >,
    #[doc = "\n Called when a new message is received from a different process. Return\n true (1) if the message was handled or false (0) otherwise.  It is safe to\n keep a reference to |message| outside of this callback.\n"]
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to provide handler implementations.\n"]
pub type cef_client_t = _cef_client_t;
#[doc = "\n Implement this structure for asynchronous task execution. If the task is\n posted successfully and if the associated message loop is still running then\n the execute() function will be called on the target thread. If the task\n fails to post then the task object may be destroyed on the source thread\n instead of the target thread. For this reason be cautious when performing\n work in the task object destructor.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_task_t {
    #[doc = "\n Base structure.\n"]
    pub base:    cef_base_ref_counted_t,
    #[doc = "\n Method that will be executed on the target thread.\n"]
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_task_t)>
}
#[doc = "\n Implement this structure for asynchronous task execution. If the task is\n posted successfully and if the associated message loop is still running then\n the execute() function will be called on the target thread. If the task\n fails to post then the task object may be destroyed on the source thread\n instead of the target thread. For this reason be cautious when performing\n work in the task object destructor.\n"]
pub type cef_task_t = _cef_task_t;
#[doc = "\n Structure that asynchronously executes tasks on the associated thread. It is\n safe to call the functions of this structure on any thread.\n\n CEF maintains multiple internal threads that are used for handling different\n types of tasks in different processes. The cef_thread_id_t definitions in\n cef_types.h list the common CEF threads. Task runners are also available for\n other CEF threads as appropriate (for example, V8 WebWorker threads).\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_task_runner_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is pointing to the same task runner as\n |that| object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this task runner belongs to the current thread.\n"]
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this task runner is for the specified CEF thread.\n"]
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Post a task for execution on the thread associated with this task runner.\n Execution will occur asynchronously.\n"]
    pub post_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Post a task for delayed execution on the thread associated with this task\n runner. Execution will occur asynchronously. Delayed tasks are not\n supported on V8 WebWorker threads and will be executed without the\n specified delay.\n"]
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: i64
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that asynchronously executes tasks on the associated thread. It is\n safe to call the functions of this structure on any thread.\n\n CEF maintains multiple internal threads that are used for handling different\n types of tasks in different processes. The cef_thread_id_t definitions in\n cef_types.h list the common CEF threads. Task runners are also available for\n other CEF threads as appropriate (for example, V8 WebWorker threads).\n"]
pub type cef_task_runner_t = _cef_task_runner_t;
extern "C" {
    #[doc = "\n Returns the task runner for the current thread. Only CEF threads will have\n task runners. An NULL reference will be returned if this function is called\n on an invalid thread.\n"]
    pub fn cef_task_runner_get_for_current_thread() -> *mut cef_task_runner_t;
}
extern "C" {
    #[doc = "\n Returns the task runner for the specified CEF thread.\n"]
    pub fn cef_task_runner_get_for_thread(threadId: cef_thread_id_t) -> *mut cef_task_runner_t;
}
extern "C" {
    #[doc = "\n Returns true (1) if called on the specified thread. Equivalent to using\n cef_task_runner_t::GetForThread(threadId)->belongs_to_current_thread().\n"]
    pub fn cef_currently_on(threadId: cef_thread_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Post a task for execution on the specified thread. Equivalent to using\n cef_task_runner_t::GetForThread(threadId)->PostTask(task).\n"]
    pub fn cef_post_task(threadId: cef_thread_id_t, task: *mut cef_task_t)
    -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Post a task for delayed execution on the specified thread. Equivalent to\n using cef_task_runner_t::GetForThread(threadId)->PostDelayedTask(task,\n delay_ms).\n"]
    pub fn cef_post_delayed_task(
        threadId: cef_thread_id_t,
        task: *mut cef_task_t,
        delay_ms: i64
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque:       [::std::os::raw::c_char; 4usize]
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub const QOS_CLASS_USER_INTERACTIVE: _bindgen_ty_1 = 33;
pub const QOS_CLASS_USER_INITIATED: _bindgen_ty_1 = 25;
pub const QOS_CLASS_DEFAULT: _bindgen_ty_1 = 21;
pub const QOS_CLASS_UTILITY: _bindgen_ty_1 = 17;
pub const QOS_CLASS_BACKGROUND: _bindgen_ty_1 = 9;
pub const QOS_CLASS_UNSPECIFIED: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0]
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
pub type sigset_t = __darwin_sigset_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void
        >,
        arg4: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void
        >,
        arg4: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield_np();
}
extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int
>;
extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags:       ::std::os::raw::c_int,
    pub ad_pad:         [::std::os::raw::c_int; 2usize]
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize
    ) -> isize;
}
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
pub type off_t = __darwin_off_t;
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize
    );
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize]
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec:  __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t
}
pub type suseconds_t = __darwin_suseconds_t;
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval
    ) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0]
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0]
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
pub type cef_platform_thread_id_t = pid_t;
extern "C" {
    #[doc = "\n Returns the current platform thread ID.\n"]
    pub fn cef_get_current_platform_thread_id() -> cef_platform_thread_id_t;
}
pub type cef_platform_thread_handle_t = pthread_t;
extern "C" {
    #[doc = "\n Returns the current platform thread handle.\n"]
    pub fn cef_get_current_platform_thread_handle() -> cef_platform_thread_handle_t;
}
#[doc = "\n A simple thread abstraction that establishes a message loop on a new thread.\n The consumer uses cef_task_runner_t to execute code on the thread's message\n loop. The thread is terminated when the cef_thread_t object is destroyed or\n stop() is called. All pending tasks queued on the thread's message loop will\n run to completion before the thread is terminated. cef_thread_create() can\n be called on any valid CEF thread in either the browser or render process.\n This structure should only be used for tasks that require a dedicated\n thread. In most cases you can post tasks to an existing CEF thread instead\n of creating a new one; see cef_task.h for details.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_thread_t {
    #[doc = "\n Base structure.\n"]
    pub base:                   cef_base_ref_counted_t,
    #[doc = "\n Returns the cef_task_runner_t that will execute code on this thread's\n message loop. This function is safe to call from any thread.\n"]
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_thread_t) -> *mut _cef_task_runner_t
    >,
    #[doc = "\n Returns the platform thread ID. It will return the same value after stop()\n is called. This function is safe to call from any thread.\n"]
    pub get_platform_thread_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_thread_t) -> cef_platform_thread_id_t
    >,
    #[doc = "\n Stop and join the thread. This function must be called from the same\n thread that called cef_thread_create(). Do not call this function if\n cef_thread_create() was called with a |stoppable| value of false (0).\n"]
    pub stop: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_thread_t)>,
    #[doc = "\n Returns true (1) if the thread is currently running. This function must be\n called from the same thread that called cef_thread_create().\n"]
    pub is_running: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_thread_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n A simple thread abstraction that establishes a message loop on a new thread.\n The consumer uses cef_task_runner_t to execute code on the thread's message\n loop. The thread is terminated when the cef_thread_t object is destroyed or\n stop() is called. All pending tasks queued on the thread's message loop will\n run to completion before the thread is terminated. cef_thread_create() can\n be called on any valid CEF thread in either the browser or render process.\n This structure should only be used for tasks that require a dedicated\n thread. In most cases you can post tasks to an existing CEF thread instead\n of creating a new one; see cef_task.h for details.\n"]
pub type cef_thread_t = _cef_thread_t;
extern "C" {
    #[doc = "\n Create and start a new thread. This function does not block waiting for the\n thread to run initialization. |display_name| is the name that will be used\n to identify the thread. |priority| is the thread execution priority.\n |message_loop_type| indicates the set of asynchronous events that the thread\n can process. If |stoppable| is true (1) the thread will stopped and joined\n on destruction or when stop() is called; otherwise, the thread cannot be\n stopped and will be leaked on shutdown. On Windows the |com_init_mode| value\n specifies how COM will be initialized for the thread. If |com_init_mode| is\n set to COM_INIT_MODE_STA then |message_loop_type| must be set to ML_TYPE_UI.\n"]
    pub fn cef_thread_create(
        display_name: *const cef_string_t,
        priority: cef_thread_priority_t,
        message_loop_type: cef_message_loop_type_t,
        stoppable: ::std::os::raw::c_int,
        com_init_mode: cef_com_init_mode_t
    ) -> *mut cef_thread_t;
}
#[doc = "\n Implement this structure to provide handler implementations. The handler\n instance will not be released until all objects related to the context have\n been destroyed.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                           cef_base_ref_counted_t,
    #[doc = "\n Called on the browser process UI thread immediately after the request\n context has been initialized.\n"]
    pub on_request_context_initialized: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            request_context: *mut _cef_request_context_t
        )
    >,
    #[doc = "\n Called on the browser process IO thread before a resource request is\n initiated. The |browser| and |frame| values represent the source of the\n request, and may be NULL for requests originating from service workers or\n cef_urlrequest_t. |request| represents the request contents and cannot be\n modified in this callback. |is_navigation| will be true (1) if the\n resource request is a navigation. |is_download| will be true (1) if the\n resource request is a download. |request_initiator| is the origin (scheme\n + domain) of the page that initiated the request. Set\n |disable_default_handling| to true (1) to disable default handling of the\n request, in which case it will need to be handled via\n cef_resource_request_handler_t::GetResourceHandler or it will be canceled.\n To allow the resource load to proceed with default handling return NULL.\n To specify a handler for the resource return a\n cef_resource_request_handler_t object. This function will not be called if\n the client associated with |browser| returns a non-NULL value from\n cef_request_handler_t::GetResourceRequestHandler for the same request\n (identified by cef_request_t::GetIdentifier).\n"]
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int
        ) -> *mut _cef_resource_request_handler_t
    >
}
#[doc = "\n Implement this structure to provide handler implementations. The handler\n instance will not be released until all objects related to the context have\n been destroyed.\n"]
pub type cef_request_context_handler_t = _cef_request_context_handler_t;
#[doc = "\n Structure used to make a URL request. URL requests are not associated with a\n browser instance so no cef_client_t callbacks will be executed. URL requests\n can be created on any valid CEF thread in either the browser or render\n process. Once created the functions of the URL request object must be\n accessed on the same thread that created it.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_t {
    #[doc = "\n Base structure.\n"]
    pub base:                cef_base_ref_counted_t,
    #[doc = "\n Returns the request object used to create this URL request. The returned\n object is read-only and should not be modified.\n"]
    pub get_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_request_t
    >,
    #[doc = "\n Returns the client.\n"]
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_urlrequest_client_t
    >,
    #[doc = "\n Returns the request status.\n"]
    pub get_request_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_urlrequest_status_t
    >,
    #[doc = "\n Returns the request error if status is UR_CANCELED or UR_FAILED, or 0\n otherwise.\n"]
    pub get_request_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_errorcode_t
    >,
    #[doc = "\n Returns the response, or NULL if no response information is available.\n Response information will only be available after the upload has\n completed. The returned object is read-only and should not be modified.\n"]
    pub get_response: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_response_t
    >,
    #[doc = "\n Returns true (1) if the response body was served from the cache. This\n includes responses for which revalidation was required.\n"]
    pub response_was_cached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Cancel the request.\n"]
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t)>
}
#[doc = "\n Structure used to make a URL request. URL requests are not associated with a\n browser instance so no cef_client_t callbacks will be executed. URL requests\n can be created on any valid CEF thread in either the browser or render\n process. Once created the functions of the URL request object must be\n accessed on the same thread that created it.\n"]
pub type cef_urlrequest_t = _cef_urlrequest_t;
extern "C" {
    #[doc = "\n Create a new URL request that is not associated with a specific browser or\n frame. Use cef_frame_t::CreateURLRequest instead if you want the request to\n have this association, in which case it may be handled differently (see\n documentation on that function). A request created with this function may\n only originate from the browser process, and will behave as follows:\n   - It may be intercepted by the client via CefResourceRequestHandler or\n     CefSchemeHandlerFactory.\n   - POST data may only contain only a single element of type PDE_TYPE_FILE\n     or PDE_TYPE_BYTES.\n   - If |request_context| is empty the global request context will be used.\n\n The |request| object will be marked as read-only after calling this\n function.\n"]
    pub fn cef_urlrequest_create(
        request: *mut _cef_request_t,
        client: *mut _cef_urlrequest_client_t,
        request_context: *mut _cef_request_context_t
    ) -> *mut cef_urlrequest_t;
}
#[doc = "\n Structure that should be implemented by the cef_urlrequest_t client. The\n functions of this structure will be called on the same thread that created\n the request unless otherwise documented.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_client_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_base_ref_counted_t,
    #[doc = "\n Notifies the client that the request has completed. Use the\n cef_urlrequest_t::GetRequestStatus function to determine if the request\n was successful or not.\n"]
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_client_t, request: *mut _cef_urlrequest_t)
    >,
    #[doc = "\n Notifies the client of upload progress. |current| denotes the number of\n bytes sent so far and |total| is the total size of uploading data (or -1\n if chunked upload is enabled). This function will only be called if the\n UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.\n"]
    pub on_upload_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: i64,
            total: i64
        )
    >,
    #[doc = "\n Notifies the client of download progress. |current| denotes the number of\n bytes received up to the call and |total| is the expected total size of\n the response (or -1 if not determined).\n"]
    pub on_download_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: i64,
            total: i64
        )
    >,
    #[doc = "\n Called when some part of the response is read. |data| contains the current\n bytes received since the last call. This function will not be called if\n the UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.\n"]
    pub on_download_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            data: *const ::std::os::raw::c_void,
            data_length: usize
        )
    >,
    #[doc = "\n Called on the IO thread when the browser needs credentials from the user.\n |isProxy| indicates whether the host is a proxy server. |host| contains\n the hostname and |port| contains the port number. Return true (1) to\n continue the request and call cef_auth_callback_t::cont() when the\n authentication information is available. If the request has an associated\n browser/frame then returning false (0) will result in a call to\n GetAuthCredentials on the cef_request_handler_t associated with that\n browser, if any. Otherwise, returning false (0) will cancel the request\n immediately. This function will only be called for requests initiated from\n the browser process.\n"]
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that should be implemented by the cef_urlrequest_t client. The\n functions of this structure will be called on the same thread that created\n the request unless otherwise documented.\n"]
pub type cef_urlrequest_client_t = _cef_urlrequest_client_t;
#[doc = "\n Structure used to create and/or parse command line arguments. Arguments with\n \"--\", \"-\" and, on Windows, \"/\" prefixes are considered switches. Switches\n will always precede any arguments without switch prefixes. Switches can\n optionally have a value specified using the \"=\" delimiter (e.g.\n \"-switch=value\"). An argument of \"--\" will terminate switch parsing with all\n subsequent tokens, regardless of prefix, being interpreted as non-switch\n arguments. Switch names should be lowercase ASCII and will be converted to\n such if necessary. Switch values will retain the original case and UTF8\n encoding. This structure can be used before cef_initialize() is called.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_command_line_t {
    #[doc = "\n Base structure.\n"]
    pub base:                     cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid. Do not call any other functions\n if this function returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the values of this object are read-only. Some APIs may\n expose read-only objects.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns a writable copy of this object.\n"]
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t
    >,
    #[doc = "\n Initialize the command line with the specified |argc| and |argv| values.\n The first argument must be the name of the program. This function is only\n supported on non-Windows platforms.\n"]
    pub init_from_argv: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char
        )
    >,
    #[doc = "\n Initialize the command line with the string returned by calling\n GetCommandLineW(). This function is only supported on Windows.\n"]
    pub init_from_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, command_line: *const cef_string_t)
    >,
    #[doc = "\n Reset the command-line switches and arguments but leave the program\n component unchanged.\n"]
    pub reset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_command_line_t)>,
    #[doc = "\n Retrieve the original command line string as a vector of strings. The argv\n array: `{ program, [(--|-|/)switch[=value]]*, [--], [argument]* }`\n"]
    pub get_argv: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t)
    >,
    #[doc = "\n Constructs and returns the represented command line string. Use this\n function cautiously because quoting behavior is unclear.\n"]
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Get the program part of the command line string (the first item).\n"]
    pub get_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the program part of the command line string (the first item).\n"]
    pub set_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t)
    >,
    #[doc = "\n Returns true (1) if the command line has switches.\n"]
    pub has_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the command line contains the given switch.\n"]
    pub has_switch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value associated with the given switch. If the switch has no\n value or isn't present this function returns the NULL string.\n"]
    pub get_switch_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the map of switch names and values. If a switch has no value an\n NULL string is returned.\n"]
    pub get_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t)
    >,
    #[doc = "\n Add a switch to the end of the command line.\n"]
    pub append_switch: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t)
    >,
    #[doc = "\n Add a switch with the specified value to the end of the command line. If\n the switch has no value pass an NULL value string.\n"]
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t
        )
    >,
    #[doc = "\n True if there are remaining command line arguments.\n"]
    pub has_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Get the remaining command line arguments.\n"]
    pub get_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t)
    >,
    #[doc = "\n Add an argument to the end of the command line.\n"]
    pub append_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t)
    >,
    #[doc = "\n Insert a command before the current command. Common for debuggers, like\n \"valgrind\" or \"gdb --args\".\n"]
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t)
    >
}
#[doc = "\n Structure used to create and/or parse command line arguments. Arguments with\n \"--\", \"-\" and, on Windows, \"/\" prefixes are considered switches. Switches\n will always precede any arguments without switch prefixes. Switches can\n optionally have a value specified using the \"=\" delimiter (e.g.\n \"-switch=value\"). An argument of \"--\" will terminate switch parsing with all\n subsequent tokens, regardless of prefix, being interpreted as non-switch\n arguments. Switch names should be lowercase ASCII and will be converted to\n such if necessary. Switch values will retain the original case and UTF8\n encoding. This structure can be used before cef_initialize() is called.\n"]
pub type cef_command_line_t = _cef_command_line_t;
extern "C" {
    #[doc = "\n Create a new cef_command_line_t instance.\n"]
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    #[doc = "\n Returns the singleton global cef_command_line_t object. The returned object\n will be read-only.\n"]
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
#[doc = "\n Structure used to implement browser process callbacks. The functions of this\n structure will be called on the browser process main thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_process_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                            cef_base_ref_counted_t,
    #[doc = "\n Provides an opportunity to register custom preferences prior to global and\n request context initialization.\n\n If |type| is CEF_PREFERENCES_TYPE_GLOBAL the registered preferences can be\n accessed via cef_preference_manager_t::GetGlobalPreferences after\n OnContextInitialized is called. Global preferences are registered a single\n time at application startup. See related cef_settings_t.cache_path and\n cef_settings_t.persist_user_preferences configuration.\n\n If |type| is CEF_PREFERENCES_TYPE_REQUEST_CONTEXT the preferences can be\n accessed via the cef_request_context_t after\n cef_request_context_handler_t::OnRequestContextInitialized is called.\n Request context preferences are registered each time a new\n cef_request_context_t is created. It is intended but not required that all\n request contexts have the same registered preferences. See related\n cef_request_context_settings_t.cache_path and\n cef_request_context_settings_t.persist_user_preferences configuration.\n\n Do not keep a reference to the |registrar| object. This function is called\n on the browser process UI thread.\n"]
    pub on_register_custom_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            type_: cef_preferences_type_t,
            registrar: *mut _cef_preference_registrar_t
        )
    >,
    #[doc = "\n Called on the browser process UI thread immediately after the CEF context\n has been initialized.\n"]
    pub on_context_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t)>,
    #[doc = "\n Called before a child process is launched. Will be called on the browser\n process UI thread when launching a render process and on the browser\n process IO thread when launching a GPU process. Provides an opportunity to\n modify the child process command line. Do not keep a reference to\n |command_line| outside of this function.\n"]
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t
        )
    >,
    #[doc = "\n Implement this function to provide app-specific behavior when an already\n running app is relaunched with the same CefSettings.root_cache_path value.\n For example, activate an existing app window or create a new app window.\n |command_line| will be read-only. Do not keep a reference to\n |command_line| outside of this function. Return true (1) if the relaunch\n is handled or false (0) for default relaunch behavior. Default behavior\n will create a new default styled Chrome window.\n\n To avoid cache corruption only a single app instance is allowed to run for\n a given CefSettings.root_cache_path value. On relaunch the app checks a\n process singleton lock and then forwards the new launch arguments to the\n already running app process before exiting early. Client apps should\n therefore check the cef_initialize() return value for early exit before\n proceeding.\n\n This function will be called on the browser process UI thread.\n"]
    pub on_already_running_app_relaunch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
            current_directory: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called from any thread when work has been scheduled for the browser\n process main (UI) thread. This callback is used in combination with\n cef_settings_t.external_message_pump and cef_do_message_loop_work() in\n cases where the CEF message loop must be integrated into an existing\n application message loop (see additional comments and warnings on\n CefDoMessageLoopWork). This callback should schedule a\n cef_do_message_loop_work() call to happen on the main (UI) thread.\n |delay_ms| is the requested delay in milliseconds. If |delay_ms| is <= 0\n then the call should happen reasonably soon. If |delay_ms| is > 0 then the\n call should be scheduled to happen after the specified delay and any\n currently pending scheduled call should be cancelled.\n"]
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: i64)
    >,
    #[doc = "\n Return the default client for use with a newly created browser window. If\n null is returned the browser will be unmanaged (no callbacks will be\n executed for that browser) and application shutdown will be blocked until\n the browser window is closed manually. This function is currently only\n used with the chrome runtime.\n"]
    pub get_default_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t) -> *mut _cef_client_t
    >
}
#[doc = "\n Structure used to implement browser process callbacks. The functions of this\n structure will be called on the browser process main thread unless otherwise\n indicated.\n"]
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[doc = "\n Structure representing a V8 context handle. V8 handles can only be accessed\n from the thread on which they are created. Valid threads for creating a V8\n handle include the render process main thread (TID_RENDERER) and WebWorker\n threads. A task runner for posting tasks on the associated thread can be\n retrieved via the cef_v8context_t::get_task_runner() function.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8context_t {
    #[doc = "\n Base structure.\n"]
    pub base:            cef_base_ref_counted_t,
    #[doc = "\n Returns the task runner associated with this context. V8 handles can only\n be accessed from the thread on which they are created. This function can\n be called on any render process thread.\n"]
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t
    >,
    #[doc = "\n Returns true (1) if the underlying handle is valid and it can be accessed\n on the current thread. Do not call any other functions if this function\n returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the browser for this context. This function will return an NULL\n reference for WebWorker contexts.\n"]
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t
    >,
    #[doc = "\n Returns the frame for this context. This function will return an NULL\n reference for WebWorker contexts.\n"]
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t
    >,
    #[doc = "\n Returns the global object for this context. The context must be entered\n before calling this function.\n"]
    pub get_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t
    >,
    #[doc = "\n Enter this context. A context must be explicitly entered before creating a\n V8 Object, Array, Function or Date asynchronously. exit() must be called\n the same number of times as enter() before releasing this context. V8\n objects belong to the context in which they are created. Returns true (1)\n if the scope was entered successfully.\n"]
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Exit this context. Call this function only after calling enter(). Returns\n true (1) if the scope was exited successfully.\n"]
    pub exit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is pointing to the same handle as |that|\n object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Execute a string of JavaScript code in this V8 context. The |script_url|\n parameter is the URL where the script in question can be found, if any.\n The |start_line| parameter is the base line number to use for error\n reporting. On success |retval| will be set to the return value, if any,\n and the function will return true (1). On failure |exception| will be set\n to the exception, if any, and the function will return false (0).\n"]
    pub eval: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure representing a V8 context handle. V8 handles can only be accessed\n from the thread on which they are created. Valid threads for creating a V8\n handle include the render process main thread (TID_RENDERER) and WebWorker\n threads. A task runner for posting tasks on the associated thread can be\n retrieved via the cef_v8context_t::get_task_runner() function.\n"]
pub type cef_v8context_t = _cef_v8context_t;
extern "C" {
    #[doc = "\n Returns the current (top) context object in the V8 context stack.\n"]
    pub fn cef_v8context_get_current_context() -> *mut cef_v8context_t;
}
extern "C" {
    #[doc = "\n Returns the entered (bottom) context object in the V8 context stack.\n"]
    pub fn cef_v8context_get_entered_context() -> *mut cef_v8context_t;
}
extern "C" {
    #[doc = "\n Returns true (1) if V8 is currently inside a context.\n"]
    pub fn cef_v8context_in_context() -> ::std::os::raw::c_int;
}
#[doc = "\n Structure that should be implemented to handle V8 function calls. The\n functions of this structure will be called on the thread associated with the\n V8 function.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:    cef_base_ref_counted_t,
    #[doc = "\n Handle execution of the function identified by |name|. |object| is the\n receiver ('this' object) of the function. |arguments| is the list of\n arguments passed to the function. If execution succeeds set |retval| to\n the function return value. If execution fails set |exception| to the\n exception that will be thrown. Return true (1) if execution was handled.\n"]
    pub execute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that should be implemented to handle V8 function calls. The\n functions of this structure will be called on the thread associated with the\n V8 function.\n"]
pub type cef_v8handler_t = _cef_v8handler_t;
#[doc = "\n Structure that should be implemented to handle V8 accessor calls. Accessor\n identifiers are registered by calling cef_v8value_t::set_value(). The\n functions of this structure will be called on the thread associated with the\n V8 accessor.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8accessor_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t,
    #[doc = "\n Handle retrieval the accessor value identified by |name|. |object| is the\n receiver ('this' object) of the accessor. If retrieval succeeds set\n |retval| to the return value. If retrieval fails set |exception| to the\n exception that will be thrown. Return true (1) if accessor retrieval was\n handled.\n"]
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Handle assignment of the accessor value identified by |name|. |object| is\n the receiver ('this' object) of the accessor. |value| is the new value\n being assigned to the accessor. If assignment fails set |exception| to the\n exception that will be thrown. Return true (1) if accessor assignment was\n handled.\n"]
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that should be implemented to handle V8 accessor calls. Accessor\n identifiers are registered by calling cef_v8value_t::set_value(). The\n functions of this structure will be called on the thread associated with the\n V8 accessor.\n"]
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[doc = "\n Structure that should be implemented to handle V8 interceptor calls. The\n functions of this structure will be called on the thread associated with the\n V8 interceptor. Interceptor's named property handlers (with first argument\n of type CefString) are called when object is indexed by string. Indexed\n property handlers (with first argument of type int) are called when object\n is indexed by integer.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8interceptor_t {
    #[doc = "\n Base structure.\n"]
    pub base:        cef_base_ref_counted_t,
    #[doc = "\n Handle retrieval of the interceptor value identified by |name|. |object|\n is the receiver ('this' object) of the interceptor. If retrieval succeeds,\n set |retval| to the return value. If the requested value does not exist,\n don't set either |retval| or |exception|. If retrieval fails, set\n |exception| to the exception that will be thrown. If the property has an\n associated accessor, it will be called only if you don't set |retval|.\n Return true (1) if interceptor retrieval was handled, false (0) otherwise.\n"]
    pub get_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Handle retrieval of the interceptor value identified by |index|. |object|\n is the receiver ('this' object) of the interceptor. If retrieval succeeds,\n set |retval| to the return value. If the requested value does not exist,\n don't set either |retval| or |exception|. If retrieval fails, set\n |exception| to the exception that will be thrown. Return true (1) if\n interceptor retrieval was handled, false (0) otherwise.\n"]
    pub get_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Handle assignment of the interceptor value identified by |name|. |object|\n is the receiver ('this' object) of the interceptor. |value| is the new\n value being assigned to the interceptor. If assignment fails, set\n |exception| to the exception that will be thrown. This setter will always\n be called, even when the property has an associated accessor. Return true\n (1) if interceptor assignment was handled, false (0) otherwise.\n"]
    pub set_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Handle assignment of the interceptor value identified by |index|. |object|\n is the receiver ('this' object) of the interceptor. |value| is the new\n value being assigned to the interceptor. If assignment fails, set\n |exception| to the exception that will be thrown. Return true (1) if\n interceptor assignment was handled, false (0) otherwise.\n"]
    pub set_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that should be implemented to handle V8 interceptor calls. The\n functions of this structure will be called on the thread associated with the\n V8 interceptor. Interceptor's named property handlers (with first argument\n of type CefString) are called when object is indexed by string. Indexed\n property handlers (with first argument of type int) are called when object\n is indexed by integer.\n"]
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[doc = "\n Structure representing a V8 exception. The functions of this structure may\n be called on any render process thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8exception_t {
    #[doc = "\n Base structure.\n"]
    pub base:                     cef_base_ref_counted_t,
    #[doc = "\n Returns the exception message.\n"]
    pub get_message: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the line of source code that the exception occurred within.\n"]
    pub get_source_line: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the resource name for the script from where the function causing\n the error originates.\n"]
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the 1-based number of the line where the error occurred or 0 if\n the line number is unknown.\n"]
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the index within the script of the first character where the error\n occurred.\n"]
    pub get_start_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the index within the script of the last character where the error\n occurred.\n"]
    pub get_end_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the index within the line of the first character where the error\n occurred.\n"]
    pub get_start_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the index within the line of the last character where the error\n occurred.\n"]
    pub get_end_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure representing a V8 exception. The functions of this structure may\n be called on any render process thread.\n"]
pub type cef_v8exception_t = _cef_v8exception_t;
#[doc = "\n Callback structure that is passed to cef_v8value_t::CreateArrayBuffer.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8array_buffer_release_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Called to release |buffer| when the ArrayBuffer JS object is garbage\n collected. |buffer| is the value that was passed to CreateArrayBuffer\n along with this object.\n"]
    pub release_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void
        )
    >
}
#[doc = "\n Callback structure that is passed to cef_v8value_t::CreateArrayBuffer.\n"]
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[doc = "\n Structure representing a V8 value handle. V8 handles can only be accessed\n from the thread on which they are created. Valid threads for creating a V8\n handle include the render process main thread (TID_RENDERER) and WebWorker\n threads. A task runner for posting tasks on the associated thread can be\n retrieved via the cef_v8context_t::get_task_runner() function.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8value_t {
    #[doc = "\n Base structure.\n"]
    pub base:                               cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the underlying handle is valid and it can be accessed\n on the current thread. Do not call any other functions if this function\n returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is undefined.\n"]
    pub is_undefined: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is null.\n"]
    pub is_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is bool.\n"]
    pub is_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is int.\n"]
    pub is_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is unsigned int.\n"]
    pub is_uint: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is double.\n"]
    pub is_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is Date.\n"]
    pub is_date: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is string.\n"]
    pub is_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is object.\n"]
    pub is_object: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is array.\n"]
    pub is_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is an ArrayBuffer.\n"]
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is function.\n"]
    pub is_function: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n True if the value type is a Promise.\n"]
    pub is_promise: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is pointing to the same handle as |that|\n object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return a bool value.\n"]
    pub get_bool_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return an int value.\n"]
    pub get_int_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> i32>,
    #[doc = "\n Return an unsigned int value.\n"]
    pub get_uint_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> u32>,
    #[doc = "\n Return a double value.\n"]
    pub get_double_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> f64>,
    #[doc = "\n Return a Date value.\n"]
    pub get_date_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_basetime_t>,
    #[doc = "\n Return a string value.\n"]
    pub get_string_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if this is a user created object.\n"]
    pub is_user_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the last function call resulted in an exception. This\n attribute exists only in the scope of the current CEF value object.\n"]
    pub has_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the exception resulting from the last function call. This\n attribute exists only in the scope of the current CEF value object.\n"]
    pub get_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t
    >,
    #[doc = "\n Clears the last exception and returns true (1) on success.\n"]
    pub clear_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object will re-throw future exceptions. This\n attribute exists only in the scope of the current CEF value object.\n"]
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set whether this object will re-throw future exceptions. By default\n exceptions are not re-thrown. If a exception is re-thrown the current\n context should not be accessed again until after the exception has been\n caught and not re-thrown. Returns true (1) on success. This attribute\n exists only in the scope of the current CEF value object.\n"]
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the object has a value with the specified identifier.\n"]
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the object has a value with the specified identifier.\n"]
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Deletes the value with the specified identifier and returns true (1) on\n success. Returns false (0) if this function is called incorrectly or an\n exception is thrown. For read-only and don't-delete values this function\n will return true (1) even though deletion failed.\n"]
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Deletes the value with the specified identifier and returns true (1) on\n success. Returns false (0) if this function is called incorrectly,\n deletion fails or an exception is thrown. For read-only and don't-delete\n values this function will return true (1) even though deletion failed.\n"]
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the value with the specified identifier on success. Returns NULL\n if this function is called incorrectly or an exception is thrown.\n"]
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t
        ) -> *mut _cef_v8value_t
    >,
    #[doc = "\n Returns the value with the specified identifier on success. Returns NULL\n if this function is called incorrectly or an exception is thrown.\n"]
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int
        ) -> *mut _cef_v8value_t
    >,
    #[doc = "\n Associates a value with the specified identifier and returns true (1) on\n success. Returns false (0) if this function is called incorrectly or an\n exception is thrown. For read-only values this function will return true\n (1) even though assignment failed.\n"]
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Associates a value with the specified identifier and returns true (1) on\n success. Returns false (0) if this function is called incorrectly or an\n exception is thrown. For read-only values this function will return true\n (1) even though assignment failed.\n"]
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Registers an identifier and returns true (1) on success. Access to the\n identifier will be forwarded to the cef_v8accessor_t instance passed to\n cef_v8value_t::cef_v8value_create_object(). Returns false (0) if this\n function is called incorrectly or an exception is thrown. For read-only\n values this function will return true (1) even though assignment failed.\n"]
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t,
            attribute: cef_v8_propertyattribute_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Read the keys for the object's values into the specified vector. Integer-\n based keys will also be returned as strings.\n"]
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the user data for this object and returns true (1) on success.\n Returns false (0) if this function is called incorrectly. This function\n can only be called on user created objects.\n"]
    pub set_user_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the user data, if any, assigned to this object.\n"]
    pub get_user_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t
    >,
    #[doc = "\n Returns the amount of externally allocated memory registered for the\n object.\n"]
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Adjusts the amount of registered external memory for the object. Used to\n give V8 an indication of the amount of externally allocated memory that is\n kept alive by JavaScript objects. V8 uses this information to decide when\n to perform global garbage collection. Each cef_v8value_t tracks the amount\n of external memory associated with it and automatically decreases the\n global total by the appropriate amount on its destruction.\n |change_in_bytes| specifies the number of bytes to adjust by. This\n function returns the number of bytes associated with the object after the\n adjustment. This function can only be called on user created objects.\n"]
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the number of elements in the array.\n"]
    pub get_array_length: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the ReleaseCallback object associated with the ArrayBuffer or NULL\n if the ArrayBuffer was not created with CreateArrayBuffer.\n"]
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t
        ) -> *mut _cef_v8array_buffer_release_callback_t
    >,
    #[doc = "\n Prevent the ArrayBuffer from using it's memory block by setting the length\n to zero. This operation cannot be undone. If the ArrayBuffer was created\n with CreateArrayBuffer then\n cef_v8array_buffer_release_callback_t::ReleaseBuffer will be called to\n release the underlying buffer.\n"]
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the length (in bytes) of the ArrayBuffer.\n"]
    pub get_array_buffer_byte_length:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> usize>,
    #[doc = "\n Returns a pointer to the beginning of the memory block for this\n ArrayBuffer backing store. The returned pointer is valid as long as the\n cef_v8value_t is alive.\n"]
    pub get_array_buffer_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut ::std::os::raw::c_void
    >,
    #[doc = "\n Returns the function name.\n"]
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the function handler or NULL if not a CEF-created function.\n"]
    pub get_function_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t
    >,
    #[doc = "\n Execute the function using the current V8 context. This function should\n only be called from within the scope of a cef_v8handler_t or\n cef_v8accessor_t callback, or in combination with calling enter() and\n exit() on a stored cef_v8context_t reference. |object| is the receiver\n ('this' object) of the function. If |object| is NULL the current context's\n global object will be used. |arguments| is the list of arguments that will\n be passed to the function. Returns the function return value on success.\n Returns NULL if this function is called incorrectly or an exception is\n thrown.\n"]
    pub execute_function: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t
        ) -> *mut _cef_v8value_t
    >,
    #[doc = "\n Execute the function using the specified V8 context. |object| is the\n receiver ('this' object) of the function. If |object| is NULL the\n specified context's global object will be used. |arguments| is the list of\n arguments that will be passed to the function. Returns the function return\n value on success. Returns NULL if this function is called incorrectly or\n an exception is thrown.\n"]
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t
        ) -> *mut _cef_v8value_t
    >,
    #[doc = "\n Resolve the Promise using the current V8 context. This function should\n only be called from within the scope of a cef_v8handler_t or\n cef_v8accessor_t callback, or in combination with calling enter() and\n exit() on a stored cef_v8context_t reference. |arg| is the argument passed\n to the resolved promise. Returns true (1) on success. Returns false (0) if\n this function is called incorrectly or an exception is thrown.\n"]
    pub resolve_promise: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            arg: *mut _cef_v8value_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Reject the Promise using the current V8 context. This function should only\n be called from within the scope of a cef_v8handler_t or cef_v8accessor_t\n callback, or in combination with calling enter() and exit() on a stored\n cef_v8context_t reference. Returns true (1) on success. Returns false (0)\n if this function is called incorrectly or an exception is thrown.\n"]
    pub reject_promise: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            errorMsg: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure representing a V8 value handle. V8 handles can only be accessed\n from the thread on which they are created. Valid threads for creating a V8\n handle include the render process main thread (TID_RENDERER) and WebWorker\n threads. A task runner for posting tasks on the associated thread can be\n retrieved via the cef_v8context_t::get_task_runner() function.\n"]
pub type cef_v8value_t = _cef_v8value_t;
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type undefined.\n"]
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type null.\n"]
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type bool.\n"]
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type int.\n"]
    pub fn cef_v8value_create_int(value: i32) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type unsigned int.\n"]
    pub fn cef_v8value_create_uint(value: u32) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type double.\n"]
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type Date. This function should only be\n called from within the scope of a cef_render_process_handler_t,\n cef_v8handler_t or cef_v8accessor_t callback, or in combination with calling\n enter() and exit() on a stored cef_v8context_t reference.\n"]
    pub fn cef_v8value_create_date(date: cef_basetime_t) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type string.\n"]
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type object with optional accessor\n and/or interceptor. This function should only be called from within the\n scope of a cef_render_process_handler_t, cef_v8handler_t or cef_v8accessor_t\n callback, or in combination with calling enter() and exit() on a stored\n cef_v8context_t reference.\n"]
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t,
        interceptor: *mut cef_v8interceptor_t
    ) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type array with the specified |length|.\n If |length| is negative the returned array will have length 0. This function\n should only be called from within the scope of a\n cef_render_process_handler_t, cef_v8handler_t or cef_v8accessor_t callback,\n or in combination with calling enter() and exit() on a stored\n cef_v8context_t reference.\n"]
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type ArrayBuffer which wraps the\n provided |buffer| of size |length| bytes. The ArrayBuffer is externalized,\n meaning that it does not own |buffer|. The caller is responsible for freeing\n |buffer| when requested via a call to\n cef_v8array_buffer_release_callback_t::ReleaseBuffer. This function should\n only be called from within the scope of a cef_render_process_handler_t,\n cef_v8handler_t or cef_v8accessor_t callback, or in combination with calling\n enter() and exit() on a stored cef_v8context_t reference.\n"]
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t
    ) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type function. This function should\n only be called from within the scope of a cef_render_process_handler_t,\n cef_v8handler_t or cef_v8accessor_t callback, or in combination with calling\n enter() and exit() on a stored cef_v8context_t reference.\n"]
    pub fn cef_v8value_create_function(
        name: *const cef_string_t,
        handler: *mut cef_v8handler_t
    ) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = "\n Create a new cef_v8value_t object of type Promise. This function should only\n be called from within the scope of a cef_render_process_handler_t,\n cef_v8handler_t or cef_v8accessor_t callback, or in combination with calling\n enter() and exit() on a stored cef_v8context_t reference.\n"]
    pub fn cef_v8value_create_promise() -> *mut cef_v8value_t;
}
#[doc = "\n Structure representing a V8 stack trace handle. V8 handles can only be\n accessed from the thread on which they are created. Valid threads for\n creating a V8 handle include the render process main thread (TID_RENDERER)\n and WebWorker threads. A task runner for posting tasks on the associated\n thread can be retrieved via the cef_v8context_t::get_task_runner() function.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8stack_trace_t {
    #[doc = "\n Base structure.\n"]
    pub base:            cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the underlying handle is valid and it can be accessed\n on the current thread. Do not call any other functions if this function\n returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the number of stack frames.\n"]
    pub get_frame_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the stack frame at the specified 0-based index.\n"]
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int
        ) -> *mut _cef_v8stack_frame_t
    >
}
#[doc = "\n Structure representing a V8 stack trace handle. V8 handles can only be\n accessed from the thread on which they are created. Valid threads for\n creating a V8 handle include the render process main thread (TID_RENDERER)\n and WebWorker threads. A task runner for posting tasks on the associated\n thread can be retrieved via the cef_v8context_t::get_task_runner() function.\n"]
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
extern "C" {
    #[doc = "\n Returns the stack trace for the currently active context. |frame_limit| is\n the maximum number of frames that will be captured.\n"]
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int
    ) -> *mut cef_v8stack_trace_t;
}
#[doc = "\n Structure representing a V8 stack frame handle. V8 handles can only be\n accessed from the thread on which they are created. Valid threads for\n creating a V8 handle include the render process main thread (TID_RENDERER)\n and WebWorker threads. A task runner for posting tasks on the associated\n thread can be retrieved via the cef_v8context_t::get_task_runner() function.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8stack_frame_t {
    #[doc = "\n Base structure.\n"]
    pub base:                          cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if the underlying handle is valid and it can be accessed\n on the current thread. Do not call any other functions if this function\n returns false (0).\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the name of the resource script that contains the function.\n"]
    pub get_script_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the name of the resource script that contains the function or the\n sourceURL value if the script name is undefined and its source ends with a\n \"//@ sourceURL=...\" string.\n"]
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the name of the function.\n"]
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the 1-based line number for the function call or 0 if unknown.\n"]
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the 1-based column offset on the line for the function call or 0\n if unknown.\n"]
    pub get_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the function was compiled using eval().\n"]
    pub is_eval: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the function was called as a constructor via \"new\".\n"]
    pub is_constructor: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure representing a V8 stack frame handle. V8 handles can only be\n accessed from the thread on which they are created. Valid threads for\n creating a V8 handle include the render process main thread (TID_RENDERER)\n and WebWorker threads. A task runner for posting tasks on the associated\n thread can be retrieved via the cef_v8context_t::get_task_runner() function.\n"]
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;
extern "C" {
    #[doc = "\n Register a new V8 extension with the specified JavaScript extension code and\n handler. Functions implemented by the handler are prototyped using the\n keyword 'native'. The calling of a native function is restricted to the\n scope in which the prototype of the native function is defined. This\n function may only be called on the render process main thread.\n\n Example JavaScript extension code: <pre>\n   // create the 'example' global object if it doesn't already exist.\n   if (!example)\n     example = {};\n   // create the 'example.test' global object if it doesn't already exist.\n   if (!example.test)\n     example.test = {};\n   (function() {\n     // Define the function 'example.test.myfunction'.\n     example.test.myfunction = function() {\n       // Call CefV8Handler::Execute() with the function name 'MyFunction'\n       // and no arguments.\n       native function MyFunction();\n       return MyFunction();\n     };\n     // Define the getter function for parameter 'example.test.myparam'.\n     example.test.__defineGetter__('myparam', function() {\n       // Call CefV8Handler::Execute() with the function name 'GetMyParam'\n       // and no arguments.\n       native function GetMyParam();\n       return GetMyParam();\n     });\n     // Define the setter function for parameter 'example.test.myparam'.\n     example.test.__defineSetter__('myparam', function(b) {\n       // Call CefV8Handler::Execute() with the function name 'SetMyParam'\n       // and a single argument.\n       native function SetMyParam();\n       if(b) SetMyParam(b);\n     });\n\n     // Extension definitions can also contain normal JavaScript variables\n     // and functions.\n     var myint = 0;\n     example.test.increment = function() {\n       myint += 1;\n       return myint;\n     };\n   })();\n </pre>\n\n Example usage in the page: <pre>\n   // Call the function.\n   example.test.myfunction();\n   // Set the parameter.\n   example.test.myparam = value;\n   // Get the parameter.\n   value = example.test.myparam;\n   // Call another function.\n   example.test.increment();\n </pre>\n"]
    pub fn cef_register_extension(
        extension_name: *const cef_string_t,
        javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t
    ) -> ::std::os::raw::c_int;
}
#[doc = "\n Structure used to implement render process callbacks. The functions of this\n structure will be called on the render process main thread (TID_RENDERER)\n unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_render_process_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Called after WebKit has been initialized.\n"]
    pub on_web_kit_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t)>,
    #[doc = "\n Called after a browser has been created. When browsing cross-origin a new\n browser will be created before the old browser with the same identifier is\n destroyed. |extra_info| is an optional read-only value originating from\n cef_browser_host_t::cef_browser_host_create_browser(),\n cef_browser_host_t::cef_browser_host_create_browser_sync(),\n cef_life_span_handler_t::on_before_popup() or\n cef_browser_view_t::cef_browser_view_create().\n"]
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t
        )
    >,
    #[doc = "\n Called before a browser is destroyed.\n"]
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t
        )
    >,
    #[doc = "\n Return the handler for browser load status events.\n"]
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t) -> *mut _cef_load_handler_t
    >,
    #[doc = "\n Called immediately after the V8 context for a frame has been created. To\n retrieve the JavaScript 'window' object use the\n cef_v8context_t::get_global() function. V8 handles can only be accessed\n from the thread on which they are created. A task runner for posting tasks\n on the associated thread can be retrieved via the\n cef_v8context_t::get_task_runner() function.\n"]
    pub on_context_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t
        )
    >,
    #[doc = "\n Called immediately before the V8 context for a frame is released. No\n references to the context should be kept after this function is called.\n"]
    pub on_context_released: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t
        )
    >,
    #[doc = "\n Called for global uncaught exceptions in a frame. Execution of this\n callback is disabled by default. To enable set\n cef_settings_t.uncaught_exception_stack_size > 0.\n"]
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t
        )
    >,
    #[doc = "\n Called when a new node in the the browser gets focus. The |node| value may\n be NULL if no specific node has gained focus. The node object passed to\n this function represents a snapshot of the DOM at the time this function\n is executed. DOM objects are only valid for the scope of this function. Do\n not keep references to or attempt to access any DOM objects outside the\n scope of this function.\n"]
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t
        )
    >,
    #[doc = "\n Called when a new message is received from a different process. Return\n true (1) if the message was handled or false (0) otherwise. It is safe to\n keep a reference to |message| outside of this callback.\n"]
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure used to implement render process callbacks. The functions of this\n structure will be called on the render process main thread (TID_RENDERER)\n unless otherwise indicated.\n"]
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[doc = "\n Structure used to implement a custom resource bundle structure. See\n CefSettings for additional options related to resource bundle loading. The\n functions of this structure may be called on multiple threads.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_bundle_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Called to retrieve a localized translation for the specified |string_id|.\n To provide the translation set |string| to the translation string and\n return true (1). To use the default translation return false (0). Include\n cef_pack_strings.h for a listing of valid string ID values.\n"]
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to retrieve data for the specified scale independent |resource_id|.\n To provide the resource data set |data| and |data_size| to the data\n pointer and size respectively and return true (1). To use the default\n resource data return false (0). The resource data will not be copied and\n must remain resident in memory. Include cef_pack_resources.h for a listing\n of valid resource ID values.\n"]
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called to retrieve data for the specified |resource_id| nearest the scale\n factor |scale_factor|. To provide the resource data set |data| and\n |data_size| to the data pointer and size respectively and return true (1).\n To use the default resource data return false (0). The resource data will\n not be copied and must remain resident in memory. Include\n cef_pack_resources.h for a listing of valid resource ID values.\n"]
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure used to implement a custom resource bundle structure. See\n CefSettings for additional options related to resource bundle loading. The\n functions of this structure may be called on multiple threads.\n"]
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[doc = "\n Structure that manages custom scheme registrations.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scheme_registrar_t {
    #[doc = "\n Base structure.\n"]
    pub base:              cef_base_scoped_t,
    #[doc = "\n Register a custom scheme. This function should not be called for the\n built-in HTTP, HTTPS, FILE, FTP, ABOUT and DATA schemes.\n\n See cef_scheme_options_t for possible values for |options|.\n\n This function may be called on any thread. It should only be called once\n per unique |scheme_name| value. If |scheme_name| is already registered or\n if an error occurs this function will return false (0).\n"]
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that manages custom scheme registrations.\n"]
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[doc = "\n Structure that creates cef_resource_handler_t instances for handling scheme\n requests. The functions of this structure will always be called on the IO\n thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scheme_handler_factory_t {
    #[doc = "\n Base structure.\n"]
    pub base:   cef_base_ref_counted_t,
    #[doc = "\n Return a new resource handler instance to handle the request or an NULL\n reference to allow default handling of the request. |browser| and |frame|\n will be the browser window and frame respectively that originated the\n request or NULL if the request did not originate from a browser window\n (for example, if the request came from cef_urlrequest_t). The |request|\n object passed to this function cannot be modified.\n"]
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t
        ) -> *mut _cef_resource_handler_t
    >
}
#[doc = "\n Structure that creates cef_resource_handler_t instances for handling scheme\n requests. The functions of this structure will always be called on the IO\n thread.\n"]
pub type cef_scheme_handler_factory_t = _cef_scheme_handler_factory_t;
extern "C" {
    #[doc = "\n Register a scheme handler factory with the global request context. An NULL\n |domain_name| value for a standard scheme will cause the factory to match\n all domain names. The |domain_name| value will be ignored for non-standard\n schemes. If |scheme_name| is a built-in scheme and no handler is returned by\n |factory| then the built-in scheme handler factory will be called. If\n |scheme_name| is a custom scheme then you must also implement the\n cef_app_t::on_register_custom_schemes() function in all processes. This\n function may be called multiple times to change or remove the factory that\n matches the specified |scheme_name| and optional |domain_name|. Returns\n false (0) if an error occurs. This function may be called on any thread in\n the browser process. Using this function is equivalent to calling cef_reques\n t_context_t::cef_request_context_get_global_context()->register_scheme_handl\n er_factory().\n"]
    pub fn cef_register_scheme_handler_factory(
        scheme_name: *const cef_string_t,
        domain_name: *const cef_string_t,
        factory: *mut cef_scheme_handler_factory_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Clear all scheme handler factories registered with the global request\n context. Returns false (0) on error. This function may be called on any\n thread in the browser process. Using this function is equivalent to calling\n cef_request_context_t::cef_request_context_get_global_context()->clear_schem\n e_handler_factories().\n"]
    pub fn cef_clear_scheme_handler_factories() -> ::std::os::raw::c_int;
}
#[doc = "\n Implement this structure to provide handler implementations. Methods will be\n called by the process and/or thread indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_app_t {
    #[doc = "\n Base structure.\n"]
    pub base:                              cef_base_ref_counted_t,
    #[doc = "\n Provides an opportunity to view and/or modify command-line arguments\n before processing by CEF and Chromium. The |process_type| value will be\n NULL for the browser process. Do not keep a reference to the\n cef_command_line_t object passed to this function. The\n cef_settings_t.command_line_args_disabled value can be used to start with\n an NULL command-line object. Any values specified in CefSettings that\n equate to command-line arguments will be set before this function is\n called. Be cautious when using this function to modify command-line\n arguments for non-browser processes as this may result in undefined\n behavior including crashes.\n"]
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t
        )
    >,
    #[doc = "\n Provides an opportunity to register custom schemes. Do not keep a\n reference to the |registrar| object. This function is called on the main\n thread for each process and the registered schemes should be the same\n across all processes.\n"]
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t)
    >,
    #[doc = "\n Return the handler for resource bundle events. If\n cef_settings_t.pack_loading_disabled is true (1) a handler must be\n returned. If no handler is returned resources will be loaded from pack\n files. This function is called by the browser and render processes on\n multiple threads.\n"]
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t
    >,
    #[doc = "\n Return the handler for functionality specific to the browser process. This\n function is called on multiple threads in the browser process.\n"]
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t
    >,
    #[doc = "\n Return the handler for functionality specific to the render process. This\n function is called on the render process main thread.\n"]
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t
    >
}
#[doc = "\n Implement this structure to provide handler implementations. Methods will be\n called by the process and/or thread indicated.\n"]
pub type cef_app_t = _cef_app_t;
extern "C" {
    #[doc = "\n This function should be called from the application entry point function to\n execute a secondary process. It can be used to run secondary processes from\n the browser client executable (default behavior) or from a separate\n executable specified by the cef_settings_t.browser_subprocess_path value. If\n called for the browser process (identified by no \"type\" command-line value)\n it will return immediately with a value of -1. If called for a recognized\n secondary process it will block until the process should exit and then\n return the process exit code. The |application| parameter may be NULL. The\n |windows_sandbox_info| parameter is only used on Windows and may be NULL\n (see cef_sandbox_win.h for details).\n"]
    pub fn cef_execute_process(
        args: *const cef_main_args_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n This function should be called on the main application thread to initialize\n the CEF browser process. The |application| parameter may be NULL. Returns\n true (1) if initialization succeeds. Returns false (0) if initialization\n fails or if early exit is desired (for example, due to process singleton\n relaunch behavior). If this function returns false (0) then the application\n should exit immediately without calling any other CEF functions. The\n |windows_sandbox_info| parameter is only used on Windows and may be NULL\n (see cef_sandbox_win.h for details).\n"]
    pub fn cef_initialize(
        args: *const cef_main_args_t,
        settings: *const _cef_settings_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n This function should be called on the main application thread to shut down\n the CEF browser process before the application exits. Do not call any other\n CEF functions after calling this function.\n"]
    pub fn cef_shutdown();
}
extern "C" {
    #[doc = "\n Perform a single iteration of CEF message loop processing. This function is\n provided for cases where the CEF message loop must be integrated into an\n existing application message loop. Use of this function is not recommended\n for most users; use either the cef_run_message_loop() function or\n cef_settings_t.multi_threaded_message_loop if possible. When using this\n function care must be taken to balance performance against excessive CPU\n usage. It is recommended to enable the cef_settings_t.external_message_pump\n option when using this function so that\n cef_browser_process_handler_t::on_schedule_message_pump_work() callbacks can\n facilitate the scheduling process. This function should only be called on\n the main application thread and only if cef_initialize() is called with a\n cef_settings_t.multi_threaded_message_loop value of false (0). This function\n will not block.\n"]
    pub fn cef_do_message_loop_work();
}
extern "C" {
    #[doc = "\n Run the CEF message loop. Use this function instead of an application-\n provided message loop to get the best balance between performance and CPU\n usage. This function should only be called on the main application thread\n and only if cef_initialize() is called with a\n cef_settings_t.multi_threaded_message_loop value of false (0). This function\n will block until a quit message is received by the system.\n"]
    pub fn cef_run_message_loop();
}
extern "C" {
    #[doc = "\n Quit the CEF message loop that was started by calling\n cef_run_message_loop(). This function should only be called on the main\n application thread and only if cef_run_message_loop() was used.\n"]
    pub fn cef_quit_message_loop();
}
extern "C" {
    #[doc = "\n Combines specified |base_url| and |relative_url| into |resolved_url|.\n Returns false (0) if one of the URLs is NULL or invalid.\n"]
    pub fn cef_resolve_url(
        base_url: *const cef_string_t,
        relative_url: *const cef_string_t,
        resolved_url: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Parse the specified |url| into its component parts. Returns false (0) if the\n URL is NULL or invalid.\n"]
    pub fn cef_parse_url(
        url: *const cef_string_t,
        parts: *mut _cef_urlparts_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Creates a URL from the specified |parts|, which must contain a non-NULL spec\n or a non-NULL host and path (at a minimum), but not both. Returns false (0)\n if |parts| isn't initialized as described.\n"]
    pub fn cef_create_url(
        parts: *const _cef_urlparts_t,
        url: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n This is a convenience function for formatting a URL in a concise and human-\n friendly way to help users make security-related decisions (or in other\n circumstances when people need to distinguish sites, origins, or otherwise-\n simplified URLs from each other). Internationalized domain names (IDN) may\n be presented in Unicode if the conversion is considered safe. The returned\n value will (a) omit the path for standard schemes, excepting file and\n filesystem, and (b) omit the port if it is the default for the scheme. Do\n not use this for URLs which will be parsed or sent to other applications.\n"]
    pub fn cef_format_url_for_security_display(
        origin_url: *const cef_string_t
    ) -> cef_string_userfree_t;
}
extern "C" {
    #[doc = "\n Returns the mime type for the specified file extension or an NULL string if\n unknown.\n"]
    pub fn cef_get_mime_type(extension: *const cef_string_t) -> cef_string_userfree_t;
}
extern "C" {
    #[doc = "\n Get the extensions associated with the given mime type. This should be\n passed in lower case. There could be multiple extensions for a given mime\n type, like \"html,htm\" for \"text/html\", or \"txt,text,html,...\" for \"text/*\".\n Any existing elements in the provided vector will not be erased.\n"]
    pub fn cef_get_extensions_for_mime_type(
        mime_type: *const cef_string_t,
        extensions: cef_string_list_t
    );
}
extern "C" {
    #[doc = "\n Encodes |data| as a base64 string.\n"]
    pub fn cef_base64encode(
        data: *const ::std::os::raw::c_void,
        data_size: usize
    ) -> cef_string_userfree_t;
}
extern "C" {
    #[doc = "\n Decodes the base64 encoded string |data|. The returned value will be NULL if\n the decoding fails.\n"]
    pub fn cef_base64decode(data: *const cef_string_t) -> *mut _cef_binary_value_t;
}
extern "C" {
    #[doc = "\n Escapes characters in |text| which are unsuitable for use as a query\n parameter value. Everything except alphanumerics and -_.!~*'() will be\n converted to \"%XX\". If |use_plus| is true (1) spaces will change to \"+\". The\n result is basically the same as encodeURIComponent in Javacript.\n"]
    pub fn cef_uriencode(
        text: *const cef_string_t,
        use_plus: ::std::os::raw::c_int
    ) -> cef_string_userfree_t;
}
extern "C" {
    #[doc = "\n Unescapes |text| and returns the result. Unescaping consists of looking for\n the exact pattern \"%XX\" where each X is a hex digit and converting to the\n character with the numerical value of those digits (e.g. \"i%20=%203%3b\"\n unescapes to \"i = 3;\"). If |convert_to_utf8| is true (1) this function will\n attempt to interpret the initial decoded result as UTF-8. If the result is\n convertable into UTF-8 it will be returned as converted. Otherwise the\n initial decoded result will be returned.  The |unescape_rule| parameter\n supports further customization the decoding process.\n"]
    pub fn cef_uridecode(
        text: *const cef_string_t,
        convert_to_utf8: ::std::os::raw::c_int,
        unescape_rule: cef_uri_unescape_rule_t
    ) -> cef_string_userfree_t;
}
extern "C" {
    #[doc = "\n Parses the specified |json_string| and returns a dictionary or list\n representation. If JSON parsing fails this function returns NULL.\n"]
    pub fn cef_parse_json(
        json_string: *const cef_string_t,
        options: cef_json_parser_options_t
    ) -> *mut _cef_value_t;
}
extern "C" {
    #[doc = "\n Parses the specified UTF8-encoded |json| buffer of size |json_size| and\n returns a dictionary or list representation. If JSON parsing fails this\n function returns NULL.\n"]
    pub fn cef_parse_json_buffer(
        json: *const ::std::os::raw::c_void,
        json_size: usize,
        options: cef_json_parser_options_t
    ) -> *mut _cef_value_t;
}
extern "C" {
    #[doc = "\n Parses the specified |json_string| and returns a dictionary or list\n representation. If JSON parsing fails this function returns NULL and\n populates |error_msg_out| with a formatted error message.\n"]
    pub fn cef_parse_jsonand_return_error(
        json_string: *const cef_string_t,
        options: cef_json_parser_options_t,
        error_msg_out: *mut cef_string_t
    ) -> *mut _cef_value_t;
}
extern "C" {
    #[doc = "\n Generates a JSON string from the specified root |node| which should be a\n dictionary or list value. Returns an NULL string on failure. This function\n requires exclusive access to |node| including any underlying data.\n"]
    pub fn cef_write_json(
        node: *mut _cef_value_t,
        options: cef_json_writer_options_t
    ) -> cef_string_userfree_t;
}
#[doc = "\n Implement this structure to receive notification when tracing has completed.\n The functions of this structure will be called on the browser process UI\n thread.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_end_tracing_callback_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Called after all processes have sent their trace data. |tracing_file| is\n the path at which tracing data was written. The client is responsible for\n deleting |tracing_file|.\n"]
    pub on_end_tracing_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_end_tracing_callback_t,
            tracing_file: *const cef_string_t
        )
    >
}
#[doc = "\n Implement this structure to receive notification when tracing has completed.\n The functions of this structure will be called on the browser process UI\n thread.\n"]
pub type cef_end_tracing_callback_t = _cef_end_tracing_callback_t;
extern "C" {
    #[doc = "\n Start tracing events on all processes. Tracing is initialized asynchronously\n and |callback| will be executed on the UI thread after initialization is\n complete.\n\n If CefBeginTracing was called previously, or if a CefEndTracingAsync call is\n pending, CefBeginTracing will fail and return false (0).\n\n |categories| is a comma-delimited list of category wildcards. A category can\n have an optional '-' prefix to make it an excluded category. Having both\n included and excluded categories in the same list is not supported.\n\n Examples:\n - \"test_MyTest*\"\n - \"test_MyTest*,test_OtherStuff\"\n - \"-excluded_category1,-excluded_category2\"\n\n This function must be called on the browser process UI thread.\n"]
    pub fn cef_begin_tracing(
        categories: *const cef_string_t,
        callback: *mut _cef_completion_callback_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Stop tracing events on all processes.\n\n This function will fail and return false (0) if a previous call to\n CefEndTracingAsync is already pending or if CefBeginTracing was not called.\n\n |tracing_file| is the path at which tracing data will be written and\n |callback| is the callback that will be executed once all processes have\n sent their trace data. If |tracing_file| is NULL a new temporary file path\n will be used. If |callback| is NULL no trace data will be written.\n\n This function must be called on the browser process UI thread.\n"]
    pub fn cef_end_tracing(
        tracing_file: *const cef_string_t,
        callback: *mut cef_end_tracing_callback_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Returns the current system trace time or, if none is defined, the current\n high-res time. Can be used by clients to synchronize with the time\n information in trace events.\n"]
    pub fn cef_now_from_system_trace_time() -> i64;
}
extern "C" {
    #[doc = "\n Retrieve the path associated with the specified |key|. Returns true (1) on\n success. Can be called on any thread in the browser process.\n"]
    pub fn cef_get_path(key: cef_path_key_t, path: *mut cef_string_t) -> ::std::os::raw::c_int;
}
#[doc = "\n Structure representing a server that supports HTTP and WebSocket requests.\n Server capacity is limited and is intended to handle only a small number of\n simultaneous connections (e.g. for communicating between applications on\n localhost). The functions of this structure are safe to call from any thread\n in the brower process unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_server_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Returns the task runner for the dedicated server thread.\n"]
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> *mut _cef_task_runner_t
    >,
    #[doc = "\n Stop the server and shut down the dedicated server thread. See\n cef_server_handler_t::OnServerCreated documentation for a description of\n server lifespan.\n"]
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_server_t)>,
    #[doc = "\n Returns true (1) if the server is currently running and accepting incoming\n connections. See cef_server_handler_t::OnServerCreated documentation for a\n description of server lifespan. This function must be called on the\n dedicated server thread.\n"]
    pub is_running: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the server address including the port number.\n"]
    pub get_address: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if the server currently has a connection. This function\n must be called on the dedicated server thread.\n"]
    pub has_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if |connection_id| represents a valid connection. This\n function must be called on the dedicated server thread.\n"]
    pub is_valid_connection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Send an HTTP 200 \"OK\" response to the connection identified by\n |connection_id|. |content_type| is the response content type (e.g.\n \"text/html\"), |data| is the response content, and |data_size| is the size\n of |data| in bytes. The contents of |data| will be copied. The connection\n will be closed automatically after the response is sent.\n"]
    pub send_http200response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            content_type: *const cef_string_t,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >,
    #[doc = "\n Send an HTTP 404 \"Not Found\" response to the connection identified by\n |connection_id|. The connection will be closed automatically after the\n response is sent.\n"]
    pub send_http404response: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t, connection_id: ::std::os::raw::c_int)
    >,
    #[doc = "\n Send an HTTP 500 \"Internal Server Error\" response to the connection\n identified by |connection_id|. |error_message| is the associated error\n message. The connection will be closed automatically after the response is\n sent.\n"]
    pub send_http500response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            error_message: *const cef_string_t
        )
    >,
    #[doc = "\n Send a custom HTTP response to the connection identified by\n |connection_id|. |response_code| is the HTTP response code sent in the\n status line (e.g. 200), |content_type| is the response content type sent\n as the \"Content-Type\" header (e.g. \"text/html\"), |content_length| is the\n expected content length, and |extra_headers| is the map of extra response\n headers. If |content_length| is >= 0 then the \"Content-Length\" header will\n be sent. If |content_length| is 0 then no content is expected and the\n connection will be closed automatically after the response is sent. If\n |content_length| is < 0 then no \"Content-Length\" header will be sent and\n the client will continue reading until the connection is closed. Use the\n SendRawData function to send the content, if applicable, and call\n CloseConnection after all content has been sent.\n"]
    pub send_http_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            response_code: ::std::os::raw::c_int,
            content_type: *const cef_string_t,
            content_length: i64,
            extra_headers: cef_string_multimap_t
        )
    >,
    #[doc = "\n Send raw data directly to the connection identified by |connection_id|.\n |data| is the raw data and |data_size| is the size of |data| in bytes. The\n contents of |data| will be copied. No validation of |data| is performed\n internally so the client should be careful to send the amount indicated by\n the \"Content-Length\" header, if specified. See SendHttpResponse\n documentation for intended usage.\n"]
    pub send_raw_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >,
    #[doc = "\n Close the connection identified by |connection_id|. See SendHttpResponse\n documentation for intended usage.\n"]
    pub close_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_t, connection_id: ::std::os::raw::c_int)
    >,
    #[doc = "\n Send a WebSocket message to the connection identified by |connection_id|.\n |data| is the response content and |data_size| is the size of |data| in\n bytes. The contents of |data| will be copied. See\n cef_server_handler_t::OnWebSocketRequest documentation for intended usage.\n"]
    pub send_web_socket_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >
}
#[doc = "\n Structure representing a server that supports HTTP and WebSocket requests.\n Server capacity is limited and is intended to handle only a small number of\n simultaneous connections (e.g. for communicating between applications on\n localhost). The functions of this structure are safe to call from any thread\n in the brower process unless otherwise indicated.\n"]
pub type cef_server_t = _cef_server_t;
extern "C" {
    #[doc = "\n Create a new server that binds to |address| and |port|. |address| must be a\n valid IPv4 or IPv6 address (e.g. 127.0.0.1 or ::1) and |port| must be a port\n number outside of the reserved range (e.g. between 1025 and 65535 on most\n platforms). |backlog| is the maximum number of pending connections. A new\n thread will be created for each CreateServer call (the \"dedicated server\n thread\"). It is therefore recommended to use a different\n cef_server_handler_t instance for each CreateServer call to avoid thread\n safety issues in the cef_server_handler_t implementation. The\n cef_server_handler_t::OnServerCreated function will be called on the\n dedicated server thread to report success or failure. See\n cef_server_handler_t::OnServerCreated documentation for a description of\n server lifespan.\n"]
    pub fn cef_server_create(
        address: *const cef_string_t,
        port: u16,
        backlog: ::std::os::raw::c_int,
        handler: *mut _cef_server_handler_t
    );
}
#[doc = "\n Implement this structure to handle HTTP server requests. A new thread will\n be created for each cef_server_t::CreateServer call (the \"dedicated server\n thread\"), and the functions of this structure will be called on that thread.\n It is therefore recommended to use a different cef_server_handler_t instance\n for each cef_server_t::CreateServer call to avoid thread safety issues in\n the cef_server_handler_t implementation.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_server_handler_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_base_ref_counted_t,
    #[doc = "\n Called when |server| is created. If the server was started successfully\n then cef_server_t::IsRunning will return true (1). The server will\n continue running until cef_server_t::Shutdown is called, after which time\n OnServerDestroyed will be called. If the server failed to start then\n OnServerDestroyed will be called immediately after this function returns.\n"]
    pub on_server_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_handler_t, server: *mut _cef_server_t)
    >,
    #[doc = "\n Called when |server| is destroyed. The server thread will be stopped after\n this function returns. The client should release any references to\n |server| when this function is called. See OnServerCreated documentation\n for a description of server lifespan.\n"]
    pub on_server_destroyed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_server_handler_t, server: *mut _cef_server_t)
    >,
    #[doc = "\n Called when a client connects to |server|. |connection_id| uniquely\n identifies the connection. Each call to this function will have a matching\n call to OnClientDisconnected.\n"]
    pub on_client_connected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when a client disconnects from |server|. |connection_id| uniquely\n identifies the connection. The client should release any data associated\n with |connection_id| when this function is called and |connection_id|\n should no longer be passed to cef_server_t functions. Disconnects can\n originate from either the client or the server. For example, the server\n will disconnect automatically after a cef_server_t::SendHttpXXXResponse\n function is called.\n"]
    pub on_client_disconnected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when |server| receives an HTTP request. |connection_id| uniquely\n identifies the connection, |client_address| is the requesting IPv4 or IPv6\n client address including port number, and |request| contains the request\n contents (URL, function, headers and optional POST data). Call\n cef_server_t functions either synchronously or asynchronusly to send a\n response.\n"]
    pub on_http_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            client_address: *const cef_string_t,
            request: *mut _cef_request_t
        )
    >,
    #[doc = "\n Called when |server| receives a WebSocket request. |connection_id|\n uniquely identifies the connection, |client_address| is the requesting\n IPv4 or IPv6 client address including port number, and |request| contains\n the request contents (URL, function, headers and optional POST data).\n Execute |callback| either synchronously or asynchronously to accept or\n decline the WebSocket connection. If the request is accepted then\n OnWebSocketConnected will be called after the WebSocket has connected and\n incoming messages will be delivered to the OnWebSocketMessage callback. If\n the request is declined then the client will be disconnected and\n OnClientDisconnected will be called. Call the\n cef_server_t::SendWebSocketMessage function after receiving the\n OnWebSocketConnected callback to respond with WebSocket messages.\n"]
    pub on_web_socket_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            client_address: *const cef_string_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t
        )
    >,
    #[doc = "\n Called after the client has accepted the WebSocket connection for |server|\n and |connection_id| via the OnWebSocketRequest callback. See\n OnWebSocketRequest documentation for intended usage.\n"]
    pub on_web_socket_connected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when |server| receives an WebSocket message. |connection_id|\n uniquely identifies the connection, |data| is the message content and\n |data_size| is the size of |data| in bytes. Do not keep a reference to\n |data| outside of this function. See OnWebSocketRequest documentation for\n intended usage.\n"]
    pub on_web_socket_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_server_handler_t,
            server: *mut _cef_server_t,
            connection_id: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            data_size: usize
        )
    >
}
#[doc = "\n Implement this structure to handle HTTP server requests. A new thread will\n be created for each cef_server_t::CreateServer call (the \"dedicated server\n thread\"), and the functions of this structure will be called on that thread.\n It is therefore recommended to use a different cef_server_handler_t instance\n for each cef_server_t::CreateServer call to avoid thread safety issues in\n the cef_server_handler_t implementation.\n"]
pub type cef_server_handler_t = _cef_server_handler_t;
extern "C" {
    #[doc = "\n Add an entry to the cross-origin access whitelist.\n\n The same-origin policy restricts how scripts hosted from different origins\n (scheme + domain + port) can communicate. By default, scripts can only\n access resources with the same origin. Scripts hosted on the HTTP and HTTPS\n schemes (but no other schemes) can use the \"Access-Control-Allow-Origin\"\n header to allow cross-origin requests. For example,\n https://source.example.com can make XMLHttpRequest requests on\n http://target.example.com if the http://target.example.com request returns\n an \"Access-Control-Allow-Origin: https://source.example.com\" response\n header.\n\n Scripts in separate frames or iframes and hosted from the same protocol and\n domain suffix can execute cross-origin JavaScript if both pages set the\n document.domain value to the same domain suffix. For example,\n scheme://foo.example.com and scheme://bar.example.com can communicate using\n JavaScript if both domains set document.domain=\"example.com\".\n\n This function is used to allow access to origins that would otherwise\n violate the same-origin policy. Scripts hosted underneath the fully\n qualified |source_origin| URL (like http://www.example.com) will be allowed\n access to all resources hosted on the specified |target_protocol| and\n |target_domain|. If |target_domain| is non-NULL and\n |allow_target_subdomains| is false (0) only exact domain matches will be\n allowed. If |target_domain| contains a top- level domain component (like\n \"example.com\") and |allow_target_subdomains| is true (1) sub-domain matches\n will be allowed. If |target_domain| is NULL and |allow_target_subdomains| if\n true (1) all domains and IP addresses will be allowed.\n\n This function cannot be used to bypass the restrictions on local or display\n isolated schemes. See the comments on CefRegisterCustomScheme for more\n information.\n\n This function may be called on any thread. Returns false (0) if\n |source_origin| is invalid or the whitelist cannot be accessed.\n"]
    pub fn cef_add_cross_origin_whitelist_entry(
        source_origin: *const cef_string_t,
        target_protocol: *const cef_string_t,
        target_domain: *const cef_string_t,
        allow_target_subdomains: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Remove an entry from the cross-origin access whitelist. Returns false (0) if\n |source_origin| is invalid or the whitelist cannot be accessed.\n"]
    pub fn cef_remove_cross_origin_whitelist_entry(
        source_origin: *const cef_string_t,
        target_protocol: *const cef_string_t,
        target_domain: *const cef_string_t,
        allow_target_subdomains: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Remove all entries from the cross-origin access whitelist. Returns false (0)\n if the whitelist cannot be accessed.\n"]
    pub fn cef_clear_cross_origin_whitelist() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Crash reporting is configured using an INI-style config file named\n \"crash_reporter.cfg\". On Windows and Linux this file must be placed next to\n the main application executable. On macOS this file must be placed in the\n top-level app bundle Resources directory (e.g.\n \"<appname>.app/Contents/Resources\"). File contents are as follows:\n\n <pre>\n  # Comments start with a hash character and must be on their own line.\n\n  [Config]\n  ProductName=<Value of the \"prod\" crash key; defaults to \"cef\">\n  ProductVersion=<Value of the \"ver\" crash key; defaults to the CEF version>\n  AppName=<Windows only; App-specific folder name component for storing crash\n           information; default to \"CEF\">\n  ExternalHandler=<Windows only; Name of the external handler exe to use\n                   instead of re-launching the main exe; default to empty>\n  BrowserCrashForwardingEnabled=<macOS only; True if browser process crashes\n                                 should be forwarded to the system crash\n                                 reporter; default to false>\n  ServerURL=<crash server URL; default to empty>\n  RateLimitEnabled=<True if uploads should be rate limited; default to true>\n  MaxUploadsPerDay=<Max uploads per 24 hours, used if rate limit is enabled;\n                    default to 5>\n  MaxDatabaseSizeInMb=<Total crash report disk usage greater than this value\n                       will cause older reports to be deleted; default to 20>\n  MaxDatabaseAgeInDays=<Crash reports older than this value will be deleted;\n                        default to 5>\n\n  [CrashKeys]\n  my_key1=<small|medium|large>\n  my_key2=<small|medium|large>\n </pre>\n\n <b>Config section:</b>\n\n If \"ProductName\" and/or \"ProductVersion\" are set then the specified values\n will be included in the crash dump metadata. On macOS if these values are\n set to NULL then they will be retrieved from the Info.plist file using the\n \"CFBundleName\" and \"CFBundleShortVersionString\" keys respectively.\n\n If \"AppName\" is set on Windows then crash report information (metrics,\n database and dumps) will be stored locally on disk under the\n \"C:\\Users\\[CurrentUser]\\AppData\\Local\\[AppName]\\User Data\" folder. On other\n platforms the cef_settings_t.root_cache_path value will be used.\n\n If \"ExternalHandler\" is set on Windows then the specified exe will be\n launched as the crashpad-handler instead of re-launching the main process\n exe. The value can be an absolute path or a path relative to the main exe\n directory. On Linux the cef_settings_t.browser_subprocess_path value will be\n used. On macOS the existing subprocess app bundle will be used.\n\n If \"BrowserCrashForwardingEnabled\" is set to true (1) on macOS then browser\n process crashes will be forwarded to the system crash reporter. This results\n in the crash UI dialog being displayed to the user and crash reports being\n logged under \"~/Library/Logs/DiagnosticReports\". Forwarding of crash reports\n from non-browser processes and Debug builds is always disabled.\n\n If \"ServerURL\" is set then crashes will be uploaded as a multi-part POST\n request to the specified URL. Otherwise, reports will only be stored locally\n on disk.\n\n If \"RateLimitEnabled\" is set to true (1) then crash report uploads will be\n rate limited as follows:\n  1. If \"MaxUploadsPerDay\" is set to a positive value then at most the\n     specified number of crashes will be uploaded in each 24 hour period.\n  2. If crash upload fails due to a network or server error then an\n     incremental backoff delay up to a maximum of 24 hours will be applied\n     for retries.\n  3. If a backoff delay is applied and \"MaxUploadsPerDay\" is > 1 then the\n     \"MaxUploadsPerDay\" value will be reduced to 1 until the client is\n     restarted. This helps to avoid an upload flood when the network or\n     server error is resolved.\n Rate limiting is not supported on Linux.\n\n If \"MaxDatabaseSizeInMb\" is set to a positive value then crash report\n storage on disk will be limited to that size in megabytes. For example, on\n Windows each dump is about 600KB so a \"MaxDatabaseSizeInMb\" value of 20\n equates to about 34 crash reports stored on disk. Not supported on Linux.\n\n If \"MaxDatabaseAgeInDays\" is set to a positive value then crash reports\n older than the specified age in days will be deleted. Not supported on\n Linux.\n\n <b>CrashKeys section:</b>\n\n A maximum of 26 crash keys of each size can be specified for use by the\n application. Crash key values will be truncated based on the specified size\n (small = 64 bytes, medium = 256 bytes, large = 1024 bytes). The value of\n crash keys can be set from any thread or process using the\n CefSetCrashKeyValue function. These key/value pairs will be sent to the\n crash server along with the crash dump file.\n"]
    pub fn cef_crash_reporting_enabled() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Sets or clears a specific key-value pair from the crash metadata.\n"]
    pub fn cef_set_crash_key_value(key: *const cef_string_t, value: *const cef_string_t);
}
extern "C" {
    #[doc = "\n Launches the process specified via |command_line|. Returns true (1) upon\n success. Must be called on the browser process TID_PROCESS_LAUNCHER thread.\n\n Unix-specific notes:\n - All file descriptors open in the parent process will be closed in the\n   child process except for stdin, stdout, and stderr.\n - If the first argument on the command line does not contain a slash, PATH\n   will be searched. (See man execvp.)\n"]
    pub fn cef_launch_process(command_line: *mut _cef_command_line_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Returns true (1) if the application text direction is right-to-left.\n"]
    pub fn cef_is_rtl() -> ::std::os::raw::c_int;
}
#[doc = "\n Structure that supports the reading of zip archives via the zlib unzip API.\n The functions of this structure should only be called on the thread that\n creates the object.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_zip_reader_t {
    #[doc = "\n Base structure.\n"]
    pub base:                   cef_base_ref_counted_t,
    #[doc = "\n Moves the cursor to the first file in the archive. Returns true (1) if the\n cursor position was set successfully.\n"]
    pub move_to_first_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the next file in the archive. Returns true (1) if the\n cursor position was set successfully.\n"]
    pub move_to_next_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Moves the cursor to the specified file in the archive. If |caseSensitive|\n is true (1) then the search will be case sensitive. Returns true (1) if\n the cursor position was set successfully.\n"]
    pub move_to_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_zip_reader_t,
            fileName: *const cef_string_t,
            caseSensitive: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Closes the archive. This should be called directly to ensure that cleanup\n occurs on the correct thread.\n"]
    pub close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the name of the file.\n"]
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns the uncompressed size of the file.\n"]
    pub get_file_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> i64>,
    #[doc = "\n Returns the last modified timestamp for the file.\n"]
    pub get_file_last_modified: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> cef_basetime_t
    >,
    #[doc = "\n Opens the file for reading of uncompressed data. A read password may\n optionally be specified.\n"]
    pub open_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_zip_reader_t,
            password: *const cef_string_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Closes the file.\n"]
    pub close_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Read uncompressed file contents into the specified buffer. Returns < 0 if\n an error occurred, 0 if at the end of file, or the number of bytes read.\n"]
    pub read_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_zip_reader_t,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: usize
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the current offset in the uncompressed file contents.\n"]
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> i64>,
    #[doc = "\n Returns true (1) if at end of the file contents.\n"]
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_zip_reader_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Structure that supports the reading of zip archives via the zlib unzip API.\n The functions of this structure should only be called on the thread that\n creates the object.\n"]
pub type cef_zip_reader_t = _cef_zip_reader_t;
extern "C" {
    #[doc = "\n Create a new cef_zip_reader_t object. The returned object's functions can\n only be called from the thread that created the object.\n"]
    pub fn cef_zip_reader_create(stream: *mut _cef_stream_reader_t) -> *mut cef_zip_reader_t;
}
extern "C" {
    #[doc = "\n Creates a directory and all parent directories if they don't already exist.\n Returns true (1) on successful creation or if the directory already exists.\n The directory is only readable by the current user. Calling this function on\n the browser process UI or IO threads is not allowed.\n"]
    pub fn cef_create_directory(full_path: *const cef_string_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Get the temporary directory provided by the system.\n\n WARNING: In general, you should use the temp directory variants below\n instead of this function. Those variants will ensure that the proper\n permissions are set so that other users on the system can't edit them while\n they're open (which could lead to security issues).\n"]
    pub fn cef_get_temp_directory(temp_dir: *mut cef_string_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Creates a new directory. On Windows if |prefix| is provided the new\n directory name is in the format of \"prefixyyyy\". Returns true (1) on success\n and sets |new_temp_path| to the full path of the directory that was created.\n The directory is only readable by the current user. Calling this function on\n the browser process UI or IO threads is not allowed.\n"]
    pub fn cef_create_new_temp_directory(
        prefix: *const cef_string_t,
        new_temp_path: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Creates a directory within another directory. Extra characters will be\n appended to |prefix| to ensure that the new directory does not have the same\n name as an existing directory. Returns true (1) on success and sets\n |new_dir| to the full path of the directory that was created. The directory\n is only readable by the current user. Calling this function on the browser\n process UI or IO threads is not allowed.\n"]
    pub fn cef_create_temp_directory_in_directory(
        base_dir: *const cef_string_t,
        prefix: *const cef_string_t,
        new_dir: *mut cef_string_t
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Returns true (1) if the given path exists and is a directory. Calling this\n function on the browser process UI or IO threads is not allowed.\n"]
    pub fn cef_directory_exists(path: *const cef_string_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Deletes the given path whether it's a file or a directory. If |path| is a\n directory all contents will be deleted.  If |recursive| is true (1) any sub-\n directories and their contents will also be deleted (equivalent to executing\n \"rm -rf\", so use with caution). On POSIX environments if |path| is a\n symbolic link then only the symlink will be deleted. Returns true (1) on\n successful deletion or if |path| does not exist. Calling this function on\n the browser process UI or IO threads is not allowed.\n"]
    pub fn cef_delete_file(
        path: *const cef_string_t,
        recursive: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Writes the contents of |src_dir| into a zip archive at |dest_file|. If\n |include_hidden_files| is true (1) files starting with \".\" will be included.\n Returns true (1) on success.  Calling this function on the browser process\n UI or IO threads is not allowed.\n"]
    pub fn cef_zip_directory(
        src_dir: *const cef_string_t,
        dest_file: *const cef_string_t,
        include_hidden_files: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\n Loads the existing \"Certificate Revocation Lists\" file that is managed by\n Google Chrome. This file can generally be found in Chrome's User Data\n directory (e.g. \"C:\\Users\\[User]\\AppData\\Local\\Google\\Chrome\\User Data\\\" on\n Windows) and is updated periodically by Chrome's component updater service.\n Must be called in the browser process after the context has been\n initialized. See https://dev.chromium.org/Home/chromium-security/crlsets for\n background.\n"]
    pub fn cef_load_crlsets_file(path: *const cef_string_t);
}
#[doc = "\n This structure typically, but not always, corresponds to a physical display\n connected to the system. A fake Display may exist on a headless system, or a\n Display may correspond to a remote, virtual display. All size and position\n values are in density independent pixel (DIP) coordinates unless otherwise\n indicated. Methods must be called on the browser process UI thread unless\n otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_display_t {
    #[doc = "\n Base structure.\n"]
    pub base:                      cef_base_ref_counted_t,
    #[doc = "\n Returns the unique identifier for this Display.\n"]
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> i64>,
    #[doc = "\n Returns this Display's device pixel scale factor. This specifies how much\n the UI should be scaled when the actual output has more pixels than\n standard displays (which is around 100~120dpi). The potential return\n values differ by platform.\n"]
    pub get_device_scale_factor:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> f32>,
    #[doc = "\n Convert |point| from DIP coordinates to pixel coordinates using this\n Display's device scale factor.\n"]
    pub convert_point_to_pixels: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t, point: *mut cef_point_t)
    >,
    #[doc = "\n Convert |point| from pixel coordinates to DIP coordinates using this\n Display's device scale factor.\n"]
    pub convert_point_from_pixels: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t, point: *mut cef_point_t)
    >,
    #[doc = "\n Returns this Display's bounds in DIP screen coordinates. This is the full\n size of the display.\n"]
    pub get_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> cef_rect_t>,
    #[doc = "\n Returns this Display's work area in DIP screen coordinates. This excludes\n areas of the display that are occupied with window manager toolbars, etc.\n"]
    pub get_work_area:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> cef_rect_t>,
    #[doc = "\n Returns this Display's rotation in degrees.\n"]
    pub get_rotation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n This structure typically, but not always, corresponds to a physical display\n connected to the system. A fake Display may exist on a headless system, or a\n Display may correspond to a remote, virtual display. All size and position\n values are in density independent pixel (DIP) coordinates unless otherwise\n indicated. Methods must be called on the browser process UI thread unless\n otherwise indicated.\n"]
pub type cef_display_t = _cef_display_t;
extern "C" {
    #[doc = "\n Returns the primary Display.\n"]
    pub fn cef_display_get_primary() -> *mut cef_display_t;
}
extern "C" {
    #[doc = "\n Returns the Display nearest |point|. Set |input_pixel_coords| to true (1) if\n |point| is in pixel screen coordinates instead of DIP screen coordinates.\n"]
    pub fn cef_display_get_nearest_point(
        point: *const cef_point_t,
        input_pixel_coords: ::std::os::raw::c_int
    ) -> *mut cef_display_t;
}
extern "C" {
    #[doc = "\n Returns the Display that most closely intersects |bounds|.  Set\n |input_pixel_coords| to true (1) if |bounds| is in pixel screen coordinates\n instead of DIP screen coordinates.\n"]
    pub fn cef_display_get_matching_bounds(
        bounds: *const cef_rect_t,
        input_pixel_coords: ::std::os::raw::c_int
    ) -> *mut cef_display_t;
}
extern "C" {
    #[doc = "\n Returns the total number of Displays. Mirrored displays are excluded; this\n function is intended to return the number of distinct, usable displays.\n"]
    pub fn cef_display_get_count() -> usize;
}
extern "C" {
    #[doc = "\n Returns all Displays. Mirrored displays are excluded; this function is\n intended to return distinct, usable displays.\n"]
    pub fn cef_display_get_alls(displaysCount: *mut usize, displays: *mut *mut cef_display_t);
}
extern "C" {
    #[doc = "\n Convert |point| from DIP screen coordinates to pixel screen coordinates.\n This function is only used on Windows.\n"]
    pub fn cef_display_convert_screen_point_to_pixels(point: *const cef_point_t) -> cef_point_t;
}
extern "C" {
    #[doc = "\n Convert |point| from pixel screen coordinates to DIP screen coordinates.\n This function is only used on Windows.\n"]
    pub fn cef_display_convert_screen_point_from_pixels(point: *const cef_point_t) -> cef_point_t;
}
extern "C" {
    #[doc = "\n Convert |rect| from DIP screen coordinates to pixel screen coordinates. This\n function is only used on Windows.\n"]
    pub fn cef_display_convert_screen_rect_to_pixels(rect: *const cef_rect_t) -> cef_rect_t;
}
extern "C" {
    #[doc = "\n Convert |rect| from pixel screen coordinates to DIP screen coordinates. This\n function is only used on Windows.\n"]
    pub fn cef_display_convert_screen_rect_from_pixels(rect: *const cef_rect_t) -> cef_rect_t;
}
#[doc = "\n Controller for an overlay that contains a contents View added via\n cef_window_t::AddOverlayView. Methods exposed by this controller should be\n called in preference to functions of the same name exposed by the contents\n View unless otherwise indicated. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_overlay_controller_t {
    #[doc = "\n Base structure.\n"]
    pub base:                   cef_base_ref_counted_t,
    #[doc = "\n Returns true (1) if this object is valid.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this object is the same as |that| object.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_overlay_controller_t,
            that: *mut _cef_overlay_controller_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the contents View for this overlay.\n"]
    pub get_contents_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> *mut _cef_view_t
    >,
    #[doc = "\n Returns the top-level Window hosting this overlay. Use this function\n instead of calling get_window() on the contents View.\n"]
    pub get_window: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> *mut _cef_window_t
    >,
    #[doc = "\n Returns the docking mode for this overlay.\n"]
    pub get_docking_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_docking_mode_t
    >,
    #[doc = "\n Destroy this overlay.\n"]
    pub destroy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t)>,
    #[doc = "\n Sets the bounds (size and position) of this overlay. This will set the\n bounds of the contents View to match and trigger a re-layout if necessary.\n |bounds| is in parent coordinates and any insets configured on this\n overlay will be ignored. Use this function only for overlays created with\n a docking mode value of CEF_DOCKING_MODE_CUSTOM. With other docking modes\n modify the insets of this overlay and/or layout of the contents View and\n call size_to_preferred_size() instead to calculate the new size and re-\n position the overlay if necessary.\n"]
    pub set_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, bounds: *const cef_rect_t)
    >,
    #[doc = "\n Returns the bounds (size and position) of this overlay in parent\n coordinates.\n"]
    pub get_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_rect_t
    >,
    #[doc = "\n Returns the bounds (size and position) of this overlay in DIP screen\n coordinates.\n"]
    pub get_bounds_in_screen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_rect_t
    >,
    #[doc = "\n Sets the size of this overlay without changing the position. This will set\n the size of the contents View to match and trigger a re-layout if\n necessary. |size| is in parent coordinates and any insets configured on\n this overlay will be ignored. Use this function only for overlays created\n with a docking mode value of CEF_DOCKING_MODE_CUSTOM. With other docking\n modes modify the insets of this overlay and/or layout of the contents View\n and call size_to_preferred_size() instead to calculate the new size and\n re-position the overlay if necessary.\n"]
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, size: *const cef_size_t)
    >,
    #[doc = "\n Returns the size of this overlay in parent coordinates.\n"]
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_size_t
    >,
    #[doc = "\n Sets the position of this overlay without changing the size. |position| is\n in parent coordinates and any insets configured on this overlay will be\n ignored. Use this function only for overlays created with a docking mode\n value of CEF_DOCKING_MODE_CUSTOM. With other docking modes modify the\n insets of this overlay and/or layout of the contents View and call\n size_to_preferred_size() instead to calculate the new size and re-position\n the overlay if necessary.\n"]
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, position: *const cef_point_t)
    >,
    #[doc = "\n Returns the position of this overlay in parent coordinates.\n"]
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_point_t
    >,
    #[doc = "\n Sets the insets for this overlay. |insets| is in parent coordinates. Use\n this function only for overlays created with a docking mode value other\n than CEF_DOCKING_MODE_CUSTOM.\n"]
    pub set_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, insets: *const cef_insets_t)
    >,
    #[doc = "\n Returns the insets for this overlay in parent coordinates.\n"]
    pub get_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_insets_t
    >,
    #[doc = "\n Size this overlay to its preferred size and trigger a re-layout if\n necessary. The position of overlays created with a docking mode value of\n CEF_DOCKING_MODE_CUSTOM will not be modified by calling this function.\n With other docking modes this function may re-position the overlay if\n necessary to accommodate the new size and any insets configured on the\n contents View.\n"]
    pub size_to_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t)>,
    #[doc = "\n Sets whether this overlay is visible. Overlays are hidden by default. If\n this overlay is hidden then it and any child Views will not be drawn and,\n if any of those Views currently have focus, then focus will also be\n cleared. Painting is scheduled as needed.\n"]
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, visible: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns whether this overlay is visible. A View may be visible but still\n not drawn in a Window if any parent Views are hidden. Call is_drawn() to\n determine whether this overlay and all parent Views are visible and will\n be drawn.\n"]
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns whether this overlay is visible and drawn in a Window. A View is\n drawn if it and all parent Views are visible. To determine if the\n containing Window is visible to the user on-screen call is_visible() on\n the Window.\n"]
    pub is_drawn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Controller for an overlay that contains a contents View added via\n cef_window_t::AddOverlayView. Methods exposed by this controller should be\n called in preference to functions of the same name exposed by the contents\n View unless otherwise indicated. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
pub type cef_overlay_controller_t = _cef_overlay_controller_t;
#[doc = "\n Implement this structure to handle view events. All size and position values\n are in density independent pixels (DIP) unless otherwise indicated. The\n functions of this structure will be called on the browser process UI thread\n unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_view_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                   cef_base_ref_counted_t,
    #[doc = "\n Return the preferred size for |view|. The Layout will use this information\n to determine the display size.\n"]
    pub get_preferred_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t
        ) -> cef_size_t
    >,
    #[doc = "\n Return the minimum size for |view|.\n"]
    pub get_minimum_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t
        ) -> cef_size_t
    >,
    #[doc = "\n Return the maximum size for |view|.\n"]
    pub get_maximum_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t
        ) -> cef_size_t
    >,
    #[doc = "\n Return the height necessary to display |view| with the provided |width|.\n If not specified the result of get_preferred_size().height will be used by\n default. Override if |view|'s preferred height depends upon the width (for\n example, with Labels).\n"]
    pub get_height_for_width: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            width: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when the parent of |view| has changed. If |view| is being added to\n |parent| then |added| will be true (1). If |view| is being removed from\n |parent| then |added| will be false (0). If |view| is being reparented the\n remove notification will be sent before the add notification. Do not\n modify the view hierarchy in this callback.\n"]
    pub on_parent_view_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
            parent: *mut _cef_view_t
        )
    >,
    #[doc = "\n Called when a child of |view| has changed. If |child| is being added to\n |view| then |added| will be true (1). If |child| is being removed from\n |view| then |added| will be false (0). If |child| is being reparented the\n remove notification will be sent to the old parent before the add\n notification is sent to the new parent. Do not modify the view hierarchy\n in this callback.\n"]
    pub on_child_view_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
            child: *mut _cef_view_t
        )
    >,
    #[doc = "\n Called when |view| is added or removed from the cef_window_t.\n"]
    pub on_window_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when the layout of |view| has changed.\n"]
    pub on_layout_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            new_bounds: *const cef_rect_t
        )
    >,
    #[doc = "\n Called when |view| gains focus.\n"]
    pub on_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_delegate_t, view: *mut _cef_view_t)
    >,
    #[doc = "\n Called when |view| loses focus.\n"]
    pub on_blur: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_delegate_t, view: *mut _cef_view_t)
    >
}
#[doc = "\n Implement this structure to handle view events. All size and position values\n are in density independent pixels (DIP) unless otherwise indicated. The\n functions of this structure will be called on the browser process UI thread\n unless otherwise indicated.\n"]
pub type cef_view_delegate_t = _cef_view_delegate_t;
#[doc = "\n Implement this structure to handle Panel events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_panel_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_view_delegate_t
}
#[doc = "\n Implement this structure to handle Panel events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_panel_delegate_t = _cef_panel_delegate_t;
#[doc = "\n A View is a rectangle within the views View hierarchy. It is the base\n structure for all Views. All size and position values are in density\n independent pixels (DIP) unless otherwise indicated. Methods must be called\n on the browser process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_view_t {
    #[doc = "\n Base structure.\n"]
    pub base:                       cef_base_ref_counted_t,
    #[doc = "\n Returns this View as a BrowserView or NULL if this is not a BrowserView.\n"]
    pub as_browser_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_browser_view_t
    >,
    #[doc = "\n Returns this View as a Button or NULL if this is not a Button.\n"]
    pub as_button:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_button_t>,
    #[doc = "\n Returns this View as a Panel or NULL if this is not a Panel.\n"]
    pub as_panel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_panel_t>,
    #[doc = "\n Returns this View as a ScrollView or NULL if this is not a ScrollView.\n"]
    pub as_scroll_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_scroll_view_t
    >,
    #[doc = "\n Returns this View as a Textfield or NULL if this is not a Textfield.\n"]
    pub as_textfield: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_textfield_t
    >,
    #[doc = "\n Returns the type of this View as a string. Used primarily for testing\n purposes.\n"]
    pub get_type_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns a string representation of this View which includes the type and\n various type-specific identifying attributes. If |include_children| is\n true (1) any child Views will also be included. Used primarily for testing\n purposes.\n"]
    pub to_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            include_children: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns true (1) if this View is valid.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this View is currently attached to another View. A\n View can only be attached to one View at a time.\n"]
    pub is_attached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if this View is the same as |that| View.\n"]
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            that: *mut _cef_view_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the delegate associated with this View, if any.\n"]
    pub get_delegate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_view_delegate_t
    >,
    #[doc = "\n Returns the top-level Window hosting this View, if any.\n"]
    pub get_window:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_window_t>,
    #[doc = "\n Returns the ID for this View.\n"]
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets the ID for this View. ID should be unique within the subtree that you\n intend to search for it. 0 is the default ID for views.\n"]
    pub set_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, id: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns the group id of this View, or -1 if not set.\n"]
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n A group id is used to tag Views which are part of the same logical group.\n Focus can be moved between views with the same group using the arrow keys.\n The group id is immutable once it's set.\n"]
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, group_id: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns the View that contains this View, if any.\n"]
    pub get_parent_view:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_view_t>,
    #[doc = "\n Recursively descends the view tree starting at this View, and returns the\n first child that it encounters with the given ID. Returns NULL if no\n matching child view is found.\n"]
    pub get_view_for_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            id: ::std::os::raw::c_int
        ) -> *mut _cef_view_t
    >,
    #[doc = "\n Sets the bounds (size and position) of this View. |bounds| is in parent\n coordinates, or DIP screen coordinates if there is no parent.\n"]
    pub set_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, bounds: *const cef_rect_t)
    >,
    #[doc = "\n Returns the bounds (size and position) of this View in parent coordinates,\n or DIP screen coordinates if there is no parent.\n"]
    pub get_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_rect_t>,
    #[doc = "\n Returns the bounds (size and position) of this View in DIP screen\n coordinates.\n"]
    pub get_bounds_in_screen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_rect_t>,
    #[doc = "\n Sets the size of this View without changing the position. |size| in parent\n coordinates, or DIP screen coordinates if there is no parent.\n"]
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, size: *const cef_size_t)
    >,
    #[doc = "\n Returns the size of this View in parent coordinates, or DIP screen\n coordinates if there is no parent.\n"]
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    #[doc = "\n Sets the position of this View without changing the size. |position| is in\n parent coordinates, or DIP screen coordinates if there is no parent.\n"]
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, position: *const cef_point_t)
    >,
    #[doc = "\n Returns the position of this View. Position is in parent coordinates, or\n DIP screen coordinates if there is no parent.\n"]
    pub get_position:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_point_t>,
    #[doc = "\n Sets the insets for this View. |insets| is in parent coordinates, or DIP\n screen coordinates if there is no parent.\n"]
    pub set_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, insets: *const cef_insets_t)
    >,
    #[doc = "\n Returns the insets for this View in parent coordinates, or DIP screen\n coordinates if there is no parent.\n"]
    pub get_insets:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_insets_t>,
    #[doc = "\n Returns the size this View would like to be if enough space is available.\n Size is in parent coordinates, or DIP screen coordinates if there is no\n parent.\n"]
    pub get_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    #[doc = "\n Size this View to its preferred size. Size is in parent coordinates, or\n DIP screen coordinates if there is no parent.\n"]
    pub size_to_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    #[doc = "\n Returns the minimum size for this View. Size is in parent coordinates, or\n DIP screen coordinates if there is no parent.\n"]
    pub get_minimum_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    #[doc = "\n Returns the maximum size for this View. Size is in parent coordinates, or\n DIP screen coordinates if there is no parent.\n"]
    pub get_maximum_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    #[doc = "\n Returns the height necessary to display this View with the provided width.\n"]
    pub get_height_for_width: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            width: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Indicate that this View and all parent Views require a re-layout. This\n ensures the next call to layout() will propagate to this View even if the\n bounds of parent Views do not change.\n"]
    pub invalidate_layout: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    #[doc = "\n Sets whether this View is visible. Windows are hidden by default and other\n views are visible by default. This View and any parent views must be set\n as visible for this View to be drawn in a Window. If this View is set as\n hidden then it and any child views will not be drawn and, if any of those\n views currently have focus, then focus will also be cleared. Painting is\n scheduled as needed. If this View is a Window then calling this function\n is equivalent to calling the Window show() and hide() functions.\n"]
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, visible: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns whether this View is visible. A view may be visible but still not\n drawn in a Window if any parent views are hidden. If this View is a Window\n then a return value of true (1) indicates that this Window is currently\n visible to the user on-screen. If this View is not a Window then call\n is_drawn() to determine whether this View and all parent views are visible\n and will be drawn.\n"]
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns whether this View is visible and drawn in a Window. A view is\n drawn if it and all parent views are visible. If this View is a Window\n then calling this function is equivalent to calling is_visible().\n Otherwise, to determine if the containing Window is visible to the user\n on-screen call is_visible() on the Window.\n"]
    pub is_drawn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set whether this View is enabled. A disabled View does not receive\n keyboard or mouse inputs. If |enabled| differs from the current value the\n View will be repainted. Also, clears focus if the focused View is\n disabled.\n"]
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, enabled: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns whether this View is enabled.\n"]
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets whether this View is capable of taking focus. It will clear focus if\n the focused View is set to be non-focusable. This is false (0) by default\n so that a View used as a container does not get the focus.\n"]
    pub set_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, focusable: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if this View is focusable, enabled and drawn.\n"]
    pub is_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return whether this View is focusable when the user requires full keyboard\n access, even though it may not be normally focusable.\n"]
    pub is_accessibility_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Request keyboard focus. If this View is focusable it will become the\n focused View.\n"]
    pub request_focus: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    #[doc = "\n Sets the background color for this View.\n"]
    pub set_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t, color: cef_color_t)>,
    #[doc = "\n Returns the background color for this View.\n"]
    pub get_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_color_t>,
    #[doc = "\n Convert |point| from this View's coordinate system to DIP screen\n coordinates. This View must belong to a Window when calling this function.\n Returns true (1) if the conversion is successful or false (0) otherwise.\n Use cef_display_t::convert_point_to_pixels() after calling this function\n if further conversion to display-specific pixel coordinates is desired.\n"]
    pub convert_point_to_screen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Convert |point| to this View's coordinate system from DIP screen\n coordinates. This View must belong to a Window when calling this function.\n Returns true (1) if the conversion is successful or false (0) otherwise.\n Use cef_display_t::convert_point_from_pixels() before calling this\n function if conversion from display-specific pixel coordinates is\n necessary.\n"]
    pub convert_point_from_screen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Convert |point| from this View's coordinate system to that of the Window.\n This View must belong to a Window when calling this function. Returns true\n (1) if the conversion is successful or false (0) otherwise.\n"]
    pub convert_point_to_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Convert |point| to this View's coordinate system from that of the Window.\n This View must belong to a Window when calling this function. Returns true\n (1) if the conversion is successful or false (0) otherwise.\n"]
    pub convert_point_from_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Convert |point| from this View's coordinate system to that of |view|.\n |view| needs to be in the same Window but not necessarily the same view\n hierarchy. Returns true (1) if the conversion is successful or false (0)\n otherwise.\n"]
    pub convert_point_to_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            view: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Convert |point| to this View's coordinate system from that |view|. |view|\n needs to be in the same Window but not necessarily the same view\n hierarchy. Returns true (1) if the conversion is successful or false (0)\n otherwise.\n"]
    pub convert_point_from_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            view: *mut _cef_view_t,
            point: *mut cef_point_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n A View is a rectangle within the views View hierarchy. It is the base\n structure for all Views. All size and position values are in density\n independent pixels (DIP) unless otherwise indicated. Methods must be called\n on the browser process UI thread unless otherwise indicated.\n"]
pub type cef_view_t = _cef_view_t;
#[doc = "\n A Panel is a container in the views hierarchy that can contain other Views\n as children. Methods must be called on the browser process UI thread unless\n otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_panel_t {
    #[doc = "\n Base structure.\n"]
    pub base:                   cef_view_t,
    #[doc = "\n Returns this Panel as a Window or NULL if this is not a Window.\n"]
    pub as_window:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_window_t>,
    #[doc = "\n Set this Panel's Layout to FillLayout and return the FillLayout object.\n"]
    pub set_to_fill_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_fill_layout_t
    >,
    #[doc = "\n Set this Panel's Layout to BoxLayout and return the BoxLayout object.\n"]
    pub set_to_box_layout: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            settings: *const cef_box_layout_settings_t
        ) -> *mut _cef_box_layout_t
    >,
    #[doc = "\n Get the Layout.\n"]
    pub get_layout:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_layout_t>,
    #[doc = "\n Lay out the child Views (set their bounds based on sizing heuristics\n specific to the current Layout).\n"]
    pub layout: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t)>,
    #[doc = "\n Add a child View.\n"]
    pub add_child_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t, view: *mut _cef_view_t)
    >,
    #[doc = "\n Add a child View at the specified |index|. If |index| matches the result\n of GetChildCount() then the View will be added at the end.\n"]
    pub add_child_view_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            view: *mut _cef_view_t,
            index: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Move the child View to the specified |index|. A negative value for |index|\n will move the View to the end.\n"]
    pub reorder_child_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            view: *mut _cef_view_t,
            index: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Remove a child View. The View can then be added to another Panel.\n"]
    pub remove_child_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t, view: *mut _cef_view_t)
    >,
    #[doc = "\n Remove all child Views. The removed Views will be deleted if the client\n holds no references to them.\n"]
    pub remove_all_child_views:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t)>,
    #[doc = "\n Returns the number of child Views.\n"]
    pub get_child_view_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> usize>,
    #[doc = "\n Returns the child View at the specified |index|.\n"]
    pub get_child_view_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            index: ::std::os::raw::c_int
        ) -> *mut _cef_view_t
    >
}
#[doc = "\n A Panel is a container in the views hierarchy that can contain other Views\n as children. Methods must be called on the browser process UI thread unless\n otherwise indicated.\n"]
pub type cef_panel_t = _cef_panel_t;
extern "C" {
    #[doc = "\n Create a new Panel.\n"]
    pub fn cef_panel_create(delegate: *mut _cef_panel_delegate_t) -> *mut cef_panel_t;
}
#[doc = "\n Implement this structure to handle window events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                            cef_panel_delegate_t,
    #[doc = "\n Called when |window| is created.\n"]
    pub on_window_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t)
    >,
    #[doc = "\n Called when |window| is closing.\n"]
    pub on_window_closing: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t)
    >,
    #[doc = "\n Called when |window| is destroyed. Release all references to |window| and\n do not attempt to execute any functions on |window| after this callback\n returns.\n"]
    pub on_window_destroyed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t)
    >,
    #[doc = "\n Called when |window| is activated or deactivated.\n"]
    pub on_window_activation_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            active: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Called when |window| bounds have changed. |new_bounds| will be in DIP\n screen coordinates.\n"]
    pub on_window_bounds_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            new_bounds: *const cef_rect_t
        )
    >,
    #[doc = "\n Called when |window| is transitioning to or from fullscreen mode. On MacOS\n the transition occurs asynchronously with |is_competed| set to false (0)\n when the transition starts and true (1) after the transition completes. On\n other platforms the transition occurs synchronously with |is_completed|\n set to true (1) after the transition completes. With the Alloy runtime you\n must also implement cef_display_handler_t::OnFullscreenModeChange to\n handle fullscreen transitions initiated by browser content.\n"]
    pub on_window_fullscreen_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            is_completed: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Return the parent for |window| or NULL if the |window| does not have a\n parent. Windows with parents will not get a taskbar button. Set |is_menu|\n to true (1) if |window| will be displayed as a menu, in which case it will\n not be clipped to the parent window bounds. Set |can_activate_menu| to\n false (0) if |is_menu| is true (1) and |window| should not be activated\n (given keyboard focus) when displayed.\n"]
    pub get_parent_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            is_menu: *mut ::std::os::raw::c_int,
            can_activate_menu: *mut ::std::os::raw::c_int
        ) -> *mut _cef_window_t
    >,
    #[doc = "\n Return true (1) if |window| should be created as a window modal dialog.\n Only called when a Window is returned via get_parent_window() with\n |is_menu| set to false (0). All controls in the parent Window will be\n disabled while |window| is visible. This functionality is not supported by\n all Linux window managers. Alternately, use\n cef_window_t::show_as_browser_modal_dialog() for a browser modal dialog\n that works on all platforms.\n"]
    pub is_window_modal_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return the initial bounds for |window| in density independent pixel (DIP)\n coordinates. If this function returns an NULL CefRect then\n get_preferred_size() will be called to retrieve the size, and the window\n will be placed on the screen with origin (0,0). This function can be used\n in combination with cef_view_t::get_bounds_in_screen() to restore the\n previous window bounds.\n"]
    pub get_initial_bounds: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> cef_rect_t
    >,
    #[doc = "\n Return the initial show state for |window|.\n"]
    pub get_initial_show_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> cef_show_state_t
    >,
    #[doc = "\n Return true (1) if |window| should be created without a frame or title\n bar. The window will be resizable if can_resize() returns true (1). Use\n cef_window_t::set_draggable_regions() to specify draggable regions.\n"]
    pub is_frameless: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if |window| should be created with standard window buttons\n like close, minimize and zoom. This function is only supported on macOS.\n"]
    pub with_standard_window_buttons: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return whether the titlebar height should be overridden, and sets the\n height of the titlebar in |titlebar_height|. On macOS, it can also be used\n to adjust the vertical position of the traffic light buttons in frameless\n windows. The buttons will be positioned halfway down the titlebar at a\n height of |titlebar_height| / 2.\n"]
    pub get_titlebar_height: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            titlebar_height: *mut f32
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if |window| can be resized.\n"]
    pub can_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if |window| can be maximized.\n"]
    pub can_maximize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if |window| can be minimized.\n"]
    pub can_minimize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Return true (1) if |window| can be closed. This will be called for user-\n initiated window close actions and when cef_window_t::close() is called.\n"]
    pub can_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when a keyboard accelerator registered with\n cef_window_t::SetAccelerator is triggered. Return true (1) if the\n accelerator was handled or false (0) otherwise.\n"]
    pub on_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            command_id: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called after all other controls in the window have had a chance to handle\n the event. |event| contains information about the keyboard event. Return\n true (1) if the keyboard event was handled or false (0) otherwise.\n"]
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            event: *const cef_key_event_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle window events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_window_delegate_t = _cef_window_delegate_t;
#[doc = "\n A Window is a top-level Window/widget in the Views hierarchy. By default it\n will have a non-client area with title bar, icon and buttons that supports\n moving and resizing. All size and position values are in density independent\n pixels (DIP) unless otherwise indicated. Methods must be called on the\n browser process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_t {
    #[doc = "\n Base structure.\n"]
    pub base:                             cef_panel_t,
    #[doc = "\n Show the Window.\n"]
    pub show: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Show the Window as a browser modal dialog relative to |browser_view|. A\n parent Window must be returned via\n cef_window_delegate_t::get_parent_window() and |browser_view| must belong\n to that parent Window. While this Window is visible, |browser_view| will\n be disabled while other controls in the parent Window remain enabled.\n Navigating or destroying the |browser_view| will close this Window\n automatically. Alternately, use show() and return true (1) from\n cef_window_delegate_t::is_window_modal_dialog() for a window modal dialog\n where all controls in the parent Window are disabled.\n"]
    pub show_as_browser_modal_dialog: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, browser_view: *mut _cef_browser_view_t)
    >,
    #[doc = "\n Hide the Window.\n"]
    pub hide: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Sizes the Window to |size| and centers it in the current display.\n"]
    pub center_window: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, size: *const cef_size_t)
    >,
    #[doc = "\n Close the Window.\n"]
    pub close: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Returns true (1) if the Window has been closed.\n"]
    pub is_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Activate the Window, assuming it already exists and is visible.\n"]
    pub activate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Deactivate the Window, making the next Window in the Z order the active\n Window.\n"]
    pub deactivate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Returns whether the Window is the currently active Window.\n"]
    pub is_active: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Bring this Window to the top of other Windows in the Windowing system.\n"]
    pub bring_to_top: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Set the Window to be on top of other Windows in the Windowing system.\n"]
    pub set_always_on_top: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, on_top: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns whether the Window has been set to be on top of other Windows in\n the Windowing system.\n"]
    pub is_always_on_top: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Maximize the Window.\n"]
    pub maximize: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Minimize the Window.\n"]
    pub minimize: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Restore the Window.\n"]
    pub restore: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Set fullscreen Window state. The\n cef_window_delegate_t::OnWindowFullscreenTransition function will be\n called during the fullscreen transition for notification purposes.\n"]
    pub set_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, fullscreen: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if the Window is maximized.\n"]
    pub is_maximized: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the Window is minimized.\n"]
    pub is_minimized: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the Window is fullscreen.\n"]
    pub is_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Set the Window title.\n"]
    pub set_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, title: *const cef_string_t)
    >,
    #[doc = "\n Get the Window title.\n"]
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Set the Window icon. This should be a 16x16 icon suitable for use in the\n Windows's title bar.\n"]
    pub set_window_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, image: *mut _cef_image_t)
    >,
    #[doc = "\n Get the Window icon.\n"]
    pub get_window_icon:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_image_t>,
    #[doc = "\n Set the Window App icon. This should be a larger icon for use in the host\n environment app switching UI. On Windows, this is the ICON_BIG used in\n Alt-Tab list and Windows taskbar. The Window icon will be used by default\n if no Window App icon is specified.\n"]
    pub set_window_app_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, image: *mut _cef_image_t)
    >,
    #[doc = "\n Get the Window App icon.\n"]
    pub get_window_app_icon:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_image_t>,
    #[doc = "\n Add a View that will be overlayed on the Window contents with absolute\n positioning and high z-order. Positioning is controlled by |docking_mode|\n as described below. Setting |can_activate| to true (1) will allow the\n overlay view to receive input focus. The returned cef_overlay_controller_t\n object is used to control the overlay. Overlays are hidden by default.\n\n With CEF_DOCKING_MODE_CUSTOM:\n   1. The overlay is initially hidden, sized to |view|'s preferred size,\n      and positioned in the top-left corner.\n   2. Optionally change the overlay position and/or size by calling\n      CefOverlayController methods.\n   3. Call CefOverlayController::SetVisible(true) to show the overlay.\n   4. The overlay will be automatically re-sized if |view|'s layout\n      changes. Optionally change the overlay position and/or size when\n      OnLayoutChanged is called on the Window's delegate to indicate a\n      change in Window bounds.\n\n With other docking modes:\n   1. The overlay is initially hidden, sized to |view|'s preferred size,\n      and positioned based on |docking_mode|.\n   2. Call CefOverlayController::SetVisible(true) to show the overlay.\n   3. The overlay will be automatically re-sized if |view|'s layout changes\n      and re-positioned as appropriate when the Window resizes.\n\n Overlays created by this function will receive a higher z-order then any\n child Views added previously. It is therefore recommended to call this\n function last after all other child Views have been added so that the\n overlay displays as the top-most child of the Window.\n"]
    pub add_overlay_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            view: *mut _cef_view_t,
            docking_mode: cef_docking_mode_t,
            can_activate: ::std::os::raw::c_int
        ) -> *mut _cef_overlay_controller_t
    >,
    #[doc = "\n Show a menu with contents |menu_model|. |screen_point| specifies the menu\n position in screen coordinates. |anchor_position| specifies how the menu\n will be anchored relative to |screen_point|.\n"]
    pub show_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
            anchor_position: cef_menu_anchor_position_t
        )
    >,
    #[doc = "\n Cancel the menu that is currently showing, if any.\n"]
    pub cancel_menu: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    #[doc = "\n Returns the Display that most closely intersects the bounds of this\n Window. May return NULL if this Window is not currently displayed.\n"]
    pub get_display: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_display_t
    >,
    #[doc = "\n Returns the bounds (size and position) of this Window's client area.\n Position is in screen coordinates.\n"]
    pub get_client_area_bounds_in_screen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> cef_rect_t>,
    #[doc = "\n Set the regions where mouse events will be intercepted by this Window to\n support drag operations. Call this function with an NULL vector to clear\n the draggable regions. The draggable region bounds should be in window\n coordinates.\n"]
    pub set_draggable_regions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t
        )
    >,
    #[doc = "\n Retrieve the platform window handle for this Window.\n"]
    pub get_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut ::std::os::raw::c_void
    >,
    #[doc = "\n Simulate a key press. |key_code| is the VKEY_* value from Chromium's\n ui/events/keycodes/keyboard_codes.h header (VK_* values on Windows).\n |event_flags| is some combination of EVENTFLAG_SHIFT_DOWN,\n EVENTFLAG_CONTROL_DOWN and/or EVENTFLAG_ALT_DOWN. This function is exposed\n primarily for testing purposes.\n"]
    pub send_key_press: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            key_code: ::std::os::raw::c_int,
            event_flags: u32
        )
    >,
    #[doc = "\n Simulate a mouse move. The mouse cursor will be moved to the specified\n (screen_x, screen_y) position. This function is exposed primarily for\n testing purposes.\n"]
    pub send_mouse_move: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            screen_x: ::std::os::raw::c_int,
            screen_y: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Simulate mouse down and/or mouse up events. |button| is the mouse button\n type. If |mouse_down| is true (1) a mouse down event will be sent. If\n |mouse_up| is true (1) a mouse up event will be sent. If both are true (1)\n a mouse down event will be sent followed by a mouse up event (equivalent\n to clicking the mouse button). The events will be sent using the current\n cursor position so make sure to call send_mouse_move() first to position\n the mouse. This function is exposed primarily for testing purposes.\n"]
    pub send_mouse_events: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            button: cef_mouse_button_type_t,
            mouse_down: ::std::os::raw::c_int,
            mouse_up: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Set the keyboard accelerator for the specified |command_id|. |key_code|\n can be any virtual key or character value. Required modifier keys are\n specified by |shift_pressed|, |ctrl_pressed| and/or |alt_pressed|.\n cef_window_delegate_t::OnAccelerator will be called if the keyboard\n combination is triggered while this window has focus.\n\n The |high_priority| value will be considered if a child cef_browser_view_t\n has focus when the keyboard combination is triggered. If |high_priority|\n is true (1) then the key event will not be forwarded to the web content\n (`keydown` event handler) or cef_keyboard_handler_t first. If\n |high_priority| is false (0) then the behavior will depend on the\n cef_browser_view_t::SetPreferAccelerators configuration.\n"]
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
            high_priority: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Remove the keyboard accelerator for the specified |command_id|.\n"]
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, command_id: ::std::os::raw::c_int)
    >,
    #[doc = "\n Remove all keyboard accelerators.\n"]
    pub remove_all_accelerators:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>
}
#[doc = "\n A Window is a top-level Window/widget in the Views hierarchy. By default it\n will have a non-client area with title bar, icon and buttons that supports\n moving and resizing. All size and position values are in density independent\n pixels (DIP) unless otherwise indicated. Methods must be called on the\n browser process UI thread unless otherwise indicated.\n"]
pub type cef_window_t = _cef_window_t;
extern "C" {
    #[doc = "\n Create a new Window.\n"]
    pub fn cef_window_create_top_level(delegate: *mut _cef_window_delegate_t) -> *mut cef_window_t;
}
#[doc = "\n A Layout handles the sizing of the children of a Panel according to\n implementation-specific heuristics. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_layout_t {
    #[doc = "\n Base structure.\n"]
    pub base:           cef_base_ref_counted_t,
    #[doc = "\n Returns this Layout as a BoxLayout or NULL if this is not a BoxLayout.\n"]
    pub as_box_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> *mut _cef_box_layout_t
    >,
    #[doc = "\n Returns this Layout as a FillLayout or NULL if this is not a FillLayout.\n"]
    pub as_fill_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> *mut _cef_fill_layout_t
    >,
    #[doc = "\n Returns true (1) if this Layout is valid.\n"]
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n A Layout handles the sizing of the children of a Panel according to\n implementation-specific heuristics. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
pub type cef_layout_t = _cef_layout_t;
#[doc = "\n A Layout manager that arranges child views vertically or horizontally in a\n side-by-side fashion with spacing around and between the child views. The\n child views are always sized according to their preferred size. If the\n host's bounds provide insufficient space, child views will be clamped.\n Excess space will not be distributed. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_t {
    #[doc = "\n Base structure.\n"]
    pub base:                cef_layout_t,
    #[doc = "\n Set the flex weight for the given |view|. Using the preferred size as the\n basis, free space along the main axis is distributed to views in the ratio\n of their flex weights. Similarly, if the views will overflow the parent,\n space is subtracted in these ratios. A flex of 0 means this view is not\n resized. Flex values must not be negative.\n"]
    pub set_flex_for_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_box_layout_t,
            view: *mut _cef_view_t,
            flex: ::std::os::raw::c_int
        )
    >,
    #[doc = "\n Clears the flex for the given |view|, causing it to use the default flex\n specified via cef_box_layout_tSettings.default_flex.\n"]
    pub clear_flex_for_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_box_layout_t, view: *mut _cef_view_t)
    >
}
#[doc = "\n A Layout manager that arranges child views vertically or horizontally in a\n side-by-side fashion with spacing around and between the child views. The\n child views are always sized according to their preferred size. If the\n host's bounds provide insufficient space, child views will be clamped.\n Excess space will not be distributed. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
pub type cef_box_layout_t = _cef_box_layout_t;
#[doc = "\n A View representing a button. Depending on the specific type, the button\n could be implemented by a native control or custom rendered. Methods must be\n called on the browser process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_button_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_view_t,
    #[doc = "\n Returns this Button as a LabelButton or NULL if this is not a LabelButton.\n"]
    pub as_label_button: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t) -> *mut _cef_label_button_t
    >,
    #[doc = "\n Sets the current display state of the Button.\n"]
    pub set_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, state: cef_button_state_t)
    >,
    #[doc = "\n Returns the current display state of the Button.\n"]
    pub get_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t) -> cef_button_state_t
    >,
    #[doc = "\n Sets the Button will use an ink drop effect for displaying state changes.\n"]
    pub set_ink_drop_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, enabled: ::std::os::raw::c_int)
    >,
    #[doc = "\n Sets the tooltip text that will be displayed when the user hovers the\n mouse cursor over the Button.\n"]
    pub set_tooltip_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, tooltip_text: *const cef_string_t)
    >,
    #[doc = "\n Sets the accessible name that will be exposed to assistive technology\n (AT).\n"]
    pub set_accessible_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, name: *const cef_string_t)
    >
}
#[doc = "\n A View representing a button. Depending on the specific type, the button\n could be implemented by a native control or custom rendered. Methods must be\n called on the browser process UI thread unless otherwise indicated.\n"]
pub type cef_button_t = _cef_button_t;
#[doc = "\n Implement this structure to handle Button events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_button_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_view_delegate_t,
    #[doc = "\n Called when |button| is pressed.\n"]
    pub on_button_pressed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_delegate_t, button: *mut _cef_button_t)
    >,
    #[doc = "\n Called when the state of |button| changes.\n"]
    pub on_button_state_changed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_delegate_t, button: *mut _cef_button_t)
    >
}
#[doc = "\n Implement this structure to handle Button events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_button_delegate_t = _cef_button_delegate_t;
#[doc = "\n LabelButton is a button with optional text and/or icon. Methods must be\n called on the browser process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_label_button_t {
    #[doc = "\n Base structure.\n"]
    pub base:                     cef_button_t,
    #[doc = "\n Returns this LabelButton as a MenuButton or NULL if this is not a\n MenuButton.\n"]
    pub as_menu_button: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t) -> *mut _cef_menu_button_t
    >,
    #[doc = "\n Sets the text shown on the LabelButton. By default |text| will also be\n used as the accessible name.\n"]
    pub set_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, text: *const cef_string_t)
    >,
    #[doc = "\n Returns the text shown on the LabelButton.\n"]
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Sets the image shown for |button_state|. When this Button is drawn if no\n image exists for the current state then the image for\n CEF_BUTTON_STATE_NORMAL, if any, will be shown.\n"]
    pub set_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            button_state: cef_button_state_t,
            image: *mut _cef_image_t
        )
    >,
    #[doc = "\n Returns the image shown for |button_state|. If no image exists for that\n state then the image for CEF_BUTTON_STATE_NORMAL will be returned.\n"]
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            button_state: cef_button_state_t
        ) -> *mut _cef_image_t
    >,
    #[doc = "\n Sets the text color shown for the specified button |for_state| to |color|.\n"]
    pub set_text_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            for_state: cef_button_state_t,
            color: cef_color_t
        )
    >,
    #[doc = "\n Sets the text colors shown for the non-disabled states to |color|.\n"]
    pub set_enabled_text_colors: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, color: cef_color_t)
    >,
    #[doc = "\n Sets the font list. The format is \"<FONT_FAMILY_LIST>,[STYLES] <SIZE>\",\n where:\n - FONT_FAMILY_LIST is a comma-separated list of font family names,\n - STYLES is an optional space-separated list of style names (case-\n   sensitive \"Bold\" and \"Italic\" are supported), and\n - SIZE is an integer font size in pixels with the suffix \"px\".\n\n Here are examples of valid font description strings:\n - \"Arial, Helvetica, Bold Italic 14px\"\n - \"Arial, 14px\"\n"]
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, font_list: *const cef_string_t)
    >,
    #[doc = "\n Sets the horizontal alignment; reversed in RTL. Default is\n CEF_HORIZONTAL_ALIGNMENT_CENTER.\n"]
    pub set_horizontal_alignment: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            alignment: cef_horizontal_alignment_t
        )
    >,
    #[doc = "\n Reset the minimum size of this LabelButton to |size|.\n"]
    pub set_minimum_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, size: *const cef_size_t)
    >,
    #[doc = "\n Reset the maximum size of this LabelButton to |size|.\n"]
    pub set_maximum_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, size: *const cef_size_t)
    >
}
#[doc = "\n LabelButton is a button with optional text and/or icon. Methods must be\n called on the browser process UI thread unless otherwise indicated.\n"]
pub type cef_label_button_t = _cef_label_button_t;
extern "C" {
    #[doc = "\n Create a new LabelButton. A |delegate| must be provided to handle the button\n click. |text| will be shown on the LabelButton and used as the default\n accessible name.\n"]
    pub fn cef_label_button_create(
        delegate: *mut _cef_button_delegate_t,
        text: *const cef_string_t
    ) -> *mut cef_label_button_t;
}
#[doc = "\n A ScrollView will show horizontal and/or vertical scrollbars when necessary\n based on the size of the attached content view. Methods must be called on\n the browser process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scroll_view_t {
    #[doc = "\n Base structure.\n"]
    pub base:                            cef_view_t,
    #[doc = "\n Set the content View. The content View must have a specified size (e.g.\n via cef_view_t::SetBounds or cef_view_delegate_t::GetPreferredSize).\n"]
    pub set_content_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t, view: *mut _cef_view_t)
    >,
    #[doc = "\n Returns the content View.\n"]
    pub get_content_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> *mut _cef_view_t
    >,
    #[doc = "\n Returns the visible region of the content View.\n"]
    pub get_visible_content_rect:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> cef_rect_t>,
    #[doc = "\n Returns true (1) if the horizontal scrollbar is currently showing.\n"]
    pub has_horizontal_scrollbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the height of the horizontal scrollbar.\n"]
    pub get_horizontal_scrollbar_height: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns true (1) if the vertical scrollbar is currently showing.\n"]
    pub has_vertical_scrollbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the width of the vertical scrollbar.\n"]
    pub get_vertical_scrollbar_width: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int
    >
}
#[doc = "\n A ScrollView will show horizontal and/or vertical scrollbars when necessary\n based on the size of the attached content view. Methods must be called on\n the browser process UI thread unless otherwise indicated.\n"]
pub type cef_scroll_view_t = _cef_scroll_view_t;
extern "C" {
    #[doc = "\n Create a new ScrollView.\n"]
    pub fn cef_scroll_view_create(delegate: *mut _cef_view_delegate_t) -> *mut cef_scroll_view_t;
}
#[doc = "\n A simple Layout that causes the associated Panel's one child to be sized to\n match the bounds of its parent. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_fill_layout_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_layout_t
}
#[doc = "\n A simple Layout that causes the associated Panel's one child to be sized to\n match the bounds of its parent. Methods must be called on the browser\n process UI thread unless otherwise indicated.\n"]
pub type cef_fill_layout_t = _cef_fill_layout_t;
#[doc = "\n Implement this structure to handle BrowserView events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_view_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_view_delegate_t,
    #[doc = "\n Called when |browser| associated with |browser_view| is created. This\n function will be called after cef_life_span_handler_t::on_after_created()\n is called for |browser| and before on_popup_browser_view_created() is\n called for |browser|'s parent delegate if |browser| is a popup.\n"]
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            browser: *mut _cef_browser_t
        )
    >,
    #[doc = "\n Called when |browser| associated with |browser_view| is destroyed. Release\n all references to |browser| and do not attempt to execute any functions on\n |browser| after this callback returns. This function will be called before\n cef_life_span_handler_t::on_before_close() is called for |browser|.\n"]
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            browser: *mut _cef_browser_t
        )
    >,
    #[doc = "\n Called before a new popup BrowserView is created. The popup originated\n from |browser_view|. |settings| and |client| are the values returned from\n cef_life_span_handler_t::on_before_popup(). |is_devtools| will be true (1)\n if the popup will be a DevTools browser. Return the delegate that will be\n used for the new popup BrowserView.\n"]
    pub get_delegate_for_popup_browser_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            settings: *const _cef_browser_settings_t,
            client: *mut _cef_client_t,
            is_devtools: ::std::os::raw::c_int
        ) -> *mut _cef_browser_view_delegate_t
    >,
    #[doc = "\n Called after |popup_browser_view| is created. This function will be called\n after cef_life_span_handler_t::on_after_created() and on_browser_created()\n are called for the new popup browser. The popup originated from\n |browser_view|. |is_devtools| will be true (1) if the popup is a DevTools\n browser. Optionally add |popup_browser_view| to the views hierarchy\n yourself and return true (1). Otherwise return false (0) and a default\n cef_window_t will be created for the popup.\n"]
    pub on_popup_browser_view_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            popup_browser_view: *mut _cef_browser_view_t,
            is_devtools: ::std::os::raw::c_int
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the Chrome toolbar type that will be available via\n cef_browser_view_t::get_chrome_toolbar(). See that function for related\n documentation.\n"]
    pub get_chrome_toolbar_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t
        ) -> cef_chrome_toolbar_type_t
    >,
    #[doc = "\n Return true (1) to create frameless windows for Document picture-in-\n picture popups. Content in frameless windows should specify draggable\n regions using \"-webkit-app-region: drag\" CSS.\n"]
    pub use_frameless_window_for_picture_in_picture: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called when |browser_view| receives a gesture command. Return true (1) to\n handle (or disable) a |gesture_command| or false (0) to propagate the\n gesture to the browser for default handling. With the Chrome runtime these\n commands can also be handled via cef_command_handler_t::OnChromeCommand.\n"]
    pub on_gesture_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            gesture_command: cef_gesture_command_t
        ) -> ::std::os::raw::c_int
    >
}
#[doc = "\n Implement this structure to handle BrowserView events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_browser_view_delegate_t = _cef_browser_view_delegate_t;
#[doc = "\n A View hosting a cef_browser_t instance. Methods must be called on the\n browser process UI thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_view_t {
    #[doc = "\n Base structure.\n"]
    pub base:                    cef_view_t,
    #[doc = "\n Returns the cef_browser_t hosted by this BrowserView. Will return NULL if\n the browser has not yet been created or has already been destroyed.\n"]
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_t) -> *mut _cef_browser_t
    >,
    #[doc = "\n Returns the Chrome toolbar associated with this BrowserView. Only\n supported when using the Chrome runtime. The cef_browser_view_delegate_t::\n get_chrome_toolbar_type() function must return a value other than\n CEF_CTT_NONE and the toolbar will not be available until after this\n BrowserView is added to a cef_window_t and\n cef_view_delegate_t::on_window_changed() has been called.\n"]
    pub get_chrome_toolbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_t) -> *mut _cef_view_t
    >,
    #[doc = "\n Sets whether normal priority accelerators are first forwarded to the web\n content (`keydown` event handler) or cef_keyboard_handler_t. Normal\n priority accelerators can be registered via cef_window_t::SetAccelerator\n (with |high_priority|=false (0)) or internally for standard accelerators\n supported by the Chrome runtime. If |prefer_accelerators| is true (1) then\n the matching accelerator will be triggered immediately (calling\n cef_window_delegate_t::OnAccelerator or\n cef_command_handler_t::OnChromeCommand respectively) and the event will\n not be forwarded to the web content or cef_keyboard_handler_t first. If\n |prefer_accelerators| is false (0) then the matching accelerator will only\n be triggered if the event is not handled by web content (`keydown` event\n handler that calls `event.preventDefault()`) or by cef_keyboard_handler_t.\n The default value is false (0).\n"]
    pub set_prefer_accelerators: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_t,
            prefer_accelerators: ::std::os::raw::c_int
        )
    >
}
#[doc = "\n A View hosting a cef_browser_t instance. Methods must be called on the\n browser process UI thread unless otherwise indicated.\n"]
pub type cef_browser_view_t = _cef_browser_view_t;
extern "C" {
    #[doc = "\n Create a new BrowserView. The underlying cef_browser_t will not be created\n until this view is added to the views hierarchy. The optional |extra_info|\n parameter provides an opportunity to specify extra information specific to\n the created browser that will be passed to\n cef_render_process_handler_t::on_browser_created() in the render process.\n"]
    pub fn cef_browser_view_create(
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
        delegate: *mut _cef_browser_view_delegate_t
    ) -> *mut cef_browser_view_t;
}
extern "C" {
    #[doc = "\n Returns the BrowserView associated with |browser|.\n"]
    pub fn cef_browser_view_get_for_browser(
        browser: *mut _cef_browser_t
    ) -> *mut cef_browser_view_t;
}
#[doc = "\n MenuButton pressed lock is released when this object is destroyed.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_pressed_lock_t {
    #[doc = "\n Base structure.\n"]
    pub base: cef_base_ref_counted_t
}
#[doc = "\n MenuButton pressed lock is released when this object is destroyed.\n"]
pub type cef_menu_button_pressed_lock_t = _cef_menu_button_pressed_lock_t;
#[doc = "\n Implement this structure to handle MenuButton events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                   cef_button_delegate_t,
    #[doc = "\n Called when |button| is pressed. Call cef_menu_button_t::show_menu() to\n show a popup menu at |screen_point|. When showing a custom popup such as a\n window keep a reference to |button_pressed_lock| until the popup is hidden\n to maintain the pressed button state.\n"]
    pub on_menu_button_pressed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_button_delegate_t,
            menu_button: *mut _cef_menu_button_t,
            screen_point: *const cef_point_t,
            button_pressed_lock: *mut _cef_menu_button_pressed_lock_t
        )
    >
}
#[doc = "\n Implement this structure to handle MenuButton events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_menu_button_delegate_t = _cef_menu_button_delegate_t;
#[doc = "\n MenuButton is a button with optional text, icon and/or menu marker that\n shows a menu when clicked with the left mouse button. All size and position\n values are in density independent pixels (DIP) unless otherwise indicated.\n Methods must be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_t {
    #[doc = "\n Base structure.\n"]
    pub base:         cef_label_button_t,
    #[doc = "\n Show a menu with contents |menu_model|. |screen_point| specifies the menu\n position in screen coordinates. |anchor_position| specifies how the menu\n will be anchored relative to |screen_point|. This function should be\n called from cef_menu_button_delegate_t::on_menu_button_pressed().\n"]
    pub show_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_button_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
            anchor_position: cef_menu_anchor_position_t
        )
    >,
    #[doc = "\n Show the menu for this button. Results in a call to\n cef_menu_button_delegate_t::on_menu_button_pressed().\n"]
    pub trigger_menu: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_menu_button_t)>
}
#[doc = "\n MenuButton is a button with optional text, icon and/or menu marker that\n shows a menu when clicked with the left mouse button. All size and position\n values are in density independent pixels (DIP) unless otherwise indicated.\n Methods must be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_menu_button_t = _cef_menu_button_t;
extern "C" {
    #[doc = "\n Create a new MenuButton. A |delegate| must be provided to call show_menu()\n when the button is clicked. |text| will be shown on the MenuButton and used\n as the default accessible name. If |with_frame| is true (1) the button will\n have a visible frame at all times, center alignment, additional padding and\n a default minimum size of 70x33 DIP. If |with_frame| is false (0) the button\n will only have a visible frame on hover/press, left alignment, less padding\n and no default minimum size.\n"]
    pub fn cef_menu_button_create(
        delegate: *mut _cef_menu_button_delegate_t,
        text: *const cef_string_t
    ) -> *mut cef_menu_button_t;
}
#[doc = "\n Implement this structure to handle Textfield events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_textfield_delegate_t {
    #[doc = "\n Base structure.\n"]
    pub base:                 cef_view_delegate_t,
    #[doc = "\n Called when |textfield| receives a keyboard event. |event| contains\n information about the keyboard event. Return true (1) if the keyboard\n event was handled or false (0) otherwise for default handling.\n"]
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_delegate_t,
            textfield: *mut _cef_textfield_t,
            event: *const cef_key_event_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Called after performing a user action that may change |textfield|.\n"]
    pub on_after_user_action: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_delegate_t,
            textfield: *mut _cef_textfield_t
        )
    >
}
#[doc = "\n Implement this structure to handle Textfield events. The functions of this\n structure will be called on the browser process UI thread unless otherwise\n indicated.\n"]
pub type cef_textfield_delegate_t = _cef_textfield_delegate_t;
#[doc = "\n A Textfield supports editing of text. This control is custom rendered with\n no platform-specific code. Methods must be called on the browser process UI\n thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_textfield_t {
    #[doc = "\n Base structure.\n"]
    pub base:                           cef_view_t,
    #[doc = "\n Sets whether the text will be displayed as asterisks.\n"]
    pub set_password_input: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, password_input: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if the text will be displayed as asterisks.\n"]
    pub is_password_input: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Sets whether the text will read-only.\n"]
    pub set_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, read_only: ::std::os::raw::c_int)
    >,
    #[doc = "\n Returns true (1) if the text is read-only.\n"]
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the currently displayed text.\n"]
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Sets the contents to |text|. The cursor will be moved to end of the text\n if the current position is outside of the text range.\n"]
    pub set_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    #[doc = "\n Appends |text| to the previously-existing text.\n"]
    pub append_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    #[doc = "\n Inserts |text| at the current cursor position replacing any selected text.\n"]
    pub insert_or_replace_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    #[doc = "\n Returns true (1) if there is any selected text.\n"]
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Returns the currently selected text.\n"]
    pub get_selected_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Selects all text. If |reversed| is true (1) the range will end at the\n logical beginning of the text; this generally shows the leading portion of\n text that overflows its display area.\n"]
    pub select_all: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, reversed: ::std::os::raw::c_int)
    >,
    #[doc = "\n Clears the text selection and sets the caret to the end.\n"]
    pub clear_selection: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t)>,
    #[doc = "\n Returns the selected logical text range.\n"]
    pub get_selected_range:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_range_t>,
    #[doc = "\n Selects the specified logical text range.\n"]
    pub select_range: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, range: *const cef_range_t)
    >,
    #[doc = "\n Returns the current cursor position.\n"]
    pub get_cursor_position:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> usize>,
    #[doc = "\n Sets the text color.\n"]
    pub set_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    #[doc = "\n Returns the text color.\n"]
    pub get_text_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    #[doc = "\n Sets the selection text color.\n"]
    pub set_selection_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    #[doc = "\n Returns the selection text color.\n"]
    pub get_selection_text_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    #[doc = "\n Sets the selection background color.\n"]
    pub set_selection_background_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    #[doc = "\n Returns the selection background color.\n"]
    pub get_selection_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    #[doc = "\n Sets the font list. The format is \"<FONT_FAMILY_LIST>,[STYLES] <SIZE>\",\n where:\n - FONT_FAMILY_LIST is a comma-separated list of font family names,\n - STYLES is an optional space-separated list of style names (case-\n   sensitive \"Bold\" and \"Italic\" are supported), and\n - SIZE is an integer font size in pixels with the suffix \"px\".\n\n Here are examples of valid font description strings:\n - \"Arial, Helvetica, Bold Italic 14px\"\n - \"Arial, 14px\"\n"]
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, font_list: *const cef_string_t)
    >,
    #[doc = "\n Applies |color| to the specified |range| without changing the default\n color. If |range| is NULL the color will be set on the complete text\n contents.\n"]
    pub apply_text_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            color: cef_color_t,
            range: *const cef_range_t
        )
    >,
    #[doc = "\n Applies |style| to the specified |range| without changing the default\n style. If |add| is true (1) the style will be added, otherwise the style\n will be removed. If |range| is NULL the style will be set on the complete\n text contents.\n"]
    pub apply_text_style: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            style: cef_text_style_t,
            add: ::std::os::raw::c_int,
            range: *const cef_range_t
        )
    >,
    #[doc = "\n Returns true (1) if the action associated with the specified command id is\n enabled. See additional comments on execute_command().\n"]
    pub is_command_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            command_id: cef_text_field_commands_t
        ) -> ::std::os::raw::c_int
    >,
    #[doc = "\n Performs the action associated with the specified command id.\n"]
    pub execute_command: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, command_id: cef_text_field_commands_t)
    >,
    #[doc = "\n Clears Edit history.\n"]
    pub clear_edit_history:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t)>,
    #[doc = "\n Sets the placeholder text that will be displayed when the Textfield is\n NULL.\n"]
    pub set_placeholder_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t)
    >,
    #[doc = "\n Returns the placeholder text that will be displayed when the Textfield is\n NULL.\n"]
    pub get_placeholder_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t
    >,
    #[doc = "\n Sets the placeholder text color.\n"]
    pub set_placeholder_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t)
    >,
    #[doc = "\n Set the accessible name that will be exposed to assistive technology (AT).\n"]
    pub set_accessible_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, name: *const cef_string_t)
    >
}
#[doc = "\n A Textfield supports editing of text. This control is custom rendered with\n no platform-specific code. Methods must be called on the browser process UI\n thread unless otherwise indicated.\n"]
pub type cef_textfield_t = _cef_textfield_t;
extern "C" {
    #[doc = "\n Create a new Textfield.\n"]
    pub fn cef_textfield_create(delegate: *mut _cef_textfield_delegate_t) -> *mut cef_textfield_t;
}
#[doc = "\n Structure used for retrieving resources from the resource bundle (*.pak)\n files loaded by CEF during startup or via the cef_resource_bundle_handler_t\n returned from cef_app_t::GetResourceBundleHandler. See CefSettings for\n additional options related to resource bundle loading. The functions of this\n structure may be called on any thread unless otherwise indicated.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_bundle_t {
    #[doc = "\n Base structure.\n"]
    pub base:                        cef_base_ref_counted_t,
    #[doc = "\n Returns the localized string for the specified |string_id| or an NULL\n string if the value is not found. Include cef_pack_strings.h for a listing\n of valid string ID values.\n"]
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_t,
            string_id: ::std::os::raw::c_int
        ) -> cef_string_userfree_t
    >,
    #[doc = "\n Returns a cef_binary_value_t containing the decompressed contents of the\n specified scale independent |resource_id| or NULL if not found. Include\n cef_pack_resources.h for a listing of valid resource ID values.\n"]
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_t,
            resource_id: ::std::os::raw::c_int
        ) -> *mut _cef_binary_value_t
    >,
    #[doc = "\n Returns a cef_binary_value_t containing the decompressed contents of the\n specified |resource_id| nearest the scale factor |scale_factor| or NULL if\n not found. Use a |scale_factor| value of SCALE_FACTOR_NONE for scale\n independent resources or call GetDataResource instead.Include\n cef_pack_resources.h for a listing of valid resource ID values.\n"]
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t
        ) -> *mut _cef_binary_value_t
    >
}
#[doc = "\n Structure used for retrieving resources from the resource bundle (*.pak)\n files loaded by CEF during startup or via the cef_resource_bundle_handler_t\n returned from cef_app_t::GetResourceBundleHandler. See CefSettings for\n additional options related to resource bundle loading. The functions of this\n structure may be called on any thread unless otherwise indicated.\n"]
pub type cef_resource_bundle_t = _cef_resource_bundle_t;
extern "C" {
    #[doc = "\n Returns the global resource bundle instance.\n"]
    pub fn cef_resource_bundle_get_global() -> *mut cef_resource_bundle_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
